field f: Int

method getValue(x: Ref) returns (res: Int)
    requires acc(x.f)
    ensures acc(x.f)

method permTest(a: Ref, b: Ref, n: Int)
    requires acc(a.f) && acc(b.f) && b.f > 0
    requires n > 0
{
    a.f := b.f + 2
    assert a.f > 2
    a.f := n
    assert a.f >= 0 // incorrectly depends on acc(b.f)
}

method quantifiedPerm2Seqs2(xs: Seq[Ref], ys: Seq[Ref]) {
  assume |xs| > 5 && |ys| > 3
  inhale forall x: Ref :: x in xs ==> (acc(x.f, wildcard) && x.f > 0)
  inhale forall y: Ref :: y in ys ==> (acc(y.f, wildcard) && y.f > 0) // incorrectly depends on inhale forall x in xs due to heap summary

  assert xs[0].f > 0
}

method quantifiedPerm2Seqs3(xs: Seq[Ref], ys: Seq[Ref]) {
  assume |xs| > 5 && |ys| > 3
  inhale forall x: Ref :: x in xs ==> (acc(x.f, wildcard) && x.f > 0)
  inhale forall y: Ref :: y in ys ==> (acc(y.f, wildcard))

  assert xs[0].f > 0 // incorrectly depends on inhale forall x in xs due to heap summary
}