
field f: Int

method foo1(n: Int)
    requires n > 0
{
    var a : Bool := n >= 0
    assert a
}


method foo2(n: Int)
    requires n < 0
{
    var a : Bool := n >= 0
    assert !a
}

method foo3(n: Int)
    requires n != 0
{
    var a : Bool := n > 0 || n < 0
    assert a
}

method foo4(n: Int, x: Ref)
    requires n != 0
    requires acc(x.f)
    ensures acc(x.f)
{
    var a : Bool := n > 0
    if(a){
        x.f := n
    }else{
        x.f := -n
    }

    assert x.f >= n
}

method foo5(n: Int, x: Ref)
    requires n != 0
    requires acc(x.f)
    ensures acc(x.f)
{
    var a : Bool := n > 0
    if(a){
        x.f := n
    }else{
        x.f := -n
    }

    assert x.f > 0
}


method foo6(n: Int, x: Ref)
    requires acc(x.f)
    ensures acc(x.f)
{
    var a : Bool := n > 0
    if(a){
        x.f := n
    }else{
        x.f := -n
    }

    assert x.f >= 0
}


method foo7(n: Int, x: Ref)
    requires acc(x.f) && x.f > 0
    ensures acc(x.f) && x.f <= 0
{
    var a : Bool := n > 0
    if(a){
        x.f := -n
    }else{
        x.f := n
    }

    assert x.f <= n
}

method foo8(n: Int, x: Ref)
    requires acc(x.f) && x.f > 0
    ensures acc(x.f) && x.f < 0
{
    var a : Bool := n > 0
    if(a){
        x.f := -n
    }else{
        x.f := n - 1
    }

    assert x.f < n
}

method foo9(n: Int, x: Ref)
    requires n != 0
    requires acc(x.f) && x.f > 0
    ensures acc(x.f) && x.f < 0
{
    var a : Bool := n > 0
    if(a){
        x.f := -n
    }else{
        x.f := n
    }

    assert x.f <= n
}