
field f: Int


method branches2(a: Int, b: Int)
{
  var n:Int, c: Bool

  assume 0 < a && a < 100
  assume 0 < b
  assume b < 50
  assume c ==> a > 5

  if(c){
    n := a + 1
  }else{
    n := b + 1
  }

  var x: Int
  if(a >= n){
    x := a + b
  }else{
    x := n + 1
    assert x > 1
  }
  assert n > 1
  assert x > n
}


method branchesPerm(a: Ref, b: Ref)
  requires acc(a.f) && acc(b.f)
{
  var n:Int, c: Bool

  assume 0 < a.f && a.f < 100
  assume 0 < b.f
  assume b.f < 50
  assume c ==> a.f > 5

  if(c){
    n := a.f + 1
  }else{
    n := b.f + 1
  }

  var x: Int := 0
  if(a.f > n){
    x := a.f + b.f
  }else{
    x := n + 1
    assert x > 1
  }
  assert n > 1
  assert x > n
}

method nestedBranches1(a: Int, b: Int)
{
  var n:Int, c: Bool

  assume 0 < a && a < 100
  assume 0 < b
  assume b < 50
  assume c ==> a > 5

  if(c){
    if(a > b){
      n := a - b
    }else{
      n := a + b
      assert n > 0
    }
    n := n - 1
  }else{
    n := a + b
  }

  assert n >= 0
  assert n <= a + b
  assert c ==> n < a + b
}

function sum(a: Int, b: Int): Int
  requires a >= 0 && b >= 0
  ensures result == a + b
{
  a + b
}

function diff(a: Int, b: Int): Int
  requires a >= 0 && b >= 0
  requires a >= b
  ensures result == a - b
{
  a - b
}

method branchesFunctions(a: Int, b: Int)
{
  var n:Int, c: Bool

  assume 0 < a && a < 100
  assume 0 < b
  assume b < 50
  assume c ==> a > 5

  if(c){
    if(a > b){
      n := diff(a, b)
    }else{
      n := sum(a, b)
      assert n > 0
    }
    n := n - 1
  }else{
    n := sum(a, b)
  }

  assert n >= 0
  assert n <= a + b
  assert c ==> n < a + b
}


function sumPerm(a: Ref, b: Ref): Int
  requires acc(a.f, wildcard) && acc(b.f, wildcard)
  requires a.f >= 0 && b.f >= 0
  ensures result == a.f + b.f
{
  a.f + b.f
}

function diffPerm(a: Ref, b: Ref): Int
  requires acc(a.f, wildcard) && acc(b.f, wildcard)
  requires a.f >= 0 && b.f >= 0
  requires a.f >= b.f
  ensures result == a.f - b.f
{
  a.f - b.f
}

method branchesFunctionsPerm(a: Ref, b: Ref)
  requires acc(a.f) && acc(b.f)
{
  var n:Int, c: Bool

  assume 0 < a.f && a.f < 100
  assume 0 < b.f
  assume b.f < 50
  assume c ==> a.f > 5

  if(c){
    if(a.f > b.f){
      n := diffPerm(a, b)
    }else{
      n := sumPerm(a, b)
      assert n > 0
    }
    n := n - 1
  }else{
    n := sumPerm(a, b)
  }

  assert n >= 0
  assert n <= a.f + b.f
  assert c ==> n < a.f + b.f
}


method infeasibleBranch(a: Int, b: Int)
    requires a > 0 && b > 0
{
    var res: Int := a + 1


    if(a < 0){
        res := b + 1
        assert res >= 0
    }

    assert res >= 0
    assert res >= a
}