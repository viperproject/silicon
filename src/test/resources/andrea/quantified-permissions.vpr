field f: Int

method foo(xs: Seq[Ref], ys: Seq[Ref]) {
  assume |xs| > 5 && |ys| > 5
  inhale forall x: Ref :: x in xs ==> (acc(x.f) && x.f > 0)
  inhale forall y: Ref :: y in ys ==> (acc(y.f) && y.f > 0)

  assert xs[0].f > 0
}

method foo2(xs: Seq[Ref], ys: Seq[Ref]) {
  assume |xs| > 5 && |ys| > 5
  inhale forall x: Ref :: x in xs ==> (acc(x.f, wildcard) && x.f > 0)
  inhale forall y: Ref :: y in ys ==> (acc(y.f, wildcard) && y.f > 0)

  assert xs[0].f > 0
}

method foo3(xs: Seq[Ref], ys: Seq[Ref]) {
  assume |xs| > 5 && |ys| > 5
  inhale forall x: Ref :: x in xs ==> (acc(x.f, wildcard) && x.f > 0)
  inhale forall y: Ref :: y in ys ==> (acc(y.f, wildcard))

  assert xs[0].f > 0
}