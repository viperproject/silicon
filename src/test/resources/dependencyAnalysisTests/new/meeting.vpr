field f: Int


method infeasible1(x: Ref)
    requires @dependency()(acc(x.f, 1/2)) // missing dependency iff infeasible branches are skipped
    requires @dependency()(x.f > 0) // missing dependency iff infeasible branches are skipped
{
     if(@dependency()(x.f < 0)){ // missing dependency iff infeasible branches are skipped
        @testAssertion()
        x.f := x.f + 1 // // missing node iff infeasible branches are skipped
     }
}


method infeasible2(x: Ref)
    requires @obsolete()(x != null ==> acc(x.f)) // unexpected dependency iff infeasible branches are always executed
{
    if(@obsolete()(x == null)){ // unexpected dependency iff infeasible branches are always executed
        var a: Int
        @dependency()
        a := 0
        @testAssertion()
        assert a >= 0
    }
}

method infeasible3(x: Ref)
{
    if(@obsolete()(x != null)){ // unexpected dependency iff infeasible branches are always executed
        @obsolete()
        inhale acc(x.f)
    }

    if(@obsolete()(x == null)){ // unexpected dependency iff infeasible branches are always executed
        var a: Int
        @dependency()
        a := 0
        @testAssertion()
        assert a >= 0
    }
}
