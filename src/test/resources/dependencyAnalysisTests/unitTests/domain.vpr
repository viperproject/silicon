field val: Int
define access(a)
  (forall j: Int :: 0 <= j && j < len(a) ==> acc(slot(a,j).val))


domain IArray {
  function slot(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int


  axiom all_diff {
    forall a: IArray, i: Int :: { slot(a,i) }
      first(slot(a,i)) == a && second(slot(a,i)) == i
  }

  axiom len_nonneg {
    forall a: IArray :: { len(a) }
      len(a) >= 0
  }
}

method domain1()
{
  // Create an integer array with three elements
  var a: IArray
  @irrelevant("Explicit")
  inhale len(a) == 3

  // $PrecisionTest: $ACC_INVARIANT=access(a) $INVARIANT=len(a)==3

  @testAssertion("Implicit")
  inhale access(a) // access to all array slots
}

method domain2()
{
  // Create an integer array with three elements
  var a: IArray
  @irrelevant("Explicit")
  inhale len(a) == 3
  @dependency("Explicit")
  inhale access(a) // access to all array slots

  // Initialize the elements of an array
  var i: Int
  @dependency("Implicit")
  i := 0
  while (@dependency("PathCondition")(i < len(a)))
    invariant @dependency("LoopInvariant")(access(a))
    invariant @dependency("LoopInvariant")(0 <= i)
    invariant @irrelevant("LoopInvariant")(i <= len(a))
  {
    // $PrecisionTest: $READ_ONLY=i $INVARIANT=i<=len(a) $ACC_INVARIANT=access(a)
    @testAssertion("Implicit")
    slot(a,i).val := -i // models a[i] := -i
    @dependency("Implicit")
    i := i + 1
  }
}