field f: Int

method currentPerm(x: Ref)
    requires @dependency("Explicit")(acc(x.f, 1/2))
{
    // $PrecisionTest: $READ_ONLY=x.f

    @testAssertion("Explicit")
    assert perm(x.f) > 1/4
}

method perm1(){
    var x: Ref
    @dependency("Implicit")
    x := new(f)

    // $PrecisionTest: $READ_WRITE=x.f

    @testAssertion("Explicit")
    inhale x.f > 0
}

method perm2(){
    var x: Ref
    @dependency("Explicit")
    inhale acc(x.f, 1/2)

    // $PrecisionTest: $READ_ONLY=x.f

    @testAssertion("Explicit")
    inhale x.f > 0
}

method perm3(){
    var x: Ref
    @dependency("Explicit")
    inhale acc(x.f)

    // $PrecisionTest: $READ_WRITE=x.f

    @testAssertion("Implicit")
    x.f := 5
}

method perm4(){
    var x: Ref
    @dependency("Explicit")
    inhale acc(x.f)

    @dependency("Explicit")
    inhale x.f > 0

    @dependency("Implicit")
    x.f := x.f + 1

    // $PrecisionTest: $READ_ONLY=x.f
    // $INVARIANT=acc(x.f)==>x.f>1

    @testAssertion("Explicit")
    assert x.f > 1
}

method perm5(){
    var x: Ref
    @dependency("Explicit")
    inhale acc(x.f)
    @irrelevant("Implicit")
    x.f := x.f + 1

    // $PrecisionTest: $READ_WRITE=x.f

    @testAssertion("Explicit")
    exhale acc(x.f)
}

method fieldAccessPrecision(){
    var x: Ref
    var y: Ref

    @dependency("Explicit")
    inhale acc(x.f)
    @dependency("Explicit")
    inhale x.f > 0

    @irrelevant("Explicit")
    inhale acc(y.f)
    @irrelevant("Implicit")
    y.f := y.f + 1

    @testAssertion("Explicit")
    assert x.f >= 0
}

method fieldAccessPrecision2(){
    var x: Ref
    var y: Ref

    @dependency("Explicit")
    inhale acc(x.f)
    @irrelevant("Explicit")
    inhale x.f > 0

    @irrelevant("Explicit")
    inhale acc(y.f)
    @irrelevant("Implicit")
    x.f := y.f + 1

    @testAssertion("Explicit")
    exhale acc(x.f)
}

method permAmount1(x: Ref, p: Perm)
   requires @dependency("Explicit")(p > none)
   requires @dependency("Explicit")(acc(x.f, p))
 {
   @dependency("Explicit")
   assume p > 1/2
   @testAssertion("Explicit")
   exhale acc(x.f, 1/2)
 }

 method permAmount2(x: Ref, p: Perm)
   requires p > none
   requires @dependency("Explicit")(acc(x.f, p))
 {
   @dependency("Explicit")
   inhale x.f > 0
   @dependency("Explicit")
   assume p > 1/2
   exhale acc(x.f, 1/2)
   @testAssertion("Explicit")
   assert x.f > 0
 }


method noAlias(a: Ref, b: Ref, c: Ref)
    requires @dependency("Explicit")(acc(a.f))
    requires @dependency("Explicit")(acc(b.f, 1/2))
    requires @irrelevant("Explicit")(acc(c.f, 1/2))
{
    // $PrecisionTest: $READ_WRITE=a.f $READ_ONLY=b.f,c.f

    @testAssertion("Explicit")
    assert a != b
}



