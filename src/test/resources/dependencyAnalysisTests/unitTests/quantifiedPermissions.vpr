field f: Int

method quantifiedPerm1(xs: Seq[Ref]) {
  assume @dependency("Explicit")(|xs| > 5)
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))

  // $PrecisionTest: $READ_WRITE=xs[0].f,xs[1].f,xs[2].f

  @testAssertion()
  xs[0].f := 10
}

method quantifiedPerm2(xs: Seq[Ref]) {
  assume @dependency("Explicit")(|xs| > 5)
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))

  // $PrecisionTest: $READ_WRITE=xs[0].f,xs[1].f,xs[4].f

  @testAssertion()
  xs[0].f := xs[1].f + xs[4].f
}

method quantifiedPerm3(xs: Seq[Ref], y: Ref) {
  assume @dependency("Explicit")(|xs| > 5)
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))
  inhale @dependency("Explicit")(acc(y.f, wildcard))

  // $PrecisionTest: $READ_WRITE=xs[0].f,y.f,xs[1].f,xs[4].f

  @testAssertion("Explicit")
  assert xs[0] != y
}

method quantifiedExhalePartiallyTest(xs: Seq[Ref]) {
  var res: Int
  assume |xs| > 5
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))

  // $PrecisionTest: $READ_WRITE=xs[0].f,xs[1].f,xs[4].f

  @testAssertion("Explicit")
  exhale forall x: Ref :: x in xs ==> acc(x.f, 1/2)
}

method quantifiedExhalePartially(xs: Seq[Ref]) {
  var res: Int
  assume @dependency("Explicit")(|xs| > 5)
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))

  exhale forall x: Ref :: x in xs ==> acc(x.f, 1/2)

  // $PrecisionTest: $READ_WRITE=res $READ_ONLY=xs[1].f,xs[0].f,xs[2].f

  @testAssertion("Implicit")
  res := xs[1].f + 1
}

method quantifiedExhaleFully(xs: Seq[Ref]) {
  assume @irrelevant("Explicit")(|xs| > 5)
  inhale @dependency("Explicit")(forall x: Ref :: x in xs ==> acc(x.f))

  // $PrecisionTest: $READ_WRITE=xs[0].f,xs[2].f $READ_ONLY=xs[1].f

  @testAssertion("Explicit")
  exhale forall x: Ref :: x in xs ==> acc(x.f)
}

method quantifiedPermWrite1(xs: Seq[Ref]) {
  @dependency("Explicit")
  assume |xs| > 5
  @dependency("Explicit")
  inhale forall x: Ref :: x in xs ==> (acc(x.f) && x.f > 0)

  // $PrecisionTest: $READ_WRITE=xs[2].f $READ_ONLY=xs[0].f,xs[1].f

  inhale xs[0] != xs[2] // relevant for precision test

  @testAssertion("Implicit")
  xs[0].f := 0
}

method quantifiedPermWrite2(xs: Seq[Ref]) {
  @dependency("Explicit")
  assume |xs| > 5
  @dependency("Explicit")
  inhale forall x: Ref :: x in xs ==> (acc(x.f) && x.f > 0)

  @dependency("Implicit")
  xs[0].f := 0

  // $PrecisionTest: $READ_WRITE=xs[2].f $READ_ONLY=xs[0].f,xs[1].f

  inhale xs[0] != xs[2] // relevant for precision test
  @testAssertion("Explicit")
  assert xs[0].f == 0
}

method quantifiedPermWrite3(xs: Seq[Ref]) {
  @dependency("Explicit")
  assume |xs| > 5
  @dependency("Explicit")
  inhale forall x: Ref :: x in xs ==> (acc(x.f) && x.f > 0)

  @irrelevant("Implicit")
  xs[0].f := 0

  // $PrecisionTest: $READ_WRITE=xs[0].f $READ_ONLY=xs[1].f,xs[2].f

  @testAssertion("Explicit")
  assert xs[0] != xs[1] ==> xs[1].f > 0
}

method quantifiedPermWrite4(xs: Seq[Ref], ys: Seq[Ref])
  requires @dependency("Explicit")(|xs| > 5)
  requires @irrelevant("Explicit")(|ys| > 3)
{
  @dependency("Explicit")
  inhale forall x: Ref :: x in xs ==> acc(x.f)
  @irrelevant("Explicit")
  inhale forall y: Ref :: y in ys ==> acc(y.f)

  // $PrecisionTest: $READ_WRITE=ys[0].f,ys[1].f $READ_ONLY=xs[0].f,xs[1].f

  @testAssertion("Implicit")
  xs[0].f := 2
}
