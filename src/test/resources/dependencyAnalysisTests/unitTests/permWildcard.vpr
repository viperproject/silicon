field f: Int
field g: Int

method wildcardPerm(x: Ref, y: Ref)
  requires @dependency("Explicit")(acc(x.f, wildcard))
  requires @irrelevant("Explicit")(acc(y.f, wildcard))
  requires x != y // could be a dependency but doesn't have to
{
  @testAssertion("Implicit")
  inhale x.f > 0
}

method wildcardPerm2(x: Ref, y: Ref)
  requires @irrelevant("Explicit")(acc(y.f, wildcard))
  requires @dependency("Explicit")(acc(x.f, wildcard))
  requires x != y // could be a dependency but doesn't have to
{
  @testAssertion("Implicit")
  inhale x.f > 0
}

method wildcardPermDistinctFields(x: Ref, y: Ref)
  requires @dependency("Explicit")(acc(x.f, wildcard))
  requires @irrelevant("Explicit")(acc(y.g, wildcard))
{
  @testAssertion("Implicit")
  inhale x.f > 0
}

method quantifiedPermWildcard(xs: Seq[Ref], ys: Seq[Ref])
  requires @dependency("Explicit")(|xs| > 5)
  requires @irrelevant("Explicit")(|ys| > 3)
{
  @dependency("Explicit")
  inhale (forall x: Ref :: x in xs ==> (acc(x.f, wildcard) && x.f > 0))
  @irrelevant("Explicit")
  inhale forall y: Ref :: y in ys ==> (acc(y.f, wildcard))

  @testAssertion("Explicit")
  assert xs[0].f > 0
}