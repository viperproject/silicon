field f: Int

method sum(x: Int, y: Int) returns(res: Int)
  requires x >= 0 && y >= 0
  ensures res == x + y
{
 res := x + y
}

method call1(){
    var x: Int, y: Int
    @dependency("Explicit")
    assume x > 10
    @dependency("Explicit")
    assume y > 0

    @testAssertion("Implicit")
    x := sum(x, y)
}

method call2(){
    var x: Int, y: Int, z: Int
    @dependency("Explicit")
    assume x > 10
    @dependency("Explicit")
    assume y > 0

    @dependency("Implicit")
    z := sum(x, y)

    // $PrecisionTest: $READ_ONLY=x,y,z

    @testAssertion("Explicit")
    assert z == x + y
}

method call3(x: Int, y: Int)
{
  @dependency("Explicit")
  assume x > 0
  @dependency("Explicit")
  assume y > 0

  var n: Int, n2: Int
  @dependency("Implicit")
  n := sum(x, y)

  // $PrecisionTest: $READ_WRITE=n2 $READ_ONLY=x,y,n

  @dependency("Implicit")
  n2 := sum(x, y)
  @dependency("Implicit")
  n := n + n2

  @testAssertion("Explicit")
  assert n == 2*x + 2*y
}


method call4(x: Int, y: Int, z: Int)
{
  @dependency("Explicit")
  assume x > 0
  @dependency("Explicit")
  assume y > 0

  @irrelevant("Explicit")
  assume z > 0

  var n: Int, n2: Int
  @dependency("Implicit")
  n := sum(x, y)

  // $PrecisionTest: $READ_WRITE=n2 $READ_ONLY=n,z,x,y

  @irrelevant("Implicit")
  n2 := sum(x, z)

  @testAssertion("Explicit")
  assert n == x + y
}
