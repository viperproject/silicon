field f: Int

method implicitUpperBounds(x: Ref, y: Ref)
  requires @dependency("Explicit")(acc(x.f))
  requires @dependency("Explicit")(acc(y.f, wildcard))
{
  var z: Ref
  @irrelevant("Explicit")
  inhale true --* acc(z.f)
  @irrelevant("Rewrite")
  apply true --* acc(z.f)


  @testAssertion("Explicit")
  assert x != y
}

method implicitUpperBounds_quantified(gen_xs: Seq[Ref], y: Ref)
  requires @dependency("Explicit")(|gen_xs|> 2)
  requires @dependency("Explicit")(forall gen_xi: Ref :: gen_xi in gen_xs ==> acc(gen_xi.f))
  requires @dependency("Explicit")(acc(y.f, wildcard))
{
  var z: Ref
  @irrelevant("Explicit")
  inhale true --* acc(z.f)
  @irrelevant("Rewrite")
  apply true --* acc(z.f)


  @testAssertion("Explicit")
  assert gen_xs[0] != y
}

method implicitUpperBounds_quantified_2(gen_xs: Seq[Ref], y: Ref)
  requires @dependency("Explicit")(|gen_xs|> 2)
  requires @dependency("Explicit")(forall gen_xi: Ref :: gen_xi in gen_xs ==> acc(gen_xi.f))
  requires @dependency("Explicit")(acc(y.f, 1/2))
{
  var z: Ref
  @irrelevant("Explicit")
  inhale true --* acc(z.f)
  @irrelevant("Rewrite")
  apply true --* acc(z.f)


  @testAssertion("Explicit")
  assert gen_xs[0] != y
}