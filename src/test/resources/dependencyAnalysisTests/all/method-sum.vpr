field f: Int

method sum(x: Int, y: Int) returns(res: Int)
  requires x >= 0 && y >= 0
  ensures res == x + y
  ensures res > 100
{
 assume x > 100
 res := x + y
}


method sumClient(x: Int, y: Int)
{
  @dependency("Explicit")
  assume x >= 0
  @dependency("Explicit")
  assume y >= 0
  @dependency("Explicit")
  assume x < y
  @dependency("Implicit")
  var n: Int := sum(x, y)

  // the following stmt reports dependency on n := sum(x, y) because (x < y && n == x + y && n > 100 ==> y != 0)
  // although you could also prove it via (0 <= x && x < y ==> y != 0)
  @dependency("Implicit")
  var n2: Int := sum(x/y, y)
  @dependency("Implicit")
  n := n + n2

  @testAssertion("Explicit")
  assert n >= x + 2*y
}

method sumClient2(x: Int, y: Int)
{
  @irrelevant("Explicit")
  assume x >= 0
  @dependency("Explicit")
  assume y >= 0
  @irrelevant("Explicit")
  assume x < y
  @irrelevant("Implicit")
  var n: Int := sum(x, x)
  assert n >= 100

  @dependency("Implicit")
  var n2: Int := sum(y, y)
  @testAssertion("Explicit")
  assert n2 == 2*y
}