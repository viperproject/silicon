method branches1(a: Int, b: Int)
{
  var n:Int, c: Bool

  @dependency("Explicit")
  assume 0 < a
  @dependency("Explicit")
  assume b > 4

  @irrelevant("Explicit")
  assume a < 100
  @irrelevant("Explicit")
  assume b < 50
  @irrelevant("Explicit")
  assume c ==> a > 5

  if(@irrelevant("PathCondition")(c)){
    @dependency("Implicit")
    n := a + 1
  }else{
    @dependency("Implicit")
    n := b + 1
  }

  @testAssertion("Explicit")
  assert n > 1
}

method branches2(a: Int, b: Int)
{
  var n:Int, c: Bool

  @dependency("Explicit")
  assume 0 < a
  @irrelevant("Explicit")
  assume a < 100
  @irrelevant("Explicit")
  assume a < b
  @irrelevant("Explicit")
  assume b < 50

  var x: Int
  if(@dependency("PathCondition")(a >= n)){
    @irrelevant("Implicit")
    x := a + b
  }else{
    @dependency("Implicit")
    x := n + 1
    @testAssertion("Explicit")
    assert x > 1
  }
}

method branches3(a: Int, b: Int)
{
  var n:Int, c: Bool

  @dependency("Explicit")
  assume 0 < b

  var x: Int
  if(@dependency("PathCondition")(a >= n)){
    @dependency("Implicit")
    x := a + b
  }else{
    @dependency("Implicit")
    x := n + 1
  }

  @testAssertion("Explicit")
  assert x > n
}


method nestedBranches1(a: Int, b: Int)
{
  var n:Int, c: Bool

  @irrelevant("Explicit")
  assume 0 < a
  @irrelevant("Explicit")
  assume a < 100
  @dependency("Explicit")
  assume 0 < b
  @irrelevant("Explicit")
  assume b < 50
  @irrelevant("Explicit")
  assume c ==> a > 5

  if(@irrelevant("PathCondition")(c)){
    if(@irrelevant("PathCondition")(a > b)){
      @dependency("Implicit")
      n := a - b
    }else{
      @dependency("Implicit")
      n := a + b
    }
    @dependency("Implicit")
    n := n - 1
  }else{
    @dependency("Implicit")
    n := a + b
  }

  @testAssertion("Explicit")
  assert n <= a + b
  assert c ==> n < a + b
}
