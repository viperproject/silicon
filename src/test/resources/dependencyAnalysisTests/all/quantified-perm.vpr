field f: Int
field first : Ref
field second : Ref



method quantifiedWritePerm(nodes: Set[Ref], x: Ref)
  requires @obsolete()(forall n:Ref :: { n.first } n in nodes ==>
    acc(n.first) && 
    (n.first != null ==> n.first in nodes))
  requires @dependency()(forall n:Ref :: { n.second } n in nodes ==>
    acc(n.second) && 
    (n.second != null ==> n.second in nodes))
  requires @dependency()(x in nodes)
{
  var y : Ref
  if(@dependency()(x.second != null)) {
    @dependency()
    y := x.second // permissions covered by preconditions
    @dependency()
    y.second := y
    @testAssertion()
    assert x.second.second == x.second
  }
}

method quantifiedSum(nodes: Set[Ref], x: Ref)
  requires @dependency()(forall n:Ref :: { n.first } n in nodes ==>
    acc(n.first) && 
    (n.first != null ==> n.first in nodes))
  requires @dependency()(forall n:Ref :: { n.f } n in nodes ==>
    acc(n.f) && 0 <= n.f && n.f <= 100)
  requires @dependency()(x in nodes)
{
  var a: Int
  @dependency()
  a := x.f
  if(@dependency()(x.first != null)) {
    @dependency()
    a := a + x.first.f
  }
  @testAssertion()
  assert a >= 0
}

