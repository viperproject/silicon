field left: Int
field right: Int

predicate tuple(this: Ref) {
  acc(this.left) && acc(this.right)
}

method setTuple(this: Ref, l: Int, r: Int)
  requires @dependency("Precondition")(tuple(this))
  ensures tuple(this)
{
  @dependency("Implicit")
  unfold tuple(this)
  @irrelevant("Implicit")
  this.left := l
  @irrelevant("Implicit")
  this.right := r
  @testAssertion("Implicit")
  fold tuple(this)
}

method addTuple(this: Ref) returns (sum: Int)
  requires @dependency("Precondition")(acc(tuple(this), 1/2))
  ensures acc(tuple(this), 1/2)
{
  @dependency("Implicit")
  unfold acc(tuple(this), 1/2)
  @irrelevant("Implicit")
  sum := this.left + this.right
  @testAssertion("Implicit")
  fold acc(tuple(this), 1/2)
}