field f: Int


method maybeAlias(a: Ref, b: Ref, c: Bool, n: Int)
    requires @dependency("Explicit")(acc(a.f, 1/2))
    requires @dependency("Explicit")(acc(b.f, 1/2))
    requires @dependency("Explicit")(c ==> a == b)
    requires @irrelevant("Explicit")(a.f > 0 && n > 0 && b.f >= 0)
    requires @irrelevant("Explicit")(a.f < 100)
    requires @irrelevant("Explicit")(!c ==> a.f < b.f)
{
    if(@dependency("PathCondition")(c)){
        @testAssertion("Implicit")
        a.f := n + 1
    }
}

method aliasing1(x: Ref, n: Int)
  requires @dependency("Explicit")(acc(x.f))
  requires @irrelevant("Explicit")(n > 0)
  requires @irrelevant("Explicit")(x.f > n)
{
  @dependency("Implicit")
  x.f := n + 1

  var y: Ref
  @dependency("Implicit")
  y := x

  @testAssertion("Explicit")
  assert y.f > n
}


method aliasing2(x: Ref, y: Ref, n: Int)
  requires @dependency("Explicit")(acc(x.f, 1/2))
  requires @dependency("Explicit")(acc(y.f, 1/2))
  requires @irrelevant("Explicit")(n > 0)
  requires @irrelevant("Explicit")(x.f > n)
{
  if(@dependency("PathCondition")(x == y)){
    @testAssertion("Implicit")
    x.f := n + 1
  }
}

method alias1(a: Ref, b: Ref, c: Ref)
    requires @dependency("Explicit")(acc(a.f))
    requires  @irrelevant("Explicit")(acc(b.f))
{
    var x: Int
    if (@dependency("PathCondition")(c == a)) {
        @dependency("Implicit")
        x := c.f
    }
    if(@dependency("PathCondition")(c == b)) {
        @irrelevant("Implicit")
        x := c.f
    }

    @dependency("Explicit")
    assume a == c

    @testAssertion("Explicit")
    assert x == a.f
}


