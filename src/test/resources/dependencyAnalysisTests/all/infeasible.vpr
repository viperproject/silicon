field f: Int

method infeasibleBranch1(a: Int, b: Int)
    requires @dependency("Precondition")(a > 0)
{
    if(@dependency("PathCondition")(a < 0)){
        @testAssertion("Explicit")
        assert false
    }
}

method infeasibleBranch2(a: Int, b: Int)
    requires @dependency("Precondition")(a > 0)
{
    var res: Int
    if(@dependency("PathCondition")(a < 0)){
        @irrelevant("Explicit")
        assume res < 0
    }else{
        @dependency("Explicit")
        assume res > 0
    }
    @testAssertion("Explicit")
    assert res > 0
}


method infeasibleBranchPerm(a: Ref, b: Ref)
    requires @dependency("Precondition")(acc(a.f, 1/2))
    requires @dependency("Precondition")(a.f > 0)
{
     if(@dependency("PathCondition")(a.f < 0)){
        @testAssertion("Implicit")
        a.f := a.f + 1
     }
}


method infeasibleBranchNoPerm(a: Int, b: Ref)
    requires @dependency("Precondition")(a > 0)
{
    var res: Int
    if(@dependency("PathCondition")(a < 0)){
        @irrelevant("Implicit")
        res := b.f + 1
        @testAssertion("Explicit")
        assert false
    }
}