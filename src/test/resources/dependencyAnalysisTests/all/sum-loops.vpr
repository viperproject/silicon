field f: Int

method sum(n: Int) returns (res: Int)
  requires @dependency("Explicit")(0 <= n)
  ensures  res == n * (n + 1) / 2
{
  @dependency("Implicit")
  res := 0
  var i: Int
  @dependency("Implicit")
  i := 0;
  while(@dependency("PathCondition")(i <= n))
    invariant @dependency("LoopInvariant")(i <= (n + 1))
    invariant @dependency("LoopInvariant")(res == (i - 1) * i / 2)
  {
    @dependency("Implicit")
    res := res + i
    @dependency("Implicit")
    i := i + 1
  }

  @testAssertion("Explicit")
  assert res == n * (n + 1) / 2
}


method sumPerm1(n: Int, res: Ref)
  requires @dependency("Explicit")(acc(res.f))
  requires @dependency("Explicit")(0 <= n)
  ensures acc(res.f)
  ensures  res.f == n * (n + 1) / 2
{
  @dependency("Implicit")
  res.f := 0
  var i: Int
  @dependency("Implicit")
  i := 0;
  while(@dependency("PathCondition")(i <= n))
    invariant @dependency("LoopInvariant")(acc(res.f))
    invariant @dependency("LoopInvariant")(i <= (n + 1))
    invariant @dependency("LoopInvariant")(res.f == (i - 1) * i / 2)
  {
    @dependency("Implicit")
    res.f := res.f + i
    @dependency("Implicit")
    i := i + 1
  }

  @testAssertion("Explicit")
  assert res.f == n * (n + 1) / 2
}

method sumPerm2(n: Int, res: Ref)
  requires @dependency("Explicit")(acc(res.f))
  requires @irrelevant("Explicit")(0 <= n)
  ensures acc(res.f)
{
  @irrelevant("Implicit")
  res.f := 0
  var i: Int
  @irrelevant("Implicit")
  i := 0;
  while(@irrelevant("PathCondition")(i <= n))
    invariant @dependency("LoopInvariant")(acc(res.f))
    invariant @irrelevant("LoopInvariant")(i <= (n + 1))
    invariant @irrelevant("LoopInvariant")(res.f == (i - 1) * i / 2)
  {
    @irrelevant("Implicit")
    res.f := res.f + i
    @irrelevant("Implicit")
    i := i + 1
  }

  @testAssertion("Implicit") // only check permission flow
  res.f := 5
}