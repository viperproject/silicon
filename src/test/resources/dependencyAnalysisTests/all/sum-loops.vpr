field f: Int

method sum(n: Int) returns (res: Int)
  requires @dependency()(0 <= n)
  ensures  res == n * (n + 1) / 2
{
  @dependency()
  res := 0
  var i: Int
  @dependency()
  i := 0;
  while(@dependency()(i <= n))
    invariant @dependency()(i <= (n + 1))
    invariant @dependency()(res == (i - 1) * i / 2)
  {
    @dependency()
    res := res + i
    @dependency()
    i := i + 1
  }

  @testAssertion()
  assert res == n * (n + 1) / 2
}


method sumPerm1(n: Int, res: Ref)
  requires @dependency()(acc(res.f))
  requires @dependency()(0 <= n)
  ensures acc(res.f)
  ensures  res.f == n * (n + 1) / 2
{
  @dependency()
  res.f := 0
  var i: Int
  @dependency()
  i := 0;
  while(@dependency()(i <= n))
    invariant @dependency()(acc(res.f))
    invariant @dependency()(i <= (n + 1))
    invariant @dependency()(res.f == (i - 1) * i / 2)
  {
    @dependency()
    res.f := res.f + i
    @dependency()
    i := i + 1
  }

  @testAssertion()
  assert res.f == n * (n + 1) / 2
}

method sumPerm2(n: Int, res: Ref)
  requires @dependency()(acc(res.f))
  requires @obsolete()(0 <= n)
  ensures acc(res.f)
{
  @obsolete()
  res.f := 0
  var i: Int
  @obsolete()
  i := 0;
  while(@obsolete()(i <= n))
    invariant @dependency()(acc(res.f))
    invariant @obsolete()(i <= (n + 1))
    invariant @obsolete()(res.f == (i - 1) * i / 2)
  {
    @obsolete()
    res.f := res.f + i
    @obsolete()
    i := i + 1
  }

  @testAssertion() // only check permission flow
  res.f := 5
}