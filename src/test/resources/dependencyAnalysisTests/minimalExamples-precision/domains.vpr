field f: Int
field val: Int
define access(a)
  (forall j: Int :: 0 <= j && j < len(a) ==> acc(slot(a,j).val))


domain IArray {
  function slot(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: { slot(a,i) }
      first(slot(a,i)) == a && second(slot(a,i)) == i
  }

  axiom len_nonneg {
    forall a: IArray :: { len(a) }
      len(a) >= 0
  }
}


method domain_functions()
{
  var a: IArray
  inhale len(a) == 3
  inhale access(a)

  slot(a,1).val := 1

  slot(a,0).val := 0

  assert slot(a,0).val >= 0 // test assertion - precise
}
