field gen_f: Int

predicate gen_confuse(i: Int, a: Int){
  i >= 0 // TODO
}

function gen_add(a: Int, b: Int): Int
  ensures result == a + b

function gen_add_positive(a: Int, b: Int): Int
  requires a >= 0 && b >= 0
  ensures result == a + b
  ensures result >= 0

// assignments
SNIPPET assignment$=${
  @irrelevant("Implicit")
  $RW_INT_0 := $RO_INT_0 + $RO_INT_1
}

SNIPPET assignment2$=${
  @irrelevant("Implicit")
  $RW_INT_1 := $RO_INT_0 + $RO_INT_1
}

// fold-unfold
SNIPPET fold_unfold_1$=${
  var gen_i: Int 
  @irrelevant("Implicit")
  gen_i := 0
  @irrelevant("Implicit")
  fold gen_confuse(gen_i, $RO_INT_0)
  @irrelevant("Implicit")
  unfold gen_confuse(gen_i, $RO_INT_0)
}

// fold-unfold
SNIPPET fold_unfold_2$=${
  var gen_i: Int 
  @irrelevant("Implicit")
  gen_i := 0
  @irrelevant("Implicit")
  fold gen_confuse(gen_i, $RO_INT_0)
  @irrelevant("Implicit")
  $RW_INT_0 := $RO_INT_0 + $RO_INT_1
  @irrelevant("Implicit")
  unfold gen_confuse(gen_i, $RO_INT_0)
  @irrelevant("Implicit")
  $RW_INT_0 := gen_i + $RW_INT_0
}


// function call
SNIPPET function_add$=${
  @irrelevant("Implicit")
  $RW_INT_0 := gen_add($RO_INT_0, $RO_INT_1)
  @irrelevant("Implicit")
  $RW_INT_1 := gen_add($RO_INT_2, $RO_INT_3)
  @irrelevant("Implicit")
  $RW_INT_2 := gen_add($RW_INT_0, $RW_INT_1)
  
  assert $RW_INT_2 == $RO_INT_0 + $RO_INT_1 + $RO_INT_2 + $RO_INT_3
}

// branches & function calls
SNIPPET branch_function$=${
  if(@irrelevant("PathCondition")($RO_INT_0 > 0 && $RO_INT_1 > 0)){
    @irrelevant("Implicit")
    $RW_INT_0 := gen_add_positive($RO_INT_0, $RO_INT_1)
  }else{
    if(@irrelevant("PathCondition")($RO_INT_0 > 0)){
      @irrelevant("Implicit")
      $RW_INT_0 := gen_add_positive($RO_INT_0, -$RO_INT_1)
    }else{
      @irrelevant("Implicit")
      $RW_INT_0 := 0
    }
  }
  
  
  assert $RW_INT_0 >= 0
}


// disjoint references
SNIPPET ref_1$=${
  var gen_x: Ref
  @irrelevant("Explicit")
  inhale acc(gen_x.f)

  @irrelevant("Implicit")
  gen_x.f := $RO_INT_0 + $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_x.f
}

// disjoint references - disjoint fields
SNIPPET ref_2$=${
  var gen_x: Ref
  @irrelevant("Explicit")
  inhale acc(gen_x.gen_f)

  @irrelevant("Implicit")
  gen_x.gen_f := $RO_INT_0 + $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_x.gen_f

  @irrelevant("Implicit")
  exhale acc(gen_x.gen_f, 3/4)
}

// disjoint references - quantified
SNIPPET ref_quantified_1$=${
  var gen_xs: Seq[Ref]
  @irrelevant("Explicit")
  inhale |gen_xs| > 2
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.f)
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> gen_x.f < 0

  @irrelevant("Implicit")
  gen_xs[0].f := gen_xs[1].f + $RO_INT_0 - $RO_INT_1
  @irrelevant("Implicit")
  gen_xs[1].f := gen_xs[0].f - $RW_INT_0 + $RW_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_xs[0].f + gen_xs[1].f 

  @irrelevant("Implicit")
  exhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.f, 1/2)
}

// disjoint references - disjoint fields - quantified 
SNIPPET ref_quantified_2$=${
  var gen_xs: Seq[Ref]
  @irrelevant("Explicit")
  inhale |gen_xs| > 2
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.gen_f)
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> gen_x.gen_f < 0

  @irrelevant("Implicit")
  gen_xs[0].gen_f := gen_xs[1].gen_f + $RO_INT_0 - $RO_INT_1
  @irrelevant("Implicit")
  gen_xs[1].gen_f := gen_xs[0].gen_f - $RW_INT_0 + $RW_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_xs[0].gen_f + gen_xs[1].gen_f 

  @irrelevant("Implicit")
  exhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.gen_f, 1/2)
}


SNIPPET exhale_inhale$=${
  @irrelevant("Implicit")
  exhale acc($RW_INT_FIELD_0, 1/2)

  @irrelevant("Explicit")
  inhale acc($RW_INT_FIELD_0, 1/2)
}


// TODO: apply, package, goto, while, quasihavoc, inhale, assume, divBy0