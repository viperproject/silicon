field gen_f: Int

predicate gen_confuse(i: Int, x: Ref){
  i >= 0 && acc(x.f)
}

predicate gen_confuse_genf(i: Int, x: Ref){
  i >= 0 && acc(x.gen_f)
}


predicate gen_confuse_with_impl(i: Int, x: Ref){
  i >= 0 ==> acc(x.f)
}

predicate gen_confuse_gen_field(i: Int, x: Ref){
  i >= 0 ==> acc(x.gen_f)
}

function gen_add(a: Int, b: Int): Int
  requires b > 0
  ensures result > a
{ a + b }

function gen_add_impure(x: Ref, b: Int): Int
  requires acc(x.f)
  requires b > 0
  ensures result == x.f + b
  ensures result > x.f

function gen_add_positive(a: Int, b: Int): Int
  requires a >= 0 && b >= 0
  ensures result == a + b
  ensures result >= 0

method incr(a: Ref)
  requires acc(a.f)
  requires a.f > 0
  ensures acc(a.f)
  ensures a.f == old(a.f) + 1
  ensures a.f > 1
{
  a.f := a.f + 1
}

method incr_gen_f(a: Ref)
  requires acc(a.gen_f)
  requires a.gen_f > 0
  ensures acc(a.gen_f)
  ensures a.gen_f == old(a.gen_f) + 1
  ensures a.gen_f > 1
{
  a.gen_f := a.gen_f + 1
}

method gen_incr_pure(a: Int) returns (res: Int)
  requires a > 0
  ensures res == a + 1
  ensures res > 1
{
  res := a + 1
}

SNIPPET 00_baseline$=${}

SNIPPET 01_inhale_invariant$=${
  var gen_i: Int
  @irrelevant("Explicit")
  inhale $INVARIANT && gen_i > 0
}

SNIPPET 02_assert_invariant$=${
  var gen_i: Int
  @irrelevant("Explicit")
  inhale gen_i > 0
  @irrelevant()
  assert $INVARIANT && gen_i > 0
}

SNIPPET 02_2_assert_invariant$=${
  @irrelevant()
  assert $INVARIANT
}

SNIPPET 03_assignment_pure$=${
  @irrelevant("Implicit")
  $RW_INT_PURE_0 := $RO_INT_0 + $RO_INT_1
}

SNIPPET 04_assignment_field$=${
  @irrelevant("Implicit")
  $RW_INT_FIELD_0 := $RO_INT_0 + $RO_INT_1
}

SNIPPET 04_2_assignment_field_disjoint_field$=${
  @irrelevant("Implicit")
  inhale acc($RO_REF_F_0.gen_f)
  @irrelevant("Implicit")
  $RO_REF_F_0.gen_f := $RO_INT_0 + $RO_INT_1
}

SNIPPET 05_assignment_disjoint_ref$=${
  var gen_x: Ref
  // @irrelevant("Explicit") // TODO ake: aliasing!
  inhale acc(gen_x.f)

  @irrelevant("Implicit")
  gen_x.f := $RO_INT_0 + $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_x.f
}

SNIPPET 06_assignment_disjoint_ref_disjoint_field$=${
  var gen_x: Ref
  @irrelevant("Explicit")
  inhale acc(gen_x.gen_f)

  @irrelevant("Implicit")
  gen_x.gen_f := $RO_INT_0 + $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_x.gen_f
}


SNIPPET 07_assignment_disjoint_ref_quantified$=${
  var gen_xs: Seq[Ref]
  @irrelevant("Explicit")
  inhale |gen_xs| > 2
  // @irrelevant("Explicit") // TODO ake: aliasing!
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.f)
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> gen_x.f < 0

  @irrelevant("Implicit")
  gen_xs[0].f := gen_xs[1].f + $RO_INT_0 - $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_xs[0].f + gen_xs[1].f
}


SNIPPET 08_assignment_disjoint_ref_disjoint_field_quantified$=${
  var gen_xs: Seq[Ref]
  @irrelevant("Explicit")
  inhale |gen_xs| > 2
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> acc(gen_x.gen_f)
  @irrelevant("Explicit")
  inhale forall gen_x: Ref :: gen_x in gen_xs ==> gen_x.gen_f < 0

  @irrelevant("Implicit")
  gen_xs[0].gen_f := gen_xs[1].gen_f + $RO_INT_0 - $RO_INT_1

  @irrelevant("Implicit")
  $RW_INT_0 := gen_xs[0].gen_f + gen_xs[1].gen_f 
}

// fold-unfold
SNIPPET 09_1_fold_unfold$=${
  var gen_x: Ref
  // @irrelevant("Explicit") // TODO ake: aliasing!
  inhale acc(gen_x.f)
  @irrelevant("Implicit")
  $RW_INT_0 := 1
  @irrelevant("Implicit")
  fold gen_confuse($RW_INT_0, gen_x)
  @irrelevant("Implicit")
  unfold gen_confuse($RW_INT_0, gen_x)
}

// fold-unfold with implication
SNIPPET 09_fold_unfold_with_implication$=${
  var gen_x: Ref
  // @irrelevant("Explicit") // TODO ake: aliasing!
  inhale acc(gen_x.f)
  @irrelevant("Implicit")
  fold gen_confuse_with_impl($RO_INT_0, gen_x)
  @irrelevant("Implicit")
  unfold gen_confuse_with_impl($RO_INT_0, gen_x)
}

// function call
SNIPPET 10_function_add_pure$=${
  @irrelevant("Implicit")
  $RW_INT_0 := 5
  @irrelevant("Implicit")
  $RW_INT_0 := gen_add($RO_INT_0, $RW_INT_0)
  @irrelevant("Implicit")
  $RW_INT_1 := 1
  @irrelevant("Implicit")
  $RW_INT_1 := gen_add($RO_INT_1, $RW_INT_1)
}


SNIPPET 11_function_add_impure$=${
  @irrelevant("Implicit")
  $RW_INT_0 := 5
  @irrelevant("Implicit")
  $RW_INT_0 := gen_add_impure($RW_REF_F_0, $RW_INT_0)
}

SNIPPET 12_method_call_pure$=${
  @irrelevant("Implicit")
  $RW_INT_0 := 5
  @irrelevant("Implicit")
  $RW_INT_0 := gen_incr_pure($RW_INT_0)
}

SNIPPET 13_method_call_impure$=${
  var gen_ref_0: Ref
  gen_ref_0 := new(f) // might be used for non-aliasing proof
  @irrelevant("Explicit")
  inhale gen_ref_0.f > 2
  @irrelevant("Implicit")
  incr(gen_ref_0)
}

SNIPPET 14_branch$=${
  var gen_i: Int
  if(@irrelevant("PathCondition")($RO_INT_0 > gen_i)){
    @irrelevant("Implicit")
    $RW_INT_0 := 10
  }else{
    @irrelevant("Implicit")
    $RW_INT_0 := $RO_INT_0 + $RO_INT_1
  }
}

SNIPPET 15_branch_nested$=${
  var gen_c: Int
  if(@irrelevant("PathCondition")($RO_INT_0 > gen_c && $RO_INT_1 > gen_c)){
    var gen_i: Int
    @irrelevant("Implicit")
    gen_i := $RO_INT_0 + $RO_INT_1
    @irrelevant("Implicit")
    $RW_INT_0 := 10
  }else{
    if(@irrelevant("PathCondition")($RO_INT_0 > gen_c + 5)){
      @irrelevant("Implicit")
      $RW_INT_0 := 30
    }else{
      var gen_i: Int
      @irrelevant("Implicit")
      gen_i := $RO_INT_0 + $RO_INT_1
    }
  }
}

SNIPPET 16_branch_infeasible$=${
  if(@irrelevant("PathCondition")($INVARIANT)){
    @irrelevant("Implicit")
    $RW_INT_0 := 10
  }else{
    // unreachable
    @irrelevant("Implicit")
    $RO_INT_FIELD_0 := $RO_INT_1 - $RO_INT_0
    
    @irrelevant()
    assert false
  }
}

SNIPPET 17_branch_function$=${
  var gen_c: Int
  @irrelevant("Explicit")
  inhale gen_c > 0
  if(@irrelevant("PathCondition")($RO_INT_0 > gen_c && $RO_INT_1 > gen_c)){
    @irrelevant("Implicit")
    $RW_INT_0 := gen_add_positive($RO_INT_0, $RO_INT_1)
  }else{
    if(@irrelevant("PathCondition")($RO_INT_0 > gen_c)){
      @irrelevant("Implicit")
      $RW_INT_0 := gen_add_positive($RO_INT_0, gen_c)
    }else{
      @irrelevant("Implicit")
      $RW_INT_0 := 0
    }
  }
}


SNIPPET 18_while_pure$=${
  var gen_start: Int, gen_c: Int
  @irrelevant("Explicit")
  inhale gen_c >= 0
  @irrelevant("Implicit")
  gen_start := $RW_INT_PURE_0
  @irrelevant("Implicit")
  $RW_INT_PURE_1 := 0
  while(@irrelevant("PathCondition")($RW_INT_PURE_0 > gen_c))
    invariant @irrelevant("LoopInvariant")($RW_INT_PURE_0 <= gen_start)
    invariant @irrelevant("LoopInvariant")($RW_INT_PURE_1 == (gen_start-$RW_INT_PURE_0)*$RO_INT_PURE_0)
  {
    @irrelevant("Implicit")
    $RW_INT_PURE_1 := $RW_INT_PURE_1 + $RO_INT_PURE_0
    @irrelevant("Implicit")
    $RW_INT_PURE_0 := $RW_INT_PURE_0 - 1
  }
}

SNIPPET 19_while_perm$=${
  var gen_start: Int, gen_c: Int
  @irrelevant("Explicit")
  inhale gen_c >= 0
  @irrelevant("Implicit")
  gen_start := $RW_INT_FIELD_0
  @irrelevant("Implicit")
  $RW_INT_FIELD_1 := 0
  while(@irrelevant("PathCondition")($RW_INT_FIELD_0 > gen_c))
    invariant $ACC_INVARIANT
    invariant @irrelevant("LoopInvariant")($GEN_ACC_INVARIANT)
    invariant @irrelevant("LoopInvariant")($RW_INT_FIELD_0 <= gen_start)
    invariant @irrelevant("LoopInvariant")($RW_INT_FIELD_1 == (gen_start-$RW_INT_FIELD_0)*10)
  {
    @irrelevant("Implicit")
    $RW_INT_FIELD_1 := $RW_INT_FIELD_1 + 10
    @irrelevant("Implicit")
    $RW_INT_FIELD_0 := $RW_INT_FIELD_0 - 1
  }
}

SNIPPET 20_magic_wand$=${
    var gen_i: Int
    var gen_x: Ref
    @irrelevant("Explicit")
    inhale gen_i > 0
    // @irrelevant("Explicit") // TODO ake: aliasing!
    inhale acc(gen_x.f)
    @irrelevant("Explicit")
    inhale gen_x.f > 0
    @irrelevant("Implicit")
    package gen_i >= 0 --* acc(gen_x.f) && gen_x.f > 0
    @irrelevant("Implicit")
    apply gen_i >= 0 --* acc(gen_x.f) && gen_x.f > 0
}


SNIPPET 21_quasihavoc$=${
  @irrelevant("Implicit")
  quasihavoc $RW_INT_FIELD_0
}

SNIPPET 21_2_quasihavoc_disjoint_field$=${
  @irrelevant("Implicit")
  inhale acc($RO_REF_F_0.gen_f)
  @irrelevant("Implicit")
  quasihavoc $RO_REF_F_0.gen_f
}

SNIPPET 22_quasihavoc_disjoint_ref$=${
  var gen_x: Ref
  @irrelevant("Implicit")
  gen_x := new(f)
  @irrelevant("Implicit")
  quasihavoc gen_x.f
}

SNIPPET 23_quasihavoc_disjoint_ref_disjoint_field$=${
  var gen_x: Ref
  @irrelevant("Implicit")
  gen_x := new(gen_f)
  @irrelevant("Implicit")
  quasihavoc gen_x.gen_f
}


SNIPPET 24_goto_pure$=${
  @irrelevant("Implicit")
  $RW_INT_PURE_0 := 0
  var gen_n: Int
  @irrelevant("Implicit")
  gen_n := 0
  label head
    invariant @irrelevant("LoopInvariant")(gen_n >= 0)
    invariant @irrelevant("LoopInvariant")($RW_INT_PURE_0 == gen_n * $RO_INT_PURE_0)

  @irrelevant("Implicit")
  $RW_INT_PURE_0 := $RW_INT_PURE_0 + $RO_INT_PURE_0
  @irrelevant("Implicit")
  gen_n := gen_n + 1

  if(@irrelevant("PathCondition")($RW_INT_PURE_0 != 5 * $RO_INT_PURE_0)){
    goto head
  }

  @irrelevant()
  assert $RW_INT_PURE_0 == gen_n * $RO_INT_PURE_0
}

SNIPPET 25_unrelated_sync_points$=${
  var gen_i: Int, gen_j: Int, gen_n: Int, gen_p: Int
  var gen_x: Ref
  var gen_xs: Seq[Ref]
  @irrelevant("Implicit")
  gen_x := new(gen_f)
  @irrelevant("Explicit")
  inhale gen_x.gen_f >= 0
  
  @irrelevant("Explicit")
  inhale |gen_xs| > 2
  @irrelevant("Explicit")
  inhale forall gen_xi: Ref :: gen_xi in gen_xs ==> acc(gen_xi.gen_f)
  @irrelevant("Explicit")
  inhale forall gen_xi: Ref :: gen_xi in gen_xs ==> gen_xi.gen_f < 0

  @irrelevant("Explicit")
  inhale gen_i > 0
  @irrelevant("Explicit")
  inhale 0 <= gen_n && gen_n < 100

  @irrelevant("Rewrite")
  fold gen_confuse_genf(gen_n, gen_x)
  @irrelevant("Implicit")
  gen_i := gen_add_positive(gen_i, gen_n)
  @irrelevant("Rewrite")
  unfold gen_confuse_genf(gen_n, gen_x)

  while(@irrelevant("PathCondition")(gen_n > 0))
    invariant @irrelevant("Invariant")(acc(gen_x.gen_f))
    invariant @irrelevant("Invariant")(forall gen_xi: Ref :: gen_xi in gen_xs ==> acc(gen_xi.gen_f, 1/2))
    invariant @irrelevant("Invariant")(gen_x.gen_f >= 0)
    invariant @irrelevant("Invariant")(gen_n >= 0)
  {
    @irrelevant("Implicit")
    gen_x.gen_f := gen_x.gen_f + gen_n
    @irrelevant("Implicit")
    gen_j := gen_xs[1].gen_f
  }

  @irrelevant("Implicit")
  gen_i := 4
  @irrelevant("Implicit")
  gen_j := gen_add(gen_j, gen_i)

  @irrelevant("Implicit")
  gen_x.gen_f := 4
  @irrelevant("Implicit")
  incr_gen_f(gen_x)
  @irrelevant("Implicit")
  gen_xs[2].gen_f := 4
  @irrelevant("Implicit")
  incr_gen_f(gen_xs[2])
  @irrelevant("Rewrite")
  package gen_i >= 0 --* acc(gen_x.gen_f)
  @irrelevant("Rewrite")
  package gen_i >= 0 --* acc(gen_xs[0].gen_f)

  var gen_bool: Bool
  if(@irrelevant("PathCondition")(gen_bool)){
    @irrelevant("Implicit")
    gen_bool := false
  }

  @irrelevant()
  assert !gen_bool

  @irrelevant("Rewrite")
  apply gen_i >= 0 --* acc(gen_x.gen_f)
  @irrelevant("Rewrite")
  apply gen_i >= 0 --* acc(gen_xs[0].gen_f)

  @irrelevant("Implicit")
  gen_x.gen_f := gen_i + gen_n

  @irrelevant("Implicit")
  gen_xs[0].gen_f := 10

  @irrelevant("Implicit")
  gen_xs[0].gen_f := gen_xs[1].gen_f + gen_n

  @irrelevant()
  assert gen_n == 0
  @irrelevant()
  assert gen_xs[0] != gen_xs[1] && gen_xs[1] != gen_xs[2] ==> gen_xs[0].gen_f < 0
}