import "./tree.vpr"

method contains(root: Ref, value: Int) returns (res: Bool)
//requires tree(root)
//ensures tree(root)
{
    if(root == null){
        res := false
    } else {
    
        var curr: Ref := root
        //package tree(curr) --* tree(root)
        //unfold tree(curr)

        while(curr != null && curr.val != value)
        //invariant tree(curr) --* tree(root)
        //invariant curr != null ==> (acc(curr.left) && acc(curr.right) && acc(curr.val))
        //invariant curr != null ==> (tree(curr.left) && tree(curr.right))
        {
            
            var prev: Ref := curr
            if(curr.val > value){
                curr := curr.left
            } else {
                curr := curr.right
            }
            
            //unfold tree(curr)
            //package tree(curr) --* tree(root){
                //fold tree(prev)
                //apply tree(prev) --* tree(root)
            //}
        }

        if(curr != null){
            res := true
        } else {
            res := false
        }
        //fold tree(curr)
        //apply tree(curr) --* tree(root)
    }
}