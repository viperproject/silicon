struct Node {
  var left: Node;
  var right: Node;
  var data: Int;
}

predicate skew_heap(x: Node, content: bag<Int>) {
    x == null &*&
    content == bag<Int>()
  ||
    x != null &*&
    acc(x) &*&
    skew_heap(x.left, l_content) &*&
    skew_heap(x.right, r_content) &*&
    content == l_content ++ r_content ++ bag(x.data) &*&
    (x.left == null || x.left.data >= x.data) &*&
    (x.right == null || x.right.data >= x.data)
}

//from http://en.wikipedia.org/wiki/Skew_heap

//  union :: Ord a => SkewHeap a -> SkewHeap a -> SkewHeap a
//  Empty              `union` t2                 = t2
//  t1                 `union` Empty              = t1
//  t1@(Node x1 l1 r1) `union` t2@(Node x2 l2 r2)
//     | x1 <= x2                                 = Node x1 (t2 `union` r1) l1
//     | otherwise                                = Node x2 (t1 `union` r2) l2
procedure union(h1: Node, h2: Node, implicit ghost content1: bag<Int>, implicit ghost content2: bag<Int>) returns (res: Node)
    requires skew_heap(h1, content1) &*& skew_heap(h2, content2);
    ensures skew_heap(res, content1 ++ content2);
{
    if (h1 == null) {
        return h2;
    } else if (h2 == null) {
        return h1;
    } else if (h1.data <= h2.data) {
        var u : Node;
        u := union(h2, h1.right);
        h1.right := h1.left;
        h1.left := u;
        return h1;
    } else {
        var u : Node;
        u := union(h1, h2.right);
        h2.right := h2.left;
        h2.left := u;
        return h2;
    }
}

//  insert :: Ord a => a -> SkewHeap a -> SkewHeap a
//  insert x heap = singleton x `union` heap
procedure insert(h: Node, value: Int, implicit ghost content: bag<Int>) returns (res: Node)
    requires skew_heap(h, content);
    ensures skew_heap(res, content ++ bag(value));
{
    var n: Node;
    n := new Node;
    n.left := null;
    n.right := null;
    n.data := value;
    returns union(h, n);
}

//  extractMin :: Ord a => SkewHeap a -> Maybe (a, SkewHeap a)
//  extractMin Empty        = Nothing
//  extractMin (Node x l r) = Just (x, l `union` r)
procedure extractMin(h: Node, implicit ghost content: bag<Int>) returns (min: Int, rest: Node)
    requires skew_heap(h, content) &*& h != null;
    ensures  skew_heap(rest, content -- bag(min));
    ensures  forall n in content :: n >= min;
{
    var d : Int;
    d := h.data;
    var hp: Node;
    hp := union(h.left, h.right);
    free h;
    return d, hp;
}
