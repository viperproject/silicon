import "./sl.vpr"

method sls_double_all(lst: Ref) returns (res: Ref)
requires list(lst)
requires lst != null
ensures list(lst)
{
    var x: Ref := lst
    //var bound: Int := unfolding list(x) in x.data

    package list(x) --* list(lst) 

    while(x != null)
    invariant list(x)
    //invariant x != null ==> unfolding list(x) in bound <= x.data
    invariant list(x) --* list(lst) 
    {
        var x_old: Ref := x
        //var old_bound: Int := bound
        unfold list(x)
        //bound := x.data
        x := x.next
        package list(x) --* list(lst) {
            fold list(x_old)
            apply list(x_old) --* list(lst) 
        }
    }
    apply list(x) --* list(lst)
}