import "coffee.vpr"


method GrinderConstructor() returns (this: Ref)
    //ensures Grinder(this)
    //ensures !getHasBeans(this)
{
    this := new(hasBeans)
    this.hasBeans := false
    //fold Grinder(this)
}


method WaterTankConstructor() returns (this: Ref)
    //ensures WaterTank(this)
    //ensures getLevel(this) == 0
{
    this := new(Level)
    this.Level := 0
    //fold WaterTank(this)
}


method CoffeeMakerConstructor() returns (this: Ref)
    //ensures CoffeeMaker(this)
    //ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
    //ensures unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank) == 0
{
    this := new(CMGrinder, CMWaterTank)
    this.CMGrinder := GrinderConstructor()
    this.CMWaterTank := WaterTankConstructor()
    //fold CoffeeMaker(this)
}


method CoffeeMakerRestock(this: Ref)
    //requires CoffeeMaker(this)
    //ensures CoffeeMaker(this)
    //ensures CoffeeMakerReady(this)
    //ensures unfolding CoffeeMaker(this) in getHasBeans(this.CMGrinder)
    //ensures unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank) == 10
{
    //unfold CoffeeMaker(this)
    GrinderAddBeans(this.CMGrinder)
    WaterTankFill(this.CMWaterTank)
    //fold CoffeeMaker(this)
}

method CoffeeMakerDispense(this: Ref, double: Bool) returns (c: Ref)
    //requires CoffeeMaker(this)
    //requires CoffeeMakerReady(this)
    //ensures CoffeeMaker(this)
    //ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
    //ensures unfolding CoffeeMaker(this) in
    //   double ==> getLevel(this.CMWaterTank) == old(unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank)) - 2
    //ensures unfolding CoffeeMaker(this) in
    //    !double ==> getLevel(this.CMWaterTank) == old(unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank)) - 1
    //ensures Cup(c)
{
    //unfold CoffeeMaker(this)
    GrinderGrind(this.CMGrinder)
    if (double)
    {
        WaterTankUse(this.CMWaterTank)
        WaterTankUse(this.CMWaterTank)
    }
    else 
    {
        WaterTankUse(this.CMWaterTank)
    }
    c := CupConstructor()
    //fold CoffeeMaker(this)
}

method CoffeeMakerChangeGrinder(this: Ref)
    //requires CoffeeMaker(this)
    //ensures CoffeeMaker(this)
    //ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
{
    //unfold CoffeeMaker(this)
    this.CMGrinder := GrinderConstructor()
    //fold CoffeeMaker(this)
}

method CoffeeMakerInstallCustomGrinder(this: Ref, grinder: Ref)
    //requires CoffeeMaker(this)
    //requires Grinder(grinder)
    //ensures CoffeeMaker(this)
    //ensures unfolding CoffeeMaker(this) in old(getHasBeans(grinder)) == getHasBeans(this.CMGrinder)
{
    //unfold CoffeeMaker(this)
    this.CMGrinder := grinder
    //fold CoffeeMaker(this)
}