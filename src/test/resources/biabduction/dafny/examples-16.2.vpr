
field hasBeans: Bool

predicate Grinder(this: Ref)
{
    acc(this.hasBeans)
}

function getHasBeans(this: Ref): Bool
    requires Grinder(this)
{
    unfolding Grinder(this) in
    this.hasBeans
}

method GrinderConstructor() returns (this: Ref)
    ensures Grinder(this)
    ensures !getHasBeans(this)
{
    this := new(hasBeans)
    this.hasBeans := false
    fold Grinder(this)
}


method GrinderAddBeans(this: Ref)
    requires Grinder(this)
    ensures Grinder(this)
    ensures getHasBeans(this)

method GrinderGrind(this: Ref)
    requires Grinder(this)
    requires getHasBeans(this)
    ensures Grinder(this)
    ensures !getHasBeans(this)

field Level: Int

predicate WaterTank(this: Ref)
{
    acc(this.Level) && 0 <= this.Level
}


function getLevel(this: Ref): Int
    requires WaterTank(this)
    ensures 0 <= result
{
    unfolding WaterTank(this) in
    this.Level
}

method WaterTankConstructor() returns (this: Ref)
    ensures WaterTank(this)
    ensures getLevel(this) == 0
{
    this := new(Level)
    this.Level := 0
    fold WaterTank(this)
}


method WaterTankFill(this: Ref)
    requires WaterTank(this)
    ensures WaterTank(this)
    ensures getLevel(this) == 10

method WaterTankUse(this: Ref)
    requires WaterTank(this)
    requires getLevel(this) != 0
    ensures WaterTank(this)
    ensures getLevel(this) == old(getLevel(this)) - 1


predicate Cup(this: Ref)


method CupConstructor() returns (this: Ref)
    ensures Cup(this)


field CMGrinder: Ref
field CMWaterTank: Ref

predicate CoffeeMaker(this: Ref)
{
    acc(this.CMGrinder) && Grinder(this.CMGrinder) &&
    acc(this.CMWaterTank) && WaterTank(this.CMWaterTank)
}

function getCoffeeMakerGrinder(this: Ref): Ref
    requires CoffeeMaker(this)
{
    unfolding CoffeeMaker(this) in
    this.CMGrinder
}

function getCoffeeMakerWaterTank(this: Ref): Ref
    requires CoffeeMaker(this)
{
    unfolding CoffeeMaker(this) in
    this.CMWaterTank
}


method CoffeeMakerConstructor() returns (this: Ref)
    ensures CoffeeMaker(this)
    ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
    ensures unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank) == 0
{
    this := new(CMGrinder, CMWaterTank)
    this.CMGrinder := GrinderConstructor()
    this.CMWaterTank := WaterTankConstructor()
    fold CoffeeMaker(this)
}


function CoffeeMakerReady(this: Ref): Bool
    requires CoffeeMaker(this)
{
    unfolding CoffeeMaker(this) in
    getHasBeans(this.CMGrinder) && 2 <= getLevel(this.CMWaterTank)
}


method CoffeeMakerRestock(this: Ref)
    requires CoffeeMaker(this)
    ensures CoffeeMaker(this)
    ensures CoffeeMakerReady(this)
    ensures unfolding CoffeeMaker(this) in getHasBeans(this.CMGrinder)
    ensures unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank) == 10
{
    unfold CoffeeMaker(this)
    GrinderAddBeans(this.CMGrinder)
    WaterTankFill(this.CMWaterTank)
    fold CoffeeMaker(this)
}

method CoffeeMakerDispense(this: Ref, double: Bool) returns (c: Ref)
    requires CoffeeMaker(this)
    requires CoffeeMakerReady(this)
    ensures CoffeeMaker(this)
    ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
    ensures unfolding CoffeeMaker(this) in 
        double ==> getLevel(this.CMWaterTank) == old(unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank)) - 2
    ensures unfolding CoffeeMaker(this) in 
        !double ==> getLevel(this.CMWaterTank) == old(unfolding CoffeeMaker(this) in getLevel(this.CMWaterTank)) - 1
    ensures Cup(c)
{
    unfold CoffeeMaker(this)
    GrinderGrind(this.CMGrinder)
    if (double)
    {
        WaterTankUse(this.CMWaterTank)
        WaterTankUse(this.CMWaterTank)
    }
    else 
    {
        WaterTankUse(this.CMWaterTank)
    }
    c := CupConstructor()
    fold CoffeeMaker(this)
}

method CoffeeMakerChangeGrinder(this: Ref)
    requires CoffeeMaker(this)
    ensures CoffeeMaker(this)
    ensures unfolding CoffeeMaker(this) in !getHasBeans(this.CMGrinder)
{
    unfold CoffeeMaker(this)
    this.CMGrinder := GrinderConstructor()
    fold CoffeeMaker(this)
}

method CoffeeMakerInstallCustomGrinder(this: Ref, grinder: Ref)
    requires CoffeeMaker(this)
    requires Grinder(grinder)
    ensures CoffeeMaker(this)
    ensures unfolding CoffeeMaker(this) in old(getHasBeans(grinder)) == getHasBeans(this.CMGrinder)
{
    unfold CoffeeMaker(this)
    this.CMGrinder := grinder
    fold CoffeeMaker(this)
}