field next: Ref
field data: Int

predicate sllist(x: Ref) {
    x != null ==> acc(x.next) && acc(x.data) && sllist(x.next) && (x.next != null ==> unfolding sllist(x.next) in x.data <= x.next.data)
}

method sls_double_all(lst: Ref) returns (res: Ref)
requires sllist(lst)
requires lst != null
ensures sllist(lst)
{
    var x: Ref := lst
    var bound: Int := unfolding sllist(x) in x.data

    package (sllist(x) && (x != null ==> unfolding sllist(x) in bound <= x.data)) --* sllist(lst)

    while(x != null)
    invariant sllist(x)
    invariant x != null ==> unfolding sllist(x) in bound <= x.data
    invariant (sllist(x) && (x != null ==> unfolding sllist(x) in bound <= x.data)) --* sllist(lst)
    {
        var x_old: Ref := x
        var old_bound: Int := bound
        unfold sllist(x)
        bound := x.data
        x := x.next
        package (sllist(x) && (x != null ==> unfolding sllist(x) in bound <= x.data)) --* sllist(lst) {
            fold sllist(x_old)
            apply (sllist(x_old) && (x_old != null ==> unfolding sllist(x_old) in old_bound <= x_old.data)) --* sllist(lst)
        }
    }
    apply (sllist(x) && (x != null ==> unfolding sllist(x) in bound <= x.data)) --* sllist(lst)
}