field next: Ref

predicate list(x: Ref){
    x != null ==> acc(x.next) && list(x.next)
}

method test(this: Ref)
//requires list(this)
//ensures list(this)
{
    var x: Ref := this
    //package list(x) --* list(this)
    //unfold list(x)

    while(x != null)
    //invariant x != null ==> acc(x.next)
    //invariant x != null ==> list(x.next)
    //invariant list(x) --* list(this)
    {
        var xo: Ref := x
        x := x.next
        //unfold list(x)
        if(x != null){
            //unfold list(x)
            var tmp: Ref := x.next
            //fold list(x)
        }

        //package acc(list(x), write) --* acc(list(this), write) {
        //   fold acc(list(xo), write)
        //    apply acc(list(xo), write) --* acc(list(this), write)
       // }
    }
    //apply list(x) --* list(this)
}
