domain $Map[U, V]  {
  
  function Map_keys(m: $Map[U, V]): Set[U] 
  
  function Map_card(m: $Map[U, V]): Int 
  
  function Map_lookup(m: $Map[U, V], u: U): V 
  
  function Map_values(m: $Map[U, V]): Set[V] 
  
  function Map_empty(): $Map[U, V] 
  
  function Map_build(m: $Map[U, V], u: U, v: V): $Map[U, V] 
  
  function Map_equal(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_disjoint(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_union(m1: $Map[U, V], m2: $Map[U, V]): $Map[U, V] 
  
  axiom Map_card_non_neg {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      0 <= (Map_card(m): Int))
  }
  
  axiom Map_card_domain {
    (forall m: $Map[U, V] ::
      { |(Map_keys(m): Set[U])| }
      |(Map_keys(m): Set[U])| == (Map_card(m): Int))
  }
  
  axiom Map_values_def {
    (forall m: $Map[U, V], v: V ::
      { (v in (Map_values(m): Set[V])) }
      (v in (Map_values(m): Set[V])) ==
      (exists u: U :: (u in (Map_keys(m): Set[U])) &&
        v == (Map_lookup(m, u): V)))
  }
  
  axiom Map_empty_1 {
    (forall u: U ::
      { (u in (Map_keys((Map_empty(): $Map[U, V])): Set[U])) }
      !((u in (Map_keys((Map_empty(): $Map[U, V])): Set[U]))))
  }
  
  axiom Map_empty_2 {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      ((Map_card(m): Int) == 0) == (m == (Map_empty(): $Map[U, V])) &&
      ((Map_card(m): Int) != 0 ==>
      (exists u: U :: (u in (Map_keys(m): Set[U])))))
  }
  
  axiom Map_build_1 {
    (forall m: $Map[U, V], u1: U, u2: U, v: V ::
      { (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) }
      (u2 == u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u1): V) == v) &&
      (u2 != u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) ==
      (u2 in (Map_keys(m): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u2): V) ==
      (Map_lookup(m, u2): V)))
  }
  
  axiom Map_build_2 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      (u in (Map_keys(m): Set[U])) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int))
  }
  
  axiom Map_build_3 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      !((u in (Map_keys(m): Set[U]))) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int) + 1)
  }
  
  axiom Map_equality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        (u in (Map_keys(m1): Set[U])) == (u in (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_extensionality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_disjoint(m1, m2): Bool) }
      (Map_disjoint(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        !((u in (Map_keys(m1): Set[U]))) ||
        !((u in (Map_keys(m2): Set[U])))))
  }
  
  axiom Map_union_1 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) }
      { (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))) }
      (Map_disjoint(m1, m2): Bool) ==>
      (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) ==
      (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_union_2 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m1): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m1, u): V))
  }
  
  axiom Map_union_3 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m2): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m2, u): V))
  }
}

domain trigger_functions  {
  
  function Counter_CONT_T($r: Ref, n: Int): Bool 
  
  function Counter_AUTH_T($r: Ref, n: Int): Bool 
  
  function Counter_state_T(r: Ref, lvl: Int, x: Ref): Bool 
  
  function Join_state_T(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int, x: Ref): Bool 
  
  function LevelDummy_state_T(r: Ref, lvl: Int): Bool 
  
  axiom Counter_CONT_T_bottom {
    (forall $r: Ref, n: Int ::
      { Counter_CONT_T($r, n) }
      Counter_CONT_T($r, n))
  }
  
  axiom Counter_AUTH_T_bottom {
    (forall $r: Ref, n: Int ::
      { Counter_AUTH_T($r, n) }
      Counter_AUTH_T($r, n))
  }
}

domain interferenceReference_Domain  {
  
  function Counter_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool 
  
  function Join_interferenceReference_df($p0: Int, s: Ref, alvl: Int, y: Ref,
  r: Ref, lvl: Int, x: Ref): Bool 
  
  function LevelDummy_interferenceReference_df($p0: Int, r: Ref, lvl: Int): Bool 
}

domain interferenceSet_Domain  {
  
  function Counter_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int] 
  
  function Join_interferenceSet_df($p0: Int, s: Ref, alvl: Int, y: Ref, r: Ref,
  lvl: Int, x: Ref): Set[Int] 
  
  function LevelDummy_interferenceSet_df($p0: Int, r: Ref, lvl: Int): Set[Int] 
}

domain atomicity_context_Domain  {
  
  function Counter_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool 
  
  function Join_atomicity_context_df(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int,
  x: Ref): Bool 
  
  function LevelDummy_atomicity_context_df(r: Ref, lvl: Int): Bool 
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $fjcell_$value: Int

field $fjcell_$_payload: Bool

field $cell_$value: Int

function IntSet(): Set[Int]
  ensures (forall n: Int ::(n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int ::0 <= n == (n in result))


function Counter_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_atomicity_context_fp(r, lvl, x), write)
  ensures [Counter_atomicity_context_df(r, lvl, x), true]


function Counter_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Counter_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==>
      ($_m in Counter_interferenceSet_df($p0, r, lvl, x))),
    true]


function Counter_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_interferenceContext_fp(r, lvl, x), write)
  ensures [Counter_interferenceReference_df($p0, r, lvl, x), true]


function Counter_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter_sk_fp(), write)


function Counter_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Counter(r, lvl, x), write)
  ensures [Counter_state_T(r, lvl, x), true]
{
  (unfolding acc(Counter(r, lvl, x), write) in x.$cell_$value)
}

function Join_atomicity_context_hf(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int,
  x: Ref): Set[Int]
  requires acc(Join_atomicity_context_fp(s, alvl, y, r, lvl, x), write)
  ensures [Join_atomicity_context_df(s, alvl, y, r, lvl, x), true]


function Join_interferenceSet_hf($p0: Int, s: Ref, alvl: Int, y: Ref, r: Ref,
  lvl: Int, x: Ref): Set[Int]
  requires acc(Join_interferenceContext_fp(s, alvl, y, r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==>
      ($_m in Join_interferenceSet_df($p0, s, alvl, y, r, lvl, x))),
    true]


function Join_interferenceReference_hf($p0: Int, s: Ref, alvl: Int, y: Ref,
  r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join_interferenceContext_fp(s, alvl, y, r, lvl, x), write)
  ensures [Join_interferenceReference_df($p0, s, alvl, y, r, lvl, x), true]


function Join_state(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join(s, alvl, y, r, lvl, x), write)
  ensures [Join_state_T(s, alvl, y, r, lvl, x), true]
{
  (unfolding acc(Join(s, alvl, y, r, lvl, x), write) in y.$fjcell_$value)
}

function LevelDummy_atomicity_context_hf(r: Ref, lvl: Int): Set[Int]
  requires acc(LevelDummy_atomicity_context_fp(r, lvl), write)
  ensures [LevelDummy_atomicity_context_df(r, lvl), true]


function LevelDummy_interferenceSet_hf($p0: Int, r: Ref, lvl: Int): Set[Int]
  requires acc(LevelDummy_interferenceContext_fp(r, lvl), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==>
      ($_m in LevelDummy_interferenceSet_df($p0, r, lvl))),
    true]


function LevelDummy_interferenceReference_hf($p0: Int, r: Ref, lvl: Int): Int
  requires acc(LevelDummy_interferenceContext_fp(r, lvl), write)
  ensures [LevelDummy_interferenceReference_df($p0, r, lvl), true]


function LevelDummy_state(r: Ref, lvl: Int): Int
  requires acc(LevelDummy(r, lvl), write)
  ensures [LevelDummy_state_T(r, lvl), true]
{
  (unfolding acc(LevelDummy(r, lvl), write) in 0)
}

predicate Counter_INCR($r: Ref) 

predicate Counter_CONT($r: Ref, n: Int) 

predicate Counter_AUTH($r: Ref, n: Int) 

predicate Counter_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Counter_sk_fp() 

predicate Counter(r: Ref, lvl: Int, x: Ref) {
  acc(x.$cell_$value, write) && true && 0 <= x.$cell_$value &&
  (Counter_CONT_T(r, 0 - 1 - x.$cell_$value) &&
  acc(Counter_CONT(r, 0 - 1 - x.$cell_$value), write)) &&
  (Counter_AUTH_T(r, x.$cell_$value) &&
  acc(Counter_AUTH(r, x.$cell_$value), write))
}

predicate Join_SET($r: Ref) 

predicate Join_JOIN($r: Ref) 

predicate Join_atomicity_context_fp(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int,
  x: Ref) 

predicate Join_interferenceContext_fp(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int,
  x: Ref) 

predicate Join_sk_fp() 

predicate Join(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int, x: Ref) {
  acc(y.$fjcell_$value, write) && true &&
  (y.$fjcell_$value == 0 || y.$fjcell_$value == 1) &&
  (acc(y.$fjcell_$_payload, write) && true) &&
  (y.$fjcell_$value == 1 ?
    (y.$fjcell_$_payload ?
      acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl &&
      (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
      acc(Counter_INCR(r), 1 / 2) :
      acc(Join_JOIN(s), write)) :
    true)
}

predicate LevelDummy_LevelDummyG($r: Ref) 

predicate LevelDummy_atomicity_context_fp(r: Ref, lvl: Int) 

predicate LevelDummy_interferenceContext_fp(r: Ref, lvl: Int) 

predicate LevelDummy_sk_fp() 

predicate LevelDummy(r: Ref, lvl: Int) {
  true
}

method havoc_Bool() returns ($r: Bool)


method havoc_Ref() returns ($r: Ref)


method havoc_Int() returns ($r: Int)


method havoc_Perm() returns ($r: Perm)


method ___silicon_hack407_havoc_all_Counter()


method ___silicon_hack407_havoc_all_Counter_interferenceContext_fp()


method ___silicon_hack407_havoc_all_Join()


method ___silicon_hack407_havoc_all_Join_interferenceContext_fp()


method ___silicon_hack407_havoc_all_LevelDummy()


method ___silicon_hack407_havoc_all_LevelDummy_interferenceContext_fp()


method CAS(x: Ref, now: Int, thn: Int) returns (ret: Bool)
  requires acc(x.$cell_$value, write) && true
  ensures (old(x.$cell_$value) == now ?
      ret && (acc(x.$cell_$value, write) && x.$cell_$value == thn) :
      !ret &&
      (acc(x.$cell_$value, write) && x.$cell_$value == old(x.$cell_$value)))


method thread_incr(r: Ref, lvl: Int, x: Ref, s: Ref, alvl: Int, y: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
  ensures true
{
  var $_levelVar_1: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl && $_levelVar_1 > alvl
  assert $_levelVar_1 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- call:incr BEGIN ---------
  
  assert true
  label pre_call0
  assert $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:incr@19.3) BEGIN 
  
  label pre_stabilize0
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize0](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize0](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize0](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize0](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize0](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize0](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:incr@19.3) END 
  
  inhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
  
  // ------- call:incr END -----------
  
  
  // ------- call:set_to_one BEGIN ---
  
  assert true
  label pre_call
  assert $_levelVar_1 >= 0 && $_levelVar_1 > lvl && $_levelVar_1 > alvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:set_to_one@20.3) BEGIN 
  
  label pre_stabilize
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:set_to_one@20.3) END 
  
  inhale acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 1)
  
  // ------- call:set_to_one END -----
  
}

method parallel_incr(lvl: Int, alvl: Int, dummy: Ref)
  returns (r: Ref, x: Ref)
  requires acc(LevelDummy(dummy, alvl), write) && (alvl >= 0 && true) &&
    (alvl > lvl && lvl >= 0)
  ensures acc(Counter(r, lvl, x), write) &&
    (lvl >= 0 && Counter_state(r, lvl, x) == 2) &&
    (Counter_CONT_T(r, 2) && acc(Counter_CONT(r, 2), write)) &&
    (Counter_AUTH_T(r, 0 - 1 - 2) && acc(Counter_AUTH(r, 0 - 1 - 2), write)) &&
    acc(Counter_INCR(r), write)
{
  var y1: Ref
  var y2: Ref
  var s1: Ref
  var s2: Ref
  var s1_lvl: Int
  var s2_lvl: Int
  var n: Int
  var $_levelVar_2: Int
  inhale $_levelVar_2 >= 0 && $_levelVar_2 > alvl
  assert $_levelVar_2 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- assume BEGIN ------------
  
  inhale s1_lvl == alvl && s2_lvl == alvl
  
  // ------- assume END --------------
  
  
  // ------- call:makeCounter BEGIN --
  
  assert true
  label pre_call2
  assert $_levelVar_2 >= 0
  assert true
  exhale lvl >= 0
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:makeCounter@33.3) BEGIN 
  
  label pre_stabilize2
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize2](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize2](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize2](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize2](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize2](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize2](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:makeCounter@33.3) END 
  
  r := havoc_Ref()
  x := havoc_Ref()
  inhale acc(Counter(r, lvl, x), write) &&
    (lvl >= 0 && Counter_state(r, lvl, x) == 0) &&
    acc(Counter_INCR(r), write) &&
    (Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write))
  
  // ------- call:makeCounter END ----
  
  
  // ------- assert BEGIN ------------
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true)
  
  // ------- assert END --------------
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (acc(Counter(r, lvl, x), write) && (lvl >= 0 && true)) &&
    (acc(Counter(r, lvl, x), write) && (lvl >= 0 && true)) &&
    (acc(Counter(r, lvl, x), write) && (lvl >= 0 && true))
  
  // ------- inhale END --------------
  
  
  // ------- apply BEGIN -------------
  
  AUTH_split(r, 0 - 1 - 1, 1)
  
  // ------- apply END ---------------
  
  
  // ------- apply BEGIN -------------
  
  AUTH_split(r, 0 - 1 - 2, 1)
  
  // ------- apply END ---------------
  
  
  // ------- call:make_join BEGIN ----
  
  assert true
  label pre_call3
  assert $_levelVar_2 >= 0 && $_levelVar_2 > lvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    lvl < s1_lvl
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:make_join@42.3) BEGIN 
  
  label pre_stabilize3
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize3](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize3](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize3](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize3](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize3](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize3](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:make_join@42.3) END 
  
  s1 := havoc_Ref()
  y1 := havoc_Ref()
  inhale acc(Join(s1, s1_lvl, y1, r, lvl, x), write) &&
    (s1_lvl >= 0 && Join_state(s1, s1_lvl, y1, r, lvl, x) == 0) &&
    acc(Join_SET(s1), write) &&
    acc(Join_JOIN(s1), write) &&
    s1_lvl > lvl
  
  // ------- call:make_join END ------
  
  
  // ------- call:make_join BEGIN ----
  
  assert true
  label pre_call4
  assert $_levelVar_2 >= 0 && $_levelVar_2 > lvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    lvl < s2_lvl
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:make_join@43.3) BEGIN 
  
  label pre_stabilize4
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize4](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize4](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize4](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize4](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize4](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize4](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:make_join@43.3) END 
  
  s2 := havoc_Ref()
  y2 := havoc_Ref()
  inhale acc(Join(s2, s2_lvl, y2, r, lvl, x), write) &&
    (s2_lvl >= 0 && Join_state(s2, s2_lvl, y2, r, lvl, x) == 0) &&
    acc(Join_SET(s2), write) &&
    acc(Join_JOIN(s2), write) &&
    s2_lvl > lvl
  
  // ------- call:make_join END ------
  
  
  // ------- assert BEGIN ------------
  
  assert acc(Join(s1, s1_lvl, y1, r, lvl, x), write) &&
    (s1_lvl >= 0 && true) &&
    (acc(Join(s2, s2_lvl, y2, r, lvl, x), write) && (s2_lvl >= 0 && true))
  
  // ------- assert END --------------
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(Join(s1, s1_lvl, y1, r, lvl, x), write) &&
    (s1_lvl >= 0 && true) &&
    (acc(Join(s2, s2_lvl, y2, r, lvl, x), write) && (s2_lvl >= 0 && true))
  
  // ------- inhale END --------------
  
  
  // ------- exhale BEGIN ------------
  
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s1, s1_lvl, y1, r, lvl, x), write) &&
    (s1_lvl >= 0 && Join_state(s1, s1_lvl, y1, r, lvl, x) == 0)) &&
    acc(Join_SET(s1), write) &&
    lvl < s1_lvl
  
  // ------- exhale END --------------
  
  
  // ------- exhale BEGIN ------------
  
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s2, s2_lvl, y2, r, lvl, x), write) &&
    (s2_lvl >= 0 && Join_state(s2, s2_lvl, y2, r, lvl, x) == 0)) &&
    acc(Join_SET(s2), write) &&
    lvl < s2_lvl
  
  // ------- exhale END --------------
  
  
  // ------- call:wait BEGIN ---------
  
  assert true
  label pre_call5
  assert $_levelVar_2 >= 0 && $_levelVar_2 > lvl && $_levelVar_2 > s1_lvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_JOIN(s1), write) &&
    (acc(Join(s1, s1_lvl, y1, r, lvl, x), write) && (s1_lvl >= 0 && true))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:wait@54.3) BEGIN 
  
  label pre_stabilize5
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize5](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize5](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize5](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize5](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize5](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize5](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize5](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize5](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:wait@54.3) END 
  
  inhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s1, s1_lvl, y1, r, lvl, x), write) &&
    (s1_lvl >= 0 && Join_state(s1, s1_lvl, y1, r, lvl, x) == 1))
  
  // ------- call:wait END -----------
  
  
  // ------- call:wait BEGIN ---------
  
  assert true
  label pre_call6
  assert $_levelVar_2 >= 0 && $_levelVar_2 > lvl && $_levelVar_2 > s2_lvl
  assert true
  exhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_JOIN(s2), write) &&
    (acc(Join(s2, s2_lvl, y2, r, lvl, x), write) && (s2_lvl >= 0 && true))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:wait@55.3) BEGIN 
  
  label pre_stabilize6
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize6](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize6](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize6](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize6](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize6](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize6](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (within call:wait@55.3) END 
  
  inhale acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s2, s2_lvl, y2, r, lvl, x), write) &&
    (s2_lvl >= 0 && Join_state(s2, s2_lvl, y2, r, lvl, x) == 1))
  
  // ------- call:wait END -----------
  
  
  // ------- apply BEGIN -------------
  
  CONT_join(r, 1, 1)
  
  // ------- apply END ---------------
  
  
  // ------- unfold BEGIN ------------
  
  n := Counter_state(r, lvl, x)
  assert lvl >= 0 && true
  unfold acc(Counter(r, lvl, x), write)
  
  // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) BEGIN 
  
  label pre_infer0
  
  // Inferring interference all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(1, $r, $lvl, $x)) }
        none < old[pre_infer0](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(1, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_infer0](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_infer0](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_infer0](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(1, $r, $lvl, $x) ==
      old[pre_infer0](Counter_state($r, $lvl, $x)))
  
  // Inferring interference all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(1, $s, $alvl, $y, $r, $lvl, $x)) }
        none < old[pre_infer0](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(1, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m == old[pre_infer0](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_infer0](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_infer0](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(1, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_infer0](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Inferring interference all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(1, $r, $lvl)) }
        none < old[pre_infer0](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(1, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_infer0](LevelDummy_state($r, $lvl)) || false))))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_infer0](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(1, $r, $lvl) ==
      old[pre_infer0](LevelDummy_state($r, $lvl)))
  
  // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) END 
  
  
  // ------- unfold END --------------
  
  
  // ------- apply BEGIN -------------
  
  CONT_max1(r, 2, n)
  
  // ------- apply END ---------------
  
  
  // ------- apply BEGIN -------------
  
  AUTH_max1(r, n, 2)
  
  // ------- apply END ---------------
  
  
  // ------- fold BEGIN --------------
  
  fold acc(Counter(r, lvl, x), write)
  assert lvl >= 0 && Counter_state(r, lvl, x) == 2
  
  // ------- fold END ----------------
  
  
  // skip;
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after skip@68.3) BEGIN 
  
  label pre_stabilize7
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(2, $r, $lvl, $x)) }
        none < old[pre_stabilize7](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(2, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize7](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize7](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(2, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(2, $r, $lvl, $x) ==
      old[pre_stabilize7](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(2, $s, $alvl, $y, $r, $lvl, $x)) }
        none < old[pre_stabilize7](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(2, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize7](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize7](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(2, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(2, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize7](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(2, $r, $lvl)) }
        none < old[pre_stabilize7](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(2, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize7](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize7](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(2, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize7](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(2, $r, $lvl) ==
      old[pre_stabilize7](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after skip@68.3) END 
  
}

method CONT_split(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n + m) && acc(Counter_CONT(r, n + m), write)
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
  ensures Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, m) && acc(Counter_CONT(r, m), write))
{
  var $_levelVar_3: Int
  inhale $_levelVar_3 >= 0
  assert $_levelVar_3 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method CONT_join(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, m) && acc(Counter_CONT(r, m), write))
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
  ensures Counter_CONT_T(r, n + m) && acc(Counter_CONT(r, n + m), write)
{
  var $_levelVar_4: Int
  inhale $_levelVar_4 >= 0
  assert $_levelVar_4 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method CONT_false1(r: Ref, n: Int)
  requires Counter_CONT_T(r, 0 - 1) && acc(Counter_CONT(r, 0 - 1), write) &&
    (Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write)) &&
    0 < n
  ensures false
{
  var $_levelVar_5: Int
  inhale $_levelVar_5 >= 0
  assert $_levelVar_5 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method CONT_max1(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, 0 - 1 - m) && acc(Counter_CONT(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
  ensures Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, 0 - 1 - m) && acc(Counter_CONT(r, 0 - 1 - m), write))
  ensures n <= m
{
  var $_levelVar_6: Int
  inhale $_levelVar_6 >= 0
  assert $_levelVar_6 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method AUTH_split(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n + m) && acc(Counter_AUTH(r, n + m), write)
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
  ensures Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, m) && acc(Counter_AUTH(r, m), write))
{
  var $_levelVar_7: Int
  inhale $_levelVar_7 >= 0
  assert $_levelVar_7 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method AUTH_join(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, m) && acc(Counter_AUTH(r, m), write))
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
  ensures Counter_AUTH_T(r, n + m) && acc(Counter_AUTH(r, n + m), write)
{
  var $_levelVar_8: Int
  inhale $_levelVar_8 >= 0
  assert $_levelVar_8 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method AUTH_false1(r: Ref, n: Int)
  requires Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write) &&
    (Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write)) &&
    0 < n
  ensures false
{
  var $_levelVar_9: Int
  inhale $_levelVar_9 >= 0
  assert $_levelVar_9 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method AUTH_max1(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, 0 - 1 - m) && acc(Counter_AUTH(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
  ensures Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, 0 - 1 - m) && acc(Counter_AUTH(r, 0 - 1 - m), write))
  ensures n <= m
{
  var $_levelVar_10: Int
  inhale $_levelVar_10 >= 0
  assert $_levelVar_10 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale false
}

method makeCounter(lvl: Int) returns (r: Ref, x: Ref)
  requires lvl >= 0
  ensures acc(Counter(r, lvl, x), write) &&
    (lvl >= 0 && Counter_state(r, lvl, x) == 0) &&
    acc(Counter_INCR(r), write) &&
    (Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write))
{
  var $_levelVar_11: Int
  inhale $_levelVar_11 >= 0
  assert $_levelVar_11 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- inhale BEGIN ------------
  
  inhale acc(x.$cell_$value, write) && true
  
  // ------- inhale END --------------
  
  
  // ------- heap-write BEGIN --------
  
  x.$cell_$value := 0
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after heap-write@141.3) BEGIN 
  
  label pre_stabilize8
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(3, $r, $lvl, $x)) }
        none < old[pre_stabilize8](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(3, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize8](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize8](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(3, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(3, $r, $lvl, $x) ==
      old[pre_stabilize8](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(3, $s, $alvl, $y, $r, $lvl, $x)) }
        none < old[pre_stabilize8](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(3, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize8](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize8](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(3, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(3, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize8](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(3, $r, $lvl)) }
        none < old[pre_stabilize8](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(3, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize8](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize8](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(3, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize8](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(3, $r, $lvl) ==
      old[pre_stabilize8](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after heap-write@141.3) END 
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(Counter_INCR(r), write) &&
    (Counter_CONT_T(r, 0 - 1) && acc(Counter_CONT(r, 0 - 1), write)) &&
    (Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write))
  
  // ------- inhale END --------------
  
  
  // ------- apply BEGIN -------------
  
  AUTH_split(r, 0 - 1, 0)
  
  // ------- apply END ---------------
  
  
  // ------- fold BEGIN --------------
  
  fold acc(Counter(r, lvl, x), write)
  assert lvl >= 0 && true
  
  // ------- fold END ----------------
  
}

method incr(r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
  ensures acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
{
  var b: Bool
  var v: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  var $_levelVar_14: Int
  var $_levelVar_15: Int
  var $_levelVar_16: Int
  var $_levelVar_17: Int
  var $_levelVar_18: Int
  var $_levelVar_19: Int
  var $_levelVar_20: Int
  var $_levelVar_21: Int
  var $_levelVar_22: Int
  var $_levelVar_23: Int
  inhale $_levelVar_12 >= 0 && $_levelVar_12 > lvl
  assert $_levelVar_12 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  assert acc(Counter(r, lvl, x), write)
  
  // ------- Stabilising regions Counter (infer context for open-region) BEGIN 
  
  label pre_stabilize9
  
  // Stabilising single instance of region Counter
  quasihavoc Counter_interferenceContext_fp(r, lvl, x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Counter_interferenceSet_df(4, r, lvl, x)) }
      ($$_m in Counter_interferenceSet_hf(4, r, lvl, x)) ==
      ((none < perm(r.$diamond) &&
      none < perm(Counter_atomicity_context_fp(r, lvl, x)) ==>
      ($$_m in Counter_atomicity_context_hf(r, lvl, x))) &&
      ($$_m == old[pre_stabilize9](Counter_state(r, lvl, x)) ||
      Counter_sk_$_action_n(r, lvl, x) ==
      old[pre_stabilize9](Counter_state(r, lvl, x)) &&
      Counter_sk_$_action_m(r, lvl, x) == $$_m &&
      true &&
      perm(Counter_INCR(r)) <= write - 1 / 2)))
  quasihavoc Counter(r, lvl, x)
  inhale (Counter_state(r, lvl, x) in
    Counter_interferenceSet_hf(4, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Counter_interferenceReference_hf(4, r, lvl, x) ==
    old[pre_stabilize9](Counter_state(r, lvl, x))
  
  // ------- Stabilising regions Counter (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region0
  assert $_levelVar_12 > lvl
  $_levelVar_13 := lvl
  unfold acc(Counter(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- heap-read BEGIN ---------
  
  v := x.$cell_$value
  
  // ------- heap-read END -----------
  
  fold acc(Counter(r, lvl, x), write)
  assert Counter_state(r, lvl, x) ==
    old[pre_open_region0](Counter_state(r, lvl, x))
  $_levelVar_14 := $_levelVar_12
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@160.5) BEGIN 
  
  label pre_stabilize10
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(5, $r, $lvl, $x)) }
        none < old[pre_stabilize10](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(5, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize10](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize10](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(5, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(5, $r, $lvl, $x) ==
      old[pre_stabilize10](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(5, $s, $alvl, $y, $r, $lvl, $x)) }
        none <
        old[pre_stabilize10](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(5, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize10](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize10](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(5, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(5, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize10](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(5, $r, $lvl)) }
        none < old[pre_stabilize10](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(5, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize10](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize10](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(5, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize10](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(5, $r, $lvl) ==
      old[pre_stabilize10](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@160.5) END 
  
  
  // ------- use-atomic BEGIN --------
  
  label pre_use_atomic0
  assert perm(Counter_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_14 > lvl
  $_levelVar_15 := lvl
  exhale acc(Counter_INCR(r), 1 / 2)
  unfold acc(Counter(r, lvl, x), write)
  
  // no interference context translation needed
  
  inhale acc(Counter_INCR(r), 1 / 2)
  exhale acc(Counter(r, lvl, x), perm(Counter(r, lvl, x)))
  
  // ------- call:CAS BEGIN ----------
  
  assert true
  label pre_call7
  assert $_levelVar_15 >= 0
  assert true
  exhale acc(x.$cell_$value, write) && true
  b := havoc_Bool()
  inhale (old[pre_call7](x.$cell_$value) == v ?
      b && (acc(x.$cell_$value, write) && x.$cell_$value == v + 1) :
      !b &&
      (acc(x.$cell_$value, write) &&
      x.$cell_$value == old[pre_call7](x.$cell_$value)))
  
  // ------- call:CAS END ------------
  
  
  // ------- if-then-else BEGIN ------
  
  if (b) {
    
    // ------- apply BEGIN -------------
    
    AUTH_join(r, v, 1)
    
    // ------- apply END ---------------
    
    
    // ------- apply BEGIN -------------
    
    CONT_split(r, 0 - 1 - (v + 1), 1)
    
    // ------- apply END ---------------
    
    assert $_levelVar_15 == $_levelVar_15
  }
  $_levelVar_16 := $_levelVar_15
  
  // ------- if-then-else END --------
  
  fold acc(Counter(r, lvl, x), write)
  assert old[pre_use_atomic0](Counter_state(r, lvl, x)) ==
    Counter_state(r, lvl, x) ||
    1 / 2 <= 1 / 2
  $_levelVar_17 := $_levelVar_14
  
  // ------- use-atomic END ----------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@166.5) BEGIN 
  
  label pre_stabilize11
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(6, $r, $lvl, $x)) }
        none < old[pre_stabilize11](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(6, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize11](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize11](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(6, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(6, $r, $lvl, $x) ==
      old[pre_stabilize11](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(6, $s, $alvl, $y, $r, $lvl, $x)) }
        none <
        old[pre_stabilize11](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(6, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize11](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize11](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(6, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(6, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize11](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(6, $r, $lvl)) }
        none < old[pre_stabilize11](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(6, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize11](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize11](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(6, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize11](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(6, $r, $lvl) ==
      old[pre_stabilize11](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@166.5) END 
  
  
  // ------- while BEGIN -------------
  
  label preWhile0
  while (!b)
    invariant acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
      acc(Counter_INCR(r), 1 / 2)
    invariant (!b ?
        Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write) :
        Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) 
  {
    inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
      acc(LevelDummy_sk_fp(), write)
    
    // no init required
    
    
    // no init required
    
    
    // no init required
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
        $lvl, $x), write))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
        $alvl, $y, $r, $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
        $lvl), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_atomicity_context_fp($r,
        $lvl, $x), old[preWhile0](perm(Counter_atomicity_context_fp($r, $lvl,
        $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::
        { Counter_atomicity_context_df($r, $lvl, $x) }
        none <
        old[preWhile0](perm(Counter_atomicity_context_fp($r, $lvl, $x))) ==>
        Counter_atomicity_context_hf($r, $lvl, $x) ==
        old[preWhile0](Counter_atomicity_context_hf($r, $lvl, $x)))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_atomicity_context_fp($s,
        $alvl, $y, $r, $lvl, $x), old[preWhile0](perm(Join_atomicity_context_fp($s,
        $alvl, $y, $r, $lvl, $x)))))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::
        { Join_atomicity_context_df($s, $alvl, $y, $r, $lvl, $x) }
        none <
        old[preWhile0](perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl,
        $x))) ==>
        Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x) ==
        old[preWhile0](Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x)))
    inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_atomicity_context_fp($r,
        $lvl), old[preWhile0](perm(LevelDummy_atomicity_context_fp($r, $lvl)))))
    inhale (forall $r: Ref, $lvl: Int ::
        { LevelDummy_atomicity_context_df($r, $lvl) }
        none <
        old[preWhile0](perm(LevelDummy_atomicity_context_fp($r, $lvl))) ==>
        LevelDummy_atomicity_context_hf($r, $lvl) ==
        old[preWhile0](LevelDummy_atomicity_context_hf($r, $lvl)))
    assert acc(Counter(r, lvl, x), write)
    
    // ------- Stabilising regions Counter (infer context for open-region) BEGIN 
    
    label pre_stabilize12
    
    // Stabilising single instance of region Counter
    quasihavoc Counter_interferenceContext_fp(r, lvl, x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(7, r, lvl, x)) }
        ($$_m in Counter_interferenceSet_hf(7, r, lvl, x)) ==
        ((none < perm(r.$diamond) &&
        none < perm(Counter_atomicity_context_fp(r, lvl, x)) ==>
        ($$_m in Counter_atomicity_context_hf(r, lvl, x))) &&
        ($$_m == old[pre_stabilize12](Counter_state(r, lvl, x)) ||
        Counter_sk_$_action_n(r, lvl, x) ==
        old[pre_stabilize12](Counter_state(r, lvl, x)) &&
        Counter_sk_$_action_m(r, lvl, x) == $$_m &&
        true &&
        perm(Counter_INCR(r)) <= write - 1 / 2)))
    quasihavoc Counter(r, lvl, x)
    inhale (Counter_state(r, lvl, x) in
      Counter_interferenceSet_hf(7, r, lvl, x))
    
    // havoc performed by other front resource
    
    inhale Counter_interferenceReference_hf(7, r, lvl, x) ==
      old[pre_stabilize12](Counter_state(r, lvl, x))
    
    // ------- Stabilising regions Counter (infer context for open-region) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region
    assert $_levelVar_17 > lvl
    $_levelVar_18 := lvl
    unfold acc(Counter(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    // ------- heap-read BEGIN ---------
    
    v := x.$cell_$value
    
    // ------- heap-read END -----------
    
    fold acc(Counter(r, lvl, x), write)
    assert Counter_state(r, lvl, x) ==
      old[pre_open_region](Counter_state(r, lvl, x))
    $_levelVar_19 := $_levelVar_17
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@160.5) BEGIN 
    
    label pre_stabilize13
    
    // Stabilising all instances of region Counter
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Counter_interferenceSet_df(8, $r, $lvl, $x)) }
          none < old[pre_stabilize13](perm(Counter($r, $lvl, $x))) ==>
          ($$_m in Counter_interferenceSet_hf(8, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize13](Counter_state($r, $lvl, $x)) ||
          Counter_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize13](Counter_state($r, $lvl, $x)) &&
          Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
          true &&
          perm(Counter_INCR($r)) <= write - 1 / 2))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize13](perm(Counter($r, $lvl, $x))) ==>
        (Counter_state($r, $lvl, $x) in
        Counter_interferenceSet_hf(8, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize13](perm(Counter($r, $lvl, $x))) ==>
        Counter_interferenceReference_hf(8, $r, $lvl, $x) ==
        old[pre_stabilize13](Counter_state($r, $lvl, $x)))
    
    // Stabilising all instances of region Join
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in
          Join_interferenceSet_df(8, $s, $alvl, $y, $r, $lvl, $x)) }
          none <
          old[pre_stabilize13](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          ($$_m in Join_interferenceSet_hf(8, $s, $alvl, $y, $r, $lvl, $x)) ==
          ((none < perm($s.$diamond) &&
          none <
          perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
          ($$_m ==
          old[pre_stabilize13](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
          0 ==
          old[pre_stabilize13](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
          1 == $$_m &&
          true &&
          perm(Join_SET($s)) == none))))
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize13](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        (Join_state($s, $alvl, $y, $r, $lvl, $x) in
        Join_interferenceSet_hf(8, $s, $alvl, $y, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize13](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        Join_interferenceReference_hf(8, $s, $alvl, $y, $r, $lvl, $x) ==
        old[pre_stabilize13](Join_state($s, $alvl, $y, $r, $lvl, $x)))
    
    // Stabilising all instances of region LevelDummy
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
    $$lvl)
    exhale acc(LevelDummy_sk_fp(), write)
    inhale acc(LevelDummy_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
          { ($$_m in LevelDummy_interferenceSet_df(8, $r, $lvl)) }
          none < old[pre_stabilize13](perm(LevelDummy($r, $lvl))) ==>
          ($$_m in LevelDummy_interferenceSet_hf(8, $r, $lvl)) ==
          ((none < perm($r.$diamond) &&
          none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
          ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
          ($$_m == old[pre_stabilize13](LevelDummy_state($r, $lvl)) ||
          false))))
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize13](perm(LevelDummy($r, $lvl))) ==>
        (LevelDummy_state($r, $lvl) in
        LevelDummy_interferenceSet_hf(8, $r, $lvl)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize13](perm(LevelDummy($r, $lvl))) ==>
        LevelDummy_interferenceReference_hf(8, $r, $lvl) ==
        old[pre_stabilize13](LevelDummy_state($r, $lvl)))
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@160.5) END 
    
    
    // ------- use-atomic BEGIN --------
    
    label pre_use_atomic
    assert perm(Counter_atomicity_context_fp(r, lvl, x)) == none
    assert $_levelVar_19 > lvl
    $_levelVar_20 := lvl
    exhale acc(Counter_INCR(r), 1 / 2)
    unfold acc(Counter(r, lvl, x), write)
    
    // no interference context translation needed
    
    inhale acc(Counter_INCR(r), 1 / 2)
    exhale acc(Counter(r, lvl, x), perm(Counter(r, lvl, x)))
    
    // ------- call:CAS BEGIN ----------
    
    assert true
    label pre_call8
    assert $_levelVar_20 >= 0
    assert true
    exhale acc(x.$cell_$value, write) && true
    b := havoc_Bool()
    inhale (old[pre_call8](x.$cell_$value) == v ?
        b && (acc(x.$cell_$value, write) && x.$cell_$value == v + 1) :
        !b &&
        (acc(x.$cell_$value, write) &&
        x.$cell_$value == old[pre_call8](x.$cell_$value)))
    
    // ------- call:CAS END ------------
    
    
    // ------- if-then-else BEGIN ------
    
    if (b) {
      
      // ------- apply BEGIN -------------
      
      AUTH_join(r, v, 1)
      
      // ------- apply END ---------------
      
      
      // ------- apply BEGIN -------------
      
      CONT_split(r, 0 - 1 - (v + 1), 1)
      
      // ------- apply END ---------------
      
      assert $_levelVar_20 == $_levelVar_20
    }
    $_levelVar_21 := $_levelVar_20
    
    // ------- if-then-else END --------
    
    fold acc(Counter(r, lvl, x), write)
    assert old[pre_use_atomic](Counter_state(r, lvl, x)) ==
      Counter_state(r, lvl, x) ||
      1 / 2 <= 1 / 2
    $_levelVar_22 := $_levelVar_19
    
    // ------- use-atomic END ----------
    
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@166.5) BEGIN 
    
    label pre_stabilize14
    
    // Stabilising all instances of region Counter
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Counter_interferenceSet_df(9, $r, $lvl, $x)) }
          none < old[pre_stabilize14](perm(Counter($r, $lvl, $x))) ==>
          ($$_m in Counter_interferenceSet_hf(9, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize14](Counter_state($r, $lvl, $x)) ||
          Counter_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize14](Counter_state($r, $lvl, $x)) &&
          Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
          true &&
          perm(Counter_INCR($r)) <= write - 1 / 2))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize14](perm(Counter($r, $lvl, $x))) ==>
        (Counter_state($r, $lvl, $x) in
        Counter_interferenceSet_hf(9, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize14](perm(Counter($r, $lvl, $x))) ==>
        Counter_interferenceReference_hf(9, $r, $lvl, $x) ==
        old[pre_stabilize14](Counter_state($r, $lvl, $x)))
    
    // Stabilising all instances of region Join
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in
          Join_interferenceSet_df(9, $s, $alvl, $y, $r, $lvl, $x)) }
          none <
          old[pre_stabilize14](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          ($$_m in Join_interferenceSet_hf(9, $s, $alvl, $y, $r, $lvl, $x)) ==
          ((none < perm($s.$diamond) &&
          none <
          perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
          ($$_m ==
          old[pre_stabilize14](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
          0 ==
          old[pre_stabilize14](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
          1 == $$_m &&
          true &&
          perm(Join_SET($s)) == none))))
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize14](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        (Join_state($s, $alvl, $y, $r, $lvl, $x) in
        Join_interferenceSet_hf(9, $s, $alvl, $y, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize14](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        Join_interferenceReference_hf(9, $s, $alvl, $y, $r, $lvl, $x) ==
        old[pre_stabilize14](Join_state($s, $alvl, $y, $r, $lvl, $x)))
    
    // Stabilising all instances of region LevelDummy
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
    $$lvl)
    exhale acc(LevelDummy_sk_fp(), write)
    inhale acc(LevelDummy_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
          { ($$_m in LevelDummy_interferenceSet_df(9, $r, $lvl)) }
          none < old[pre_stabilize14](perm(LevelDummy($r, $lvl))) ==>
          ($$_m in LevelDummy_interferenceSet_hf(9, $r, $lvl)) ==
          ((none < perm($r.$diamond) &&
          none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
          ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
          ($$_m == old[pre_stabilize14](LevelDummy_state($r, $lvl)) ||
          false))))
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize14](perm(LevelDummy($r, $lvl))) ==>
        (LevelDummy_state($r, $lvl) in
        LevelDummy_interferenceSet_hf(9, $r, $lvl)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize14](perm(LevelDummy($r, $lvl))) ==>
        LevelDummy_interferenceReference_hf(9, $r, $lvl) ==
        old[pre_stabilize14](LevelDummy_state($r, $lvl)))
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@166.5) END 
    
    assert $_levelVar_22 == $_levelVar_17
  }
  $_levelVar_23 := $_levelVar_17
  
  // ------- while END ---------------
  
}

method make_join(alvl: Int, r: Ref, lvl: Int, x: Ref)
  returns (s: Ref, y: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    lvl < alvl
  ensures acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0) &&
    acc(Join_SET(s), write) &&
    acc(Join_JOIN(s), write) &&
    alvl > lvl
{
  var $_levelVar_24: Int
  inhale $_levelVar_24 >= 0 && $_levelVar_24 > lvl
  assert $_levelVar_24 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- inhale BEGIN ------------
  
  inhale acc(y.$fjcell_$value, write) && true
  
  // ------- inhale END --------------
  
  
  // ------- heap-write BEGIN --------
  
  y.$fjcell_$value := 0
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after heap-write@209.3) BEGIN 
  
  label pre_stabilize15
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(10, $r, $lvl, $x)) }
        none < old[pre_stabilize15](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(10, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize15](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize15](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize15](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(10, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize15](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(10, $r, $lvl, $x) ==
      old[pre_stabilize15](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in
        Join_interferenceSet_df(10, $s, $alvl, $y, $r, $lvl, $x)) }
        none <
        old[pre_stabilize15](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(10, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize15](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize15](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize15](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(10, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize15](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(10, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize15](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(10, $r, $lvl)) }
        none < old[pre_stabilize15](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(10, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize15](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize15](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(10, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize15](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(10, $r, $lvl) ==
      old[pre_stabilize15](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after heap-write@209.3) END 
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(Join_SET(s), write) && acc(Join_JOIN(s), write)
  
  // ------- inhale END --------------
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(y.$fjcell_$_payload, write) && y.$fjcell_$_payload == true
  
  // ------- inhale END --------------
  
  
  // ------- fold BEGIN --------------
  
  fold acc(Join(s, alvl, y, r, lvl, x), write)
  assert alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0
  
  // ------- fold END ----------------
  
}

method set_to_one(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
  ensures acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 1)
{
  var $_levelVar_25: Int
  var $_levelVar_26: Int
  var $_levelVar_27: Int
  inhale $_levelVar_25 >= 0 && $_levelVar_25 > lvl && $_levelVar_25 > alvl
  assert $_levelVar_25 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  assert acc(Join(s, alvl, y, r, lvl, x), write)
  
  // ------- Stabilising regions Join (infer context for use-atomic) BEGIN 
  
  label pre_stabilize16
  
  // Stabilising single instance of region Join
  quasihavoc Join_interferenceContext_fp(s, alvl, y, r, lvl, x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Join_interferenceSet_df(11, s, alvl, y, r, lvl, x)) }
      ($$_m in Join_interferenceSet_hf(11, s, alvl, y, r, lvl, x)) ==
      ((none < perm(s.$diamond) &&
      none < perm(Join_atomicity_context_fp(s, alvl, y, r, lvl, x)) ==>
      ($$_m in Join_atomicity_context_hf(s, alvl, y, r, lvl, x))) &&
      ($$_m == old[pre_stabilize16](Join_state(s, alvl, y, r, lvl, x)) ||
      0 == old[pre_stabilize16](Join_state(s, alvl, y, r, lvl, x)) &&
      1 == $$_m &&
      true &&
      perm(Join_SET(s)) == none)))
  quasihavoc Join(s, alvl, y, r, lvl, x)
  inhale (Join_state(s, alvl, y, r, lvl, x) in
    Join_interferenceSet_hf(11, s, alvl, y, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Join_interferenceReference_hf(11, s, alvl, y, r, lvl, x) ==
    old[pre_stabilize16](Join_state(s, alvl, y, r, lvl, x))
  
  // ------- Stabilising regions Join (infer context for use-atomic) END 
  
  
  // ------- use-atomic BEGIN --------
  
  label pre_use_atomic2
  assert perm(Join_atomicity_context_fp(s, alvl, y, r, lvl, x)) == none
  assert $_levelVar_25 > alvl
  $_levelVar_26 := alvl
  exhale acc(Join_SET(s), write)
  unfold acc(Join(s, alvl, y, r, lvl, x), write)
  label transitionPre4
  quasihavoc Counter_interferenceContext_fp(r, lvl, x)
  
  // no additional linking required
  
  
  // havoc performed by other front resource
  
  inhale y.$fjcell_$value == 1 && y.$fjcell_$_payload ==>
    Counter_interferenceReference_hf(11, r, lvl, x) ==
    old[transitionPre4](Counter_state(r, lvl, x))
  inhale acc(Join_SET(s), write)
  exhale acc(Join(s, alvl, y, r, lvl, x), perm(Join(s, alvl, y, r, lvl, x)))
  
  // ------- heap-write BEGIN --------
  
  y.$fjcell_$value := 1
  
  // ------- heap-write END ----------
  
  
  // ------- exhale BEGIN ------------
  
  exhale acc(y.$fjcell_$_payload, write) && true
  
  // ------- exhale END --------------
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(y.$fjcell_$_payload, write) && y.$fjcell_$_payload == true
  
  // ------- inhale END --------------
  
  fold acc(Join(s, alvl, y, r, lvl, x), write)
  assert old[pre_use_atomic2](Join_state(s, alvl, y, r, lvl, x)) ==
    Join_state(s, alvl, y, r, lvl, x) ||
    0 == old[pre_use_atomic2](Join_state(s, alvl, y, r, lvl, x)) &&
    1 == Join_state(s, alvl, y, r, lvl, x)
  $_levelVar_27 := $_levelVar_25
  
  // ------- use-atomic END ----------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@221.3) BEGIN 
  
  label pre_stabilize17
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(12, $r, $lvl, $x)) }
        none < old[pre_stabilize17](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(12, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize17](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize17](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize17](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(12, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize17](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(12, $r, $lvl, $x) ==
      old[pre_stabilize17](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in
        Join_interferenceSet_df(12, $s, $alvl, $y, $r, $lvl, $x)) }
        none <
        old[pre_stabilize17](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(12, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize17](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize17](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize17](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(12, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize17](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(12, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize17](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(12, $r, $lvl)) }
        none < old[pre_stabilize17](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(12, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize17](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize17](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(12, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize17](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(12, $r, $lvl) ==
      old[pre_stabilize17](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after use-atomic@221.3) END 
  
}

method wait(s: Ref, alvl: Int, y: Ref, r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_JOIN(s), write) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) && (alvl >= 0 && true))
  ensures acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 1))
{
  var v: Int
  var $_levelVar_28: Int
  var $_levelVar_29: Int
  var $_levelVar_30: Int
  var $_levelVar_31: Int
  var $_levelVar_32: Int
  var $_levelVar_33: Int
  var $_levelVar_34: Int
  var $_levelVar_35: Int
  inhale $_levelVar_28 >= 0 && $_levelVar_28 > lvl && $_levelVar_28 > alvl
  assert $_levelVar_28 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  assert acc(Join(s, alvl, y, r, lvl, x), write)
  
  // ------- Stabilising regions Join (infer context for open-region) BEGIN 
  
  label pre_stabilize18
  
  // Stabilising single instance of region Join
  quasihavoc Join_interferenceContext_fp(s, alvl, y, r, lvl, x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Join_interferenceSet_df(13, s, alvl, y, r, lvl, x)) }
      ($$_m in Join_interferenceSet_hf(13, s, alvl, y, r, lvl, x)) ==
      ((none < perm(s.$diamond) &&
      none < perm(Join_atomicity_context_fp(s, alvl, y, r, lvl, x)) ==>
      ($$_m in Join_atomicity_context_hf(s, alvl, y, r, lvl, x))) &&
      ($$_m == old[pre_stabilize18](Join_state(s, alvl, y, r, lvl, x)) ||
      0 == old[pre_stabilize18](Join_state(s, alvl, y, r, lvl, x)) &&
      1 == $$_m &&
      true &&
      perm(Join_SET(s)) == none)))
  quasihavoc Join(s, alvl, y, r, lvl, x)
  inhale (Join_state(s, alvl, y, r, lvl, x) in
    Join_interferenceSet_hf(13, s, alvl, y, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Join_interferenceReference_hf(13, s, alvl, y, r, lvl, x) ==
    old[pre_stabilize18](Join_state(s, alvl, y, r, lvl, x))
  
  // ------- Stabilising regions Join (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region2
  assert $_levelVar_28 > alvl
  $_levelVar_29 := alvl
  unfold acc(Join(s, alvl, y, r, lvl, x), write)
  label transitionPre5
  quasihavoc Counter_interferenceContext_fp(r, lvl, x)
  
  // no additional linking required
  
  
  // havoc performed by other front resource
  
  inhale y.$fjcell_$value == 1 && y.$fjcell_$_payload ==>
    Counter_interferenceReference_hf(13, r, lvl, x) ==
    old[transitionPre5](Counter_state(r, lvl, x))
  
  // ------- heap-read BEGIN ---------
  
  v := y.$fjcell_$value
  
  // ------- heap-read END -----------
  
  
  // ------- if-then-else BEGIN ------
  
  if (!(v == 0)) {
    
    // ------- fold BEGIN --------------
    
    fold acc(Join(s, alvl, y, r, lvl, x), write)
    assert alvl >= 0 && true
    
    // ------- fold END ----------------
    
    
    // ------- use-region-interpretation BEGIN 
    
    unfold acc(Join(s, alvl, y, r, lvl, x), write)
    inhale perm(Join_JOIN(s)) <= write
    fold acc(Join(s, alvl, y, r, lvl, x), write)
    
    // ------- Inferring interference context Counter,Join,LevelDummy (infer interference context after use-region interpretation) BEGIN 
    
    label pre_infer
    
    // Inferring interference all instances of region Counter
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Counter_interferenceSet_df(14, $r, $lvl, $x)) }
          none < old[pre_infer](perm(Counter($r, $lvl, $x))) ==>
          ($$_m in Counter_interferenceSet_hf(14, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_infer](Counter_state($r, $lvl, $x)) ||
          Counter_sk_$_action_n($r, $lvl, $x) ==
          old[pre_infer](Counter_state($r, $lvl, $x)) &&
          Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
          true &&
          perm(Counter_INCR($r)) <= write - 1 / 2))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_infer](perm(Counter($r, $lvl, $x))) ==>
        Counter_interferenceReference_hf(14, $r, $lvl, $x) ==
        old[pre_infer](Counter_state($r, $lvl, $x)))
    
    // Inferring interference all instances of region Join
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in
          Join_interferenceSet_df(14, $s, $alvl, $y, $r, $lvl, $x)) }
          none < old[pre_infer](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          ($$_m in
          Join_interferenceSet_hf(14, $s, $alvl, $y, $r, $lvl, $x)) ==
          ((none < perm($s.$diamond) &&
          none <
          perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
          ($$_m == old[pre_infer](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
          0 == old[pre_infer](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
          1 == $$_m &&
          true &&
          perm(Join_SET($s)) == none))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_infer](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        Join_interferenceReference_hf(14, $s, $alvl, $y, $r, $lvl, $x) ==
        old[pre_infer](Join_state($s, $alvl, $y, $r, $lvl, $x)))
    
    // Inferring interference all instances of region LevelDummy
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
    $$lvl)
    exhale acc(LevelDummy_sk_fp(), write)
    inhale acc(LevelDummy_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
          { ($$_m in LevelDummy_interferenceSet_df(14, $r, $lvl)) }
          none < old[pre_infer](perm(LevelDummy($r, $lvl))) ==>
          ($$_m in LevelDummy_interferenceSet_hf(14, $r, $lvl)) ==
          ((none < perm($r.$diamond) &&
          none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
          ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
          ($$_m == old[pre_infer](LevelDummy_state($r, $lvl)) || false))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_infer](perm(LevelDummy($r, $lvl))) ==>
        LevelDummy_interferenceReference_hf(14, $r, $lvl) ==
        old[pre_infer](LevelDummy_state($r, $lvl)))
    
    // ------- Inferring interference context Counter,Join,LevelDummy (infer interference context after use-region interpretation) END 
    
    
    // ------- use-region-interpretation END 
    
    
    // ------- unfold BEGIN ------------
    
    assert alvl >= 0 && true
    unfold acc(Join(s, alvl, y, r, lvl, x), write)
    
    // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) BEGIN 
    
    label pre_infer2
    
    // Inferring interference all instances of region Counter
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Counter_interferenceSet_df(15, $r, $lvl, $x)) }
          none < old[pre_infer2](perm(Counter($r, $lvl, $x))) ==>
          ($$_m in Counter_interferenceSet_hf(15, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_infer2](Counter_state($r, $lvl, $x)) ||
          Counter_sk_$_action_n($r, $lvl, $x) ==
          old[pre_infer2](Counter_state($r, $lvl, $x)) &&
          Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
          true &&
          perm(Counter_INCR($r)) <= write - 1 / 2))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_infer2](perm(Counter($r, $lvl, $x))) ==>
        Counter_interferenceReference_hf(15, $r, $lvl, $x) ==
        old[pre_infer2](Counter_state($r, $lvl, $x)))
    
    // Inferring interference all instances of region Join
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in
          Join_interferenceSet_df(15, $s, $alvl, $y, $r, $lvl, $x)) }
          none < old[pre_infer2](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          ($$_m in
          Join_interferenceSet_hf(15, $s, $alvl, $y, $r, $lvl, $x)) ==
          ((none < perm($s.$diamond) &&
          none <
          perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
          ($$_m == old[pre_infer2](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
          0 == old[pre_infer2](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
          1 == $$_m &&
          true &&
          perm(Join_SET($s)) == none))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_infer2](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        Join_interferenceReference_hf(15, $s, $alvl, $y, $r, $lvl, $x) ==
        old[pre_infer2](Join_state($s, $alvl, $y, $r, $lvl, $x)))
    
    // Inferring interference all instances of region LevelDummy
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
    $$lvl)
    exhale acc(LevelDummy_sk_fp(), write)
    inhale acc(LevelDummy_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
          { ($$_m in LevelDummy_interferenceSet_df(15, $r, $lvl)) }
          none < old[pre_infer2](perm(LevelDummy($r, $lvl))) ==>
          ($$_m in LevelDummy_interferenceSet_hf(15, $r, $lvl)) ==
          ((none < perm($r.$diamond) &&
          none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
          ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
          ($$_m == old[pre_infer2](LevelDummy_state($r, $lvl)) || false))))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_infer2](perm(LevelDummy($r, $lvl))) ==>
        LevelDummy_interferenceReference_hf(15, $r, $lvl) ==
        old[pre_infer2](LevelDummy_state($r, $lvl)))
    
    // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) END 
    
    
    // ------- unfold END --------------
    
    
    // ------- exhale BEGIN ------------
    
    exhale acc(y.$fjcell_$_payload, write) && y.$fjcell_$_payload == true
    
    // ------- exhale END --------------
    
    
    // ------- inhale BEGIN ------------
    
    inhale acc(y.$fjcell_$_payload, write) && y.$fjcell_$_payload == false
    
    // ------- inhale END --------------
    
    assert $_levelVar_29 == $_levelVar_29
  }
  $_levelVar_30 := $_levelVar_29
  
  // ------- if-then-else END --------
  
  fold acc(Join(s, alvl, y, r, lvl, x), write)
  assert Join_state(s, alvl, y, r, lvl, x) ==
    old[pre_open_region2](Join_state(s, alvl, y, r, lvl, x))
  $_levelVar_31 := $_levelVar_28
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@240.5) BEGIN 
  
  label pre_stabilize19
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Counter_interferenceSet_df(16, $r, $lvl, $x)) }
        none < old[pre_stabilize19](perm(Counter($r, $lvl, $x))) ==>
        ($$_m in Counter_interferenceSet_hf(16, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize19](Counter_state($r, $lvl, $x)) ||
        Counter_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize19](Counter_state($r, $lvl, $x)) &&
        Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
        true &&
        perm(Counter_INCR($r)) <= write - 1 / 2))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize19](perm(Counter($r, $lvl, $x))) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_interferenceSet_hf(16, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize19](perm(Counter($r, $lvl, $x))) ==>
      Counter_interferenceReference_hf(16, $r, $lvl, $x) ==
      old[pre_stabilize19](Counter_state($r, $lvl, $x)))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in
        Join_interferenceSet_df(16, $s, $alvl, $y, $r, $lvl, $x)) }
        none <
        old[pre_stabilize19](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(16, $s, $alvl, $y, $r, $lvl, $x)) ==
        ((none < perm($s.$diamond) &&
        none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize19](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
        0 == old[pre_stabilize19](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET($s)) == none))))
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize19](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_interferenceSet_hf(16, $s, $alvl, $y, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize19](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      Join_interferenceReference_hf(16, $s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize19](Join_state($s, $alvl, $y, $r, $lvl, $x)))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
  $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
        { ($$_m in LevelDummy_interferenceSet_df(16, $r, $lvl)) }
        none < old[pre_stabilize19](perm(LevelDummy($r, $lvl))) ==>
        ($$_m in LevelDummy_interferenceSet_hf(16, $r, $lvl)) ==
        ((none < perm($r.$diamond) &&
        none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
        ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
        ($$_m == old[pre_stabilize19](LevelDummy_state($r, $lvl)) || false))))
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize19](perm(LevelDummy($r, $lvl))) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_interferenceSet_hf(16, $r, $lvl)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize19](perm(LevelDummy($r, $lvl))) ==>
      LevelDummy_interferenceReference_hf(16, $r, $lvl) ==
      old[pre_stabilize19](LevelDummy_state($r, $lvl)))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@240.5) END 
  
  
  // ------- while BEGIN -------------
  
  label preWhile
  while (v == 0)
    invariant acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
      (acc(Join(s, alvl, y, r, lvl, x), write) && (alvl >= 0 && true))
    invariant (v == 0 ?
        acc(Join_JOIN(s), write) :
        Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write) &&
        acc(Counter_INCR(r), 1 / 2) &&
        Join_state(s, alvl, y, r, lvl, x) == 1) 
  {
    inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
      acc(LevelDummy_sk_fp(), write)
    
    // no init required
    
    
    // no init required
    
    
    // no init required
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
        $lvl, $x), write))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
        $alvl, $y, $r, $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
        $lvl), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_atomicity_context_fp($r,
        $lvl, $x), old[preWhile](perm(Counter_atomicity_context_fp($r, $lvl,
        $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::
        { Counter_atomicity_context_df($r, $lvl, $x) }
        none <
        old[preWhile](perm(Counter_atomicity_context_fp($r, $lvl, $x))) ==>
        Counter_atomicity_context_hf($r, $lvl, $x) ==
        old[preWhile](Counter_atomicity_context_hf($r, $lvl, $x)))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_atomicity_context_fp($s,
        $alvl, $y, $r, $lvl, $x), old[preWhile](perm(Join_atomicity_context_fp($s,
        $alvl, $y, $r, $lvl, $x)))))
    inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::
        { Join_atomicity_context_df($s, $alvl, $y, $r, $lvl, $x) }
        none <
        old[preWhile](perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl,
        $x))) ==>
        Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x) ==
        old[preWhile](Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x)))
    inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_atomicity_context_fp($r,
        $lvl), old[preWhile](perm(LevelDummy_atomicity_context_fp($r, $lvl)))))
    inhale (forall $r: Ref, $lvl: Int ::
        { LevelDummy_atomicity_context_df($r, $lvl) }
        none <
        old[preWhile](perm(LevelDummy_atomicity_context_fp($r, $lvl))) ==>
        LevelDummy_atomicity_context_hf($r, $lvl) ==
        old[preWhile](LevelDummy_atomicity_context_hf($r, $lvl)))
    assert acc(Join(s, alvl, y, r, lvl, x), write)
    
    // ------- Stabilising regions Join (infer context for open-region) BEGIN 
    
    label pre_stabilize20
    
    // Stabilising single instance of region Join
    quasihavoc Join_interferenceContext_fp(s, alvl, y, r, lvl, x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(17, s, alvl, y, r, lvl, x)) }
        ($$_m in Join_interferenceSet_hf(17, s, alvl, y, r, lvl, x)) ==
        ((none < perm(s.$diamond) &&
        none < perm(Join_atomicity_context_fp(s, alvl, y, r, lvl, x)) ==>
        ($$_m in Join_atomicity_context_hf(s, alvl, y, r, lvl, x))) &&
        ($$_m == old[pre_stabilize20](Join_state(s, alvl, y, r, lvl, x)) ||
        0 == old[pre_stabilize20](Join_state(s, alvl, y, r, lvl, x)) &&
        1 == $$_m &&
        true &&
        perm(Join_SET(s)) == none)))
    quasihavoc Join(s, alvl, y, r, lvl, x)
    inhale (Join_state(s, alvl, y, r, lvl, x) in
      Join_interferenceSet_hf(17, s, alvl, y, r, lvl, x))
    
    // havoc performed by other front resource
    
    inhale Join_interferenceReference_hf(17, s, alvl, y, r, lvl, x) ==
      old[pre_stabilize20](Join_state(s, alvl, y, r, lvl, x))
    
    // ------- Stabilising regions Join (infer context for open-region) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region3
    assert $_levelVar_31 > alvl
    $_levelVar_32 := alvl
    unfold acc(Join(s, alvl, y, r, lvl, x), write)
    label transitionPre6
    quasihavoc Counter_interferenceContext_fp(r, lvl, x)
    
    // no additional linking required
    
    
    // havoc performed by other front resource
    
    inhale y.$fjcell_$value == 1 && y.$fjcell_$_payload ==>
      Counter_interferenceReference_hf(17, r, lvl, x) ==
      old[transitionPre6](Counter_state(r, lvl, x))
    
    // ------- heap-read BEGIN ---------
    
    v := y.$fjcell_$value
    
    // ------- heap-read END -----------
    
    
    // ------- if-then-else BEGIN ------
    
    if (!(v == 0)) {
      
      // ------- fold BEGIN --------------
      
      fold acc(Join(s, alvl, y, r, lvl, x), write)
      assert alvl >= 0 && true
      
      // ------- fold END ----------------
      
      
      // ------- use-region-interpretation BEGIN 
      
      unfold acc(Join(s, alvl, y, r, lvl, x), write)
      inhale perm(Join_JOIN(s)) <= write
      fold acc(Join(s, alvl, y, r, lvl, x), write)
      
      // ------- Inferring interference context Counter,Join,LevelDummy (infer interference context after use-region interpretation) BEGIN 
      
      label pre_infer3
      
      // Inferring interference all instances of region Counter
      quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
      $$lvl, $$x)
      exhale acc(Counter_sk_fp(), write)
      inhale acc(Counter_sk_fp(), write)
      inhale (forperm
          $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
            { ($$_m in Counter_interferenceSet_df(18, $r, $lvl, $x)) }
            none < old[pre_infer3](perm(Counter($r, $lvl, $x))) ==>
            ($$_m in Counter_interferenceSet_hf(18, $r, $lvl, $x)) ==
            ((none < perm($r.$diamond) &&
            none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
            ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
            ($$_m == old[pre_infer3](Counter_state($r, $lvl, $x)) ||
            Counter_sk_$_action_n($r, $lvl, $x) ==
            old[pre_infer3](Counter_state($r, $lvl, $x)) &&
            Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
            true &&
            perm(Counter_INCR($r)) <= write - 1 / 2))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
          old[pre_infer3](perm(Counter($r, $lvl, $x))) ==>
          Counter_interferenceReference_hf(18, $r, $lvl, $x) ==
          old[pre_infer3](Counter_state($r, $lvl, $x)))
      
      // Inferring interference all instances of region Join
      quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
      $$alvl, $$y, $$r, $$lvl, $$x)
      exhale acc(Join_sk_fp(), write)
      inhale acc(Join_sk_fp(), write)
      inhale (forperm
          $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
          $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
            { ($$_m in
            Join_interferenceSet_df(18, $s, $alvl, $y, $r, $lvl, $x)) }
            none < old[pre_infer3](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
            ($$_m in
            Join_interferenceSet_hf(18, $s, $alvl, $y, $r, $lvl, $x)) ==
            ((none < perm($s.$diamond) &&
            none <
            perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
            ($$_m in
            Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
            ($$_m ==
            old[pre_infer3](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
            0 == old[pre_infer3](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
            1 == $$_m &&
            true &&
            perm(Join_SET($s)) == none))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
          $alvl, $y, $r, $lvl, $x)] :: none <
          old[pre_infer3](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          Join_interferenceReference_hf(18, $s, $alvl, $y, $r, $lvl, $x) ==
          old[pre_infer3](Join_state($s, $alvl, $y, $r, $lvl, $x)))
      
      // Inferring interference all instances of region LevelDummy
      quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
      $$lvl)
      exhale acc(LevelDummy_sk_fp(), write)
      inhale acc(LevelDummy_sk_fp(), write)
      inhale (forperm
          $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
            { ($$_m in LevelDummy_interferenceSet_df(18, $r, $lvl)) }
            none < old[pre_infer3](perm(LevelDummy($r, $lvl))) ==>
            ($$_m in LevelDummy_interferenceSet_hf(18, $r, $lvl)) ==
            ((none < perm($r.$diamond) &&
            none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
            ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
            ($$_m == old[pre_infer3](LevelDummy_state($r, $lvl)) || false))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
          old[pre_infer3](perm(LevelDummy($r, $lvl))) ==>
          LevelDummy_interferenceReference_hf(18, $r, $lvl) ==
          old[pre_infer3](LevelDummy_state($r, $lvl)))
      
      // ------- Inferring interference context Counter,Join,LevelDummy (infer interference context after use-region interpretation) END 
      
      
      // ------- use-region-interpretation END 
      
      
      // ------- unfold BEGIN ------------
      
      assert alvl >= 0 && true
      unfold acc(Join(s, alvl, y, r, lvl, x), write)
      
      // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) BEGIN 
      
      label pre_infer4
      
      // Inferring interference all instances of region Counter
      quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
      $$lvl, $$x)
      exhale acc(Counter_sk_fp(), write)
      inhale acc(Counter_sk_fp(), write)
      inhale (forperm
          $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
            { ($$_m in Counter_interferenceSet_df(19, $r, $lvl, $x)) }
            none < old[pre_infer4](perm(Counter($r, $lvl, $x))) ==>
            ($$_m in Counter_interferenceSet_hf(19, $r, $lvl, $x)) ==
            ((none < perm($r.$diamond) &&
            none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
            ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
            ($$_m == old[pre_infer4](Counter_state($r, $lvl, $x)) ||
            Counter_sk_$_action_n($r, $lvl, $x) ==
            old[pre_infer4](Counter_state($r, $lvl, $x)) &&
            Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
            true &&
            perm(Counter_INCR($r)) <= write - 1 / 2))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
          old[pre_infer4](perm(Counter($r, $lvl, $x))) ==>
          Counter_interferenceReference_hf(19, $r, $lvl, $x) ==
          old[pre_infer4](Counter_state($r, $lvl, $x)))
      
      // Inferring interference all instances of region Join
      quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
      $$alvl, $$y, $$r, $$lvl, $$x)
      exhale acc(Join_sk_fp(), write)
      inhale acc(Join_sk_fp(), write)
      inhale (forperm
          $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
          $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
            { ($$_m in
            Join_interferenceSet_df(19, $s, $alvl, $y, $r, $lvl, $x)) }
            none < old[pre_infer4](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
            ($$_m in
            Join_interferenceSet_hf(19, $s, $alvl, $y, $r, $lvl, $x)) ==
            ((none < perm($s.$diamond) &&
            none <
            perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
            ($$_m in
            Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
            ($$_m ==
            old[pre_infer4](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
            0 == old[pre_infer4](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
            1 == $$_m &&
            true &&
            perm(Join_SET($s)) == none))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
          $alvl, $y, $r, $lvl, $x)] :: none <
          old[pre_infer4](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          Join_interferenceReference_hf(19, $s, $alvl, $y, $r, $lvl, $x) ==
          old[pre_infer4](Join_state($s, $alvl, $y, $r, $lvl, $x)))
      
      // Inferring interference all instances of region LevelDummy
      quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
      $$lvl)
      exhale acc(LevelDummy_sk_fp(), write)
      inhale acc(LevelDummy_sk_fp(), write)
      inhale (forperm
          $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
            { ($$_m in LevelDummy_interferenceSet_df(19, $r, $lvl)) }
            none < old[pre_infer4](perm(LevelDummy($r, $lvl))) ==>
            ($$_m in LevelDummy_interferenceSet_hf(19, $r, $lvl)) ==
            ((none < perm($r.$diamond) &&
            none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
            ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
            ($$_m == old[pre_infer4](LevelDummy_state($r, $lvl)) || false))))
      
      // havoc performed by other front resource
      
      inhale (forperm
          $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
          old[pre_infer4](perm(LevelDummy($r, $lvl))) ==>
          LevelDummy_interferenceReference_hf(19, $r, $lvl) ==
          old[pre_infer4](LevelDummy_state($r, $lvl)))
      
      // ------- Inferring interference context Counter,Join,LevelDummy (recompute interference context after unfold) END 
      
      
      // ------- unfold END --------------
      
      
      // ------- exhale BEGIN ------------
      
      exhale acc(y.$fjcell_$_payload, write) && y.$fjcell_$_payload == true
      
      // ------- exhale END --------------
      
      
      // ------- inhale BEGIN ------------
      
      inhale acc(y.$fjcell_$_payload, write) &&
        y.$fjcell_$_payload == false
      
      // ------- inhale END --------------
      
      assert $_levelVar_32 == $_levelVar_32
    }
    $_levelVar_33 := $_levelVar_32
    
    // ------- if-then-else END --------
    
    fold acc(Join(s, alvl, y, r, lvl, x), write)
    assert Join_state(s, alvl, y, r, lvl, x) ==
      old[pre_open_region3](Join_state(s, alvl, y, r, lvl, x))
    $_levelVar_34 := $_levelVar_31
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@240.5) BEGIN 
    
    label pre_stabilize21
    
    // Stabilising all instances of region Counter
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Counter_sk_fp(), write)
    inhale acc(Counter_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Counter_interferenceSet_df(20, $r, $lvl, $x)) }
          none < old[pre_stabilize21](perm(Counter($r, $lvl, $x))) ==>
          ($$_m in Counter_interferenceSet_hf(20, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Counter_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize21](Counter_state($r, $lvl, $x)) ||
          Counter_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize21](Counter_state($r, $lvl, $x)) &&
          Counter_sk_$_action_m($r, $lvl, $x) == $$_m &&
          true &&
          perm(Counter_INCR($r)) <= write - 1 / 2))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize21](perm(Counter($r, $lvl, $x))) ==>
        (Counter_state($r, $lvl, $x) in
        Counter_interferenceSet_hf(20, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
        old[pre_stabilize21](perm(Counter($r, $lvl, $x))) ==>
        Counter_interferenceReference_hf(20, $r, $lvl, $x) ==
        old[pre_stabilize21](Counter_state($r, $lvl, $x)))
    
    // Stabilising all instances of region Join
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in
          Join_interferenceSet_df(20, $s, $alvl, $y, $r, $lvl, $x)) }
          none <
          old[pre_stabilize21](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
          ($$_m in
          Join_interferenceSet_hf(20, $s, $alvl, $y, $r, $lvl, $x)) ==
          ((none < perm($s.$diamond) &&
          none <
          perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
          ($$_m ==
          old[pre_stabilize21](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
          0 ==
          old[pre_stabilize21](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
          1 == $$_m &&
          true &&
          perm(Join_SET($s)) == none))))
    quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
    $$alvl, $$y, $$r, $$lvl, $$x)
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize21](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        (Join_state($s, $alvl, $y, $r, $lvl, $x) in
        Join_interferenceSet_hf(20, $s, $alvl, $y, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s,
        $alvl, $y, $r, $lvl, $x)] :: none <
        old[pre_stabilize21](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
        Join_interferenceReference_hf(20, $s, $alvl, $y, $r, $lvl, $x) ==
        old[pre_stabilize21](Join_state($s, $alvl, $y, $r, $lvl, $x)))
    
    // Stabilising all instances of region LevelDummy
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy_interferenceContext_fp($$r,
    $$lvl)
    exhale acc(LevelDummy_sk_fp(), write)
    inhale acc(LevelDummy_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: (forall $$_m: Int ::
          { ($$_m in LevelDummy_interferenceSet_df(20, $r, $lvl)) }
          none < old[pre_stabilize21](perm(LevelDummy($r, $lvl))) ==>
          ($$_m in LevelDummy_interferenceSet_hf(20, $r, $lvl)) ==
          ((none < perm($r.$diamond) &&
          none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
          ($$_m in LevelDummy_atomicity_context_hf($r, $lvl))) &&
          ($$_m == old[pre_stabilize21](LevelDummy_state($r, $lvl)) ||
          false))))
    quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize21](perm(LevelDummy($r, $lvl))) ==>
        (LevelDummy_state($r, $lvl) in
        LevelDummy_interferenceSet_hf(20, $r, $lvl)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
        old[pre_stabilize21](perm(LevelDummy($r, $lvl))) ==>
        LevelDummy_interferenceReference_hf(20, $r, $lvl) ==
        old[pre_stabilize21](LevelDummy_state($r, $lvl)))
    
    // ------- Stabilising regions Counter,Join,LevelDummy (after open-region@240.5) END 
    
    assert $_levelVar_34 == $_levelVar_31
  }
  $_levelVar_35 := $_levelVar_31
  
  // ------- while END ---------------
  
}

method $_Counter_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale acc(x.$cell_$value, write) && true && 0 <= x.$cell_$value &&
    (Counter_CONT_T(r, 0 - 1 - x.$cell_$value) &&
    acc(Counter_CONT(r, 0 - 1 - x.$cell_$value), write)) &&
    (Counter_AUTH_T(r, x.$cell_$value) &&
    acc(Counter_AUTH(r, x.$cell_$value), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) BEGIN 
  
  label pre_stabilize22
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize22](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize22](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize22](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize22](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize22](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize22](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize22](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize22](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) END 
  
  assert acc(x.$cell_$value, write) && true && 0 <= x.$cell_$value &&
    (Counter_CONT_T(r, 0 - 1 - x.$cell_$value) &&
    acc(Counter_CONT(r, 0 - 1 - x.$cell_$value), write)) &&
    (Counter_AUTH_T(r, x.$cell_$value) &&
    acc(Counter_AUTH(r, x.$cell_$value), write))
}

method $_Counter_action_transitivity_check()
{
  var INCR: Perm
  var CONT: Set[Int]
  var AUTH: Set[Int]
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState ||
    $_action_n_0_x == aState && $_action_m_0_x == bState && true &&
    1 / 2 >= INCR
  inhale bState == cState ||
    $_action_n_0_y == bState && $_action_m_0_y == cState && true &&
    1 / 2 >= INCR
  assert aState == cState ||
    aState == aState && cState == cState && true && 1 / 2 >= INCR
}

method $_Join_interpretation_stability_check(s: Ref, alvl: Int, y: Ref, r: Ref,
  lvl: Int, x: Ref)
{
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale acc(y.$fjcell_$value, write) && true &&
    (y.$fjcell_$value == 0 || y.$fjcell_$value == 1) &&
    (acc(y.$fjcell_$_payload, write) && true) &&
    (y.$fjcell_$value == 1 ?
      (y.$fjcell_$_payload ?
        acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl &&
        (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
        acc(Counter_INCR(r), 1 / 2) :
        acc(Join_JOIN(s), write)) :
      true)
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) BEGIN 
  
  label pre_stabilize23
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize23](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize23](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize23](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize23](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize23](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize23](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize23](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize23](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) END 
  
  assert acc(y.$fjcell_$value, write) && true &&
    (y.$fjcell_$value == 0 || y.$fjcell_$value == 1) &&
    (acc(y.$fjcell_$_payload, write) && true) &&
    (y.$fjcell_$value == 1 ?
      (y.$fjcell_$_payload ?
        acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl &&
        (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
        acc(Counter_INCR(r), 1 / 2) :
        acc(Join_JOIN(s), write)) :
      true)
}

method $_Join_action_transitivity_check()
{
  var SET: Bool
  var JOIN: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || 0 == aState && 1 == bState && true && SET
  inhale bState == cState || 0 == bState && 1 == cState && true && SET
  assert aState == cState || 0 == aState && 1 == cState && true && SET
}

method $_LevelDummy_interpretation_stability_check(r: Ref, lvl: Int)
{
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  inhale true
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) BEGIN 
  
  label pre_stabilize24
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize24](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize24](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize24](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize24](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize24](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize24](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize24](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize24](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of region interpretation) END 
  
  assert true
}

method $_LevelDummy_action_transitivity_check()
{
  var LevelDummyG: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState
  inhale bState == cState
  assert aState == cState
}

method $_thread_incr_condition_stability_precondition_check(r: Ref, lvl: Int,
  x: Ref, s: Ref, alvl: Int, y: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
{
  var $_levelVar_36: Int
  inhale $_levelVar_36 >= 0 && $_levelVar_36 > lvl && $_levelVar_36 > alvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize25
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize25](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize25](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize25](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize25](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize25](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize25](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize25](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize25](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
}

method $_parallel_incr_condition_stability_precondition_check(lvl: Int, alvl: Int,
  dummy: Ref, r: Ref, x: Ref)
  requires acc(LevelDummy(dummy, alvl), write) && (alvl >= 0 && true) &&
    (alvl > lvl && lvl >= 0)
{
  var $_levelVar_37: Int
  var y1: Ref
  var y2: Ref
  var s1: Ref
  var s2: Ref
  var s1_lvl: Int
  var s2_lvl: Int
  inhale $_levelVar_37 >= 0 && $_levelVar_37 > alvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize26
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize26](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize26](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize26](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize26](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize26](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize26](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize26](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize26](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(LevelDummy(dummy, alvl), write) && (alvl >= 0 && true) &&
    (alvl > lvl && lvl >= 0)
}

method $_CONT_split_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n + m) && acc(Counter_CONT(r, n + m), write)
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
{
  var $_levelVar_38: Int
  inhale $_levelVar_38 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize27
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize27](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize27](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize27](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize27](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize27](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize27](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize27](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize27](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_CONT_T(r, n + m) && acc(Counter_CONT(r, n + m), write) &&
    (0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0)
}

method $_CONT_join_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, m) && acc(Counter_CONT(r, m), write))
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
{
  var $_levelVar_39: Int
  inhale $_levelVar_39 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize28
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize28](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize28](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize28](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize28](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize28](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize28](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize28](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize28](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, m) && acc(Counter_CONT(r, m), write)) &&
    (0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0)
}

method $_CONT_false1_condition_stability_precondition_check(r: Ref, n: Int)
  requires Counter_CONT_T(r, 0 - 1) && acc(Counter_CONT(r, 0 - 1), write) &&
    (Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write)) &&
    0 < n
{
  var $_levelVar_40: Int
  inhale $_levelVar_40 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize29
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize29](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize29](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize29](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize29](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize29](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize29](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize29](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize29](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_CONT_T(r, 0 - 1) && acc(Counter_CONT(r, 0 - 1), write) &&
    (Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write)) &&
    0 < n
}

method $_CONT_max1_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, 0 - 1 - m) && acc(Counter_CONT(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
{
  var $_levelVar_41: Int
  inhale $_levelVar_41 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize30
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize30](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize30](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize30](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize30](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize30](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize30](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize30](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize30](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_CONT_T(r, n) && acc(Counter_CONT(r, n), write) &&
    (Counter_CONT_T(r, 0 - 1 - m) && acc(Counter_CONT(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
}

method $_AUTH_split_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n + m) && acc(Counter_AUTH(r, n + m), write)
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
{
  var $_levelVar_42: Int
  inhale $_levelVar_42 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize31
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize31](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize31](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize31](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize31](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize31](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize31](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize31](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize31](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_AUTH_T(r, n + m) && acc(Counter_AUTH(r, n + m), write) &&
    (0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0)
}

method $_AUTH_join_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, m) && acc(Counter_AUTH(r, m), write))
  requires 0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0
{
  var $_levelVar_43: Int
  inhale $_levelVar_43 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize32
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize32](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize32](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize32](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize32](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize32](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize32](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize32](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize32](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, m) && acc(Counter_AUTH(r, m), write)) &&
    (0 <= n && 0 <= m || n < 0 && 0 <= m && n + m < 0 ||
    m < 0 && 0 <= n && n + m < 0)
}

method $_AUTH_false1_condition_stability_precondition_check(r: Ref, n: Int)
  requires Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write) &&
    (Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write)) &&
    0 < n
{
  var $_levelVar_44: Int
  inhale $_levelVar_44 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize33
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize33](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize33](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize33](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize33](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize33](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize33](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize33](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize33](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_AUTH_T(r, 0 - 1) && acc(Counter_AUTH(r, 0 - 1), write) &&
    (Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write)) &&
    0 < n
}

method $_AUTH_max1_condition_stability_precondition_check(r: Ref, n: Int, m: Int)
  requires Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, 0 - 1 - m) && acc(Counter_AUTH(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
{
  var $_levelVar_45: Int
  inhale $_levelVar_45 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize34
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize34](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize34](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize34](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize34](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize34](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize34](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize34](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize34](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert Counter_AUTH_T(r, n) && acc(Counter_AUTH(r, n), write) &&
    (Counter_AUTH_T(r, 0 - 1 - m) && acc(Counter_AUTH(r, 0 - 1 - m), write)) &&
    0 <= n &&
    0 <= m
}

method $_makeCounter_condition_stability_precondition_check(lvl: Int, r: Ref,
  x: Ref)
  requires lvl >= 0
{
  var $_levelVar_46: Int
  inhale $_levelVar_46 >= 0
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize35
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize35](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize35](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize35](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize35](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize35](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize35](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize35](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize35](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert lvl >= 0
}

method $_incr_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
{
  var $_levelVar_47: Int
  var b: Bool
  var v: Int
  inhale $_levelVar_47 >= 0 && $_levelVar_47 > lvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize36
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize36](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize36](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize36](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize36](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize36](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize36](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize36](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize36](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_AUTH_T(r, 1) && acc(Counter_AUTH(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2)
}

method $_make_join_condition_stability_precondition_check(alvl: Int, r: Ref,
  lvl: Int, x: Ref, s: Ref, y: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    lvl < alvl
{
  var $_levelVar_48: Int
  inhale $_levelVar_48 >= 0 && $_levelVar_48 > lvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize37
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize37](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize37](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize37](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize37](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize37](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize37](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize37](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize37](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) && lvl < alvl
}

method $_set_to_one_condition_stability_precondition_check(s: Ref, alvl: Int,
  y: Ref, r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
{
  var $_levelVar_49: Int
  inhale $_levelVar_49 >= 0 && $_levelVar_49 > lvl && $_levelVar_49 > alvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize38
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize38](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize38](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize38](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize38](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize38](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize38](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize38](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize38](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    (Counter_CONT_T(r, 1) && acc(Counter_CONT(r, 1), write)) &&
    acc(Counter_INCR(r), 1 / 2) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) &&
    (alvl >= 0 && Join_state(s, alvl, y, r, lvl, x) == 0)) &&
    acc(Join_SET(s), write) &&
    lvl < alvl
}

method $_wait_condition_stability_precondition_check(s: Ref, alvl: Int, y: Ref,
  r: Ref, lvl: Int, x: Ref)
  requires acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_JOIN(s), write) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) && (alvl >= 0 && true))
{
  var $_levelVar_50: Int
  var v: Int
  inhale $_levelVar_50 >= 0 && $_levelVar_50 > lvl && $_levelVar_50 > alvl
  inhale acc(Counter_sk_fp(), write) && acc(Join_sk_fp(), write) &&
    acc(LevelDummy_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Counter_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale (forall $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($s,
      $alvl, $y, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int ::acc(LevelDummy_interferenceContext_fp($r,
      $lvl), write))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) BEGIN 
  
  label pre_stabilize39
  
  // Stabilising all instances of region Counter
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Counter($$r, $$lvl, $$x)
  exhale acc(Counter_sk_fp(), write)
  inhale acc(Counter_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Counter($r, $lvl, $x)] :: none <
      old[pre_stabilize39](perm(Counter($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Counter_atomicity_context_fp($r, $lvl, $x)) ==>
      (Counter_state($r, $lvl, $x) in
      Counter_atomicity_context_hf($r, $lvl, $x))) &&
      (Counter_state($r, $lvl, $x) ==
      old[pre_stabilize39](Counter_state($r, $lvl, $x)) ||
      Counter_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize39](Counter_state($r, $lvl, $x)) &&
      Counter_sk_$_action_m($r, $lvl, $x) == Counter_state($r, $lvl, $x) &&
      true &&
      perm(Counter_INCR($r)) <= write - 1 / 2))
  
  // Stabilising all instances of region Join
  quasihavocall $$s: Ref, $$alvl: Int, $$y: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$s,
  $$alvl, $$y, $$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $s: Ref, $alvl: Int, $y: Ref, $r: Ref, $lvl: Int, $x: Ref [Join($s, $alvl,
      $y, $r, $lvl, $x)] :: none <
      old[pre_stabilize39](perm(Join($s, $alvl, $y, $r, $lvl, $x))) ==>
      (none < perm($s.$diamond) &&
      none < perm(Join_atomicity_context_fp($s, $alvl, $y, $r, $lvl, $x)) ==>
      (Join_state($s, $alvl, $y, $r, $lvl, $x) in
      Join_atomicity_context_hf($s, $alvl, $y, $r, $lvl, $x))) &&
      (Join_state($s, $alvl, $y, $r, $lvl, $x) ==
      old[pre_stabilize39](Join_state($s, $alvl, $y, $r, $lvl, $x)) ||
      0 == old[pre_stabilize39](Join_state($s, $alvl, $y, $r, $lvl, $x)) &&
      1 == Join_state($s, $alvl, $y, $r, $lvl, $x) &&
      true &&
      perm(Join_SET($s)) == none))
  
  // Stabilising all instances of region LevelDummy
  quasihavocall $$r: Ref, $$lvl: Int :: LevelDummy($$r, $$lvl)
  exhale acc(LevelDummy_sk_fp(), write)
  inhale acc(LevelDummy_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int [LevelDummy($r, $lvl)] :: none <
      old[pre_stabilize39](perm(LevelDummy($r, $lvl))) ==>
      (none < perm($r.$diamond) &&
      none < perm(LevelDummy_atomicity_context_fp($r, $lvl)) ==>
      (LevelDummy_state($r, $lvl) in
      LevelDummy_atomicity_context_hf($r, $lvl))) &&
      (LevelDummy_state($r, $lvl) ==
      old[pre_stabilize39](LevelDummy_state($r, $lvl)) ||
      false))
  
  // ------- Stabilising regions Counter,Join,LevelDummy (check stability of method condition) END 
  
  assert acc(Counter(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_JOIN(s), write) &&
    (acc(Join(s, alvl, y, r, lvl, x), write) && (alvl >= 0 && true))
}