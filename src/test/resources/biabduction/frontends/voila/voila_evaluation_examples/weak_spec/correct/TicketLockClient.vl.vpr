domain $Map[U, V]  {
  
  function Map_keys(m: $Map[U, V]): Set[U] 
  
  function Map_card(m: $Map[U, V]): Int 
  
  function Map_lookup(m: $Map[U, V], u: U): V 
  
  function Map_values(m: $Map[U, V]): Set[V] 
  
  function Map_empty(): $Map[U, V] 
  
  function Map_build(m: $Map[U, V], u: U, v: V): $Map[U, V] 
  
  function Map_equal(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_disjoint(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_union(m1: $Map[U, V], m2: $Map[U, V]): $Map[U, V] 
  
  axiom Map_card_non_neg {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      0 <= (Map_card(m): Int))
  }
  
  axiom Map_card_domain {
    (forall m: $Map[U, V] ::
      { |(Map_keys(m): Set[U])| }
      |(Map_keys(m): Set[U])| == (Map_card(m): Int))
  }
  
  axiom Map_values_def {
    (forall m: $Map[U, V], v: V ::
      { (v in (Map_values(m): Set[V])) }
      (v in (Map_values(m): Set[V])) ==
      (exists u: U :: (u in (Map_keys(m): Set[U])) &&
        v == (Map_lookup(m, u): V)))
  }
  
  axiom Map_empty_1 {
    (forall u: U ::
      { (u in (Map_keys((Map_empty(): $Map[U, V])): Set[U])) }
      !((u in (Map_keys((Map_empty(): $Map[U, V])): Set[U]))))
  }
  
  axiom Map_empty_2 {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      ((Map_card(m): Int) == 0) == (m == (Map_empty(): $Map[U, V])) &&
      ((Map_card(m): Int) != 0 ==>
      (exists u: U :: (u in (Map_keys(m): Set[U])))))
  }
  
  axiom Map_build_1 {
    (forall m: $Map[U, V], u1: U, u2: U, v: V ::
      { (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) }
      (u2 == u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u1): V) == v) &&
      (u2 != u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) ==
      (u2 in (Map_keys(m): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u2): V) ==
      (Map_lookup(m, u2): V)))
  }
  
  axiom Map_build_2 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      (u in (Map_keys(m): Set[U])) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int))
  }
  
  axiom Map_build_3 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      !((u in (Map_keys(m): Set[U]))) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int) + 1)
  }
  
  axiom Map_equality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        (u in (Map_keys(m1): Set[U])) == (u in (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_extensionality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_disjoint(m1, m2): Bool) }
      (Map_disjoint(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        !((u in (Map_keys(m1): Set[U]))) ||
        !((u in (Map_keys(m2): Set[U])))))
  }
  
  axiom Map_union_1 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) }
      { (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))) }
      (Map_disjoint(m1, m2): Bool) ==>
      (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) ==
      (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_union_2 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m1): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m1, u): V))
  }
  
  axiom Map_union_3 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m2): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m2, u): V))
  }
}

domain trigger_functions  {
  
  function Client_state_T(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref): Bool 
  
  function TLock_TICKET_T($r: Ref, n: Int): Bool 
  
  function TLock_state_T(r: Ref, lvl: Int, x: Ref): Bool 
  
  axiom TLock_TICKET_T_bottom {
    (forall $r: Ref, n: Int ::
      { TLock_TICKET_T($r, n) }
      TLock_TICKET_T($r, n))
  }
}

domain interferenceReference_Domain  {
  
  function Client_interferenceReference_df($p0: Int, c: Ref, l: Int, z: Ref,
  r: Ref, lvl: Int, x: Ref): Bool 
  
  function TLock_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool 
}

domain interferenceSet_Domain  {
  
  function Client_interferenceSet_df($p0: Int, c: Ref, l: Int, z: Ref, r: Ref,
  lvl: Int, x: Ref): Set[Int] 
  
  function TLock_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int] 
}

domain atomicity_context_Domain  {
  
  function Client_atomicity_context_df(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int,
  x: Ref): Bool 
  
  function TLock_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool 
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $dualcell_$left: Int

field $dualcell_$right: Int

field $dualcell_$_val: Int

field $dualcell_$_own: Bool

field $memcell_$next: Int

field $memcell_$owner: Int

function IntSet(): Set[Int]
  ensures (forall n: Int ::(n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int ::0 <= n == (n in result))


function comprehension_74_280($s_0: Int, $s_1: Int): Set[Int]
  ensures (forall $k: Int ::($k in result) == ($s_0 <= $k && $k < $s_1))


function comprehension_85_220(): Set[Int]
  ensures (forall $k: Int ::($k in result) == true)


function comprehension_70_150($s_0: Int): Set[Int]
  ensures (forall $k: Int ::($k in result) == $k >= $s_0)


function Client_atomicity_context_hf(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int,
  x: Ref): Set[Int]
  requires acc(Client_atomicity_context_fp(c, l, z, r, lvl, x), write)
  ensures [Client_atomicity_context_df(c, l, z, r, lvl, x), true]


function Client_interferenceSet_hf($p0: Int, c: Ref, l: Int, z: Ref, r: Ref,
  lvl: Int, x: Ref): Set[Int]
  requires acc(Client_interferenceContext_fp(c, l, z, r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==>
      ($_m in Client_interferenceSet_df($p0, c, l, z, r, lvl, x))),
    true]


function Client_interferenceReference_hf($p0: Int, c: Ref, l: Int, z: Ref, r: Ref,
  lvl: Int, x: Ref): Int
  requires acc(Client_interferenceContext_fp(c, l, z, r, lvl, x), write)
  ensures [Client_interferenceReference_df($p0, c, l, z, r, lvl, x), true]


function Client_sk_$_action_n(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Client_sk_fp(), write)


function Client_sk_$_action_m(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Client_sk_fp(), write)


function Client_state(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Client(c, l, z, r, lvl, x), write)
  ensures [Client_state_T(c, l, z, r, lvl, x), true]
{
  (unfolding acc(Client(c, l, z, r, lvl, x), write) in z.$dualcell_$_val)
}

function TLock_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_atomicity_context_fp(r, lvl, x), write)
  ensures [TLock_atomicity_context_df(r, lvl, x), true]


function TLock_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==> ($_m in TLock_interferenceSet_df($p0, r, lvl, x))),
    true]


function TLock_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [TLock_interferenceReference_df($p0, r, lvl, x), true]


function TLock_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_out0(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$next)
}

function TLock_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
  ensures [TLock_state_T(r, lvl, x), true]
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$owner)
}

predicate Client_Z($r: Ref) 

predicate Client_atomicity_context_fp(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int,
  x: Ref) 

predicate Client_interferenceContext_fp(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int,
  x: Ref) 

predicate Client_sk_fp() 

predicate Client(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref) {
  acc(z.$dualcell_$_val, write) && true &&
  (acc(z.$dualcell_$_own, write) && true) &&
  (acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)) &&
  lvl < l &&
  (z.$dualcell_$_own ?
    TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write) :
    acc(z.$dualcell_$left, write) && z.$dualcell_$left == z.$dualcell_$_val &&
    (acc(z.$dualcell_$right, write) &&
    z.$dualcell_$right == z.$dualcell_$_val))
}

predicate TLock_TICKET($r: Ref, n: Int) 

predicate TLock_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_sk_fp() 

predicate TLock(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$owner, write) && true &&
  (acc(x.$memcell_$next, write) && true) &&
  ((forall $a: Int ::
    { TLock_TICKET_T(r, $a) }
    { ($a in comprehension_70_150(x.$memcell_$next)) }
    ($a in comprehension_70_150(x.$memcell_$next)) ==>
    TLock_TICKET_T(r, $a)) &&
  (forall $a: Int ::
    { TLock_TICKET_T(r, $a) }
    { ($a in comprehension_70_150(x.$memcell_$next)) }
    ($a in comprehension_70_150(x.$memcell_$next)) ==>
    acc(TLock_TICKET(r, $a), write))) &&
  x.$memcell_$next >= x.$memcell_$owner
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Client()


method ___silicon_hack407_havoc_all_Client_interferenceContext_fp()


method ___silicon_hack407_havoc_all_TLock()


method ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()


method foo(c: Ref, l: Int, z: Ref, r: Ref, lvl: Int, x: Ref, w: Int)
  requires acc(Client(c, l, z, r, lvl, x), write) && (l >= 0 && true) &&
    acc(Client_Z(c), write)
  ensures acc(Client(c, l, z, r, lvl, x), write) && (l >= 0 && true) &&
    acc(Client_Z(c), write)
{
  var ni: Int
  var s1: Bool
  var a: Int
  var m: Int
  var s2: Bool
  var $_levelVar_0: Int
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  inhale $_levelVar_0 >= 0 && $_levelVar_0 > l
  assert $_levelVar_0 >= 0
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  assert acc(Client(c, l, z, r, lvl, x), write)
  
  // ------- Stabilising regions Client (infer context for open-region) BEGIN 
  
  label pre_stabilize0
  
  // Stabilising single instance of region Client
  quasihavoc Client_interferenceContext_fp(c, l, z, r, lvl, x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Client_interferenceSet_df(1, c, l, z, r, lvl, x)) }
      ($$_m in Client_interferenceSet_hf(1, c, l, z, r, lvl, x)) ==
      ((none < perm(c.$diamond) &&
      none < perm(Client_atomicity_context_fp(c, l, z, r, lvl, x)) ==>
      ($$_m in Client_atomicity_context_hf(c, l, z, r, lvl, x))) &&
      ($$_m == old[pre_stabilize0](Client_state(c, l, z, r, lvl, x)) ||
      Client_sk_$_action_n(c, l, z, r, lvl, x) ==
      old[pre_stabilize0](Client_state(c, l, z, r, lvl, x)) &&
      Client_sk_$_action_m(c, l, z, r, lvl, x) == $$_m &&
      true &&
      true)))
  quasihavoc Client(c, l, z, r, lvl, x)
  inhale (Client_state(c, l, z, r, lvl, x) in
    Client_interferenceSet_hf(1, c, l, z, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Client_interferenceReference_hf(1, c, l, z, r, lvl, x) ==
    old[pre_stabilize0](Client_state(c, l, z, r, lvl, x))
  
  // ------- Stabilising regions Client (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region0
  assert $_levelVar_0 > l
  $_levelVar_1 := l
  unfold acc(Client(c, l, z, r, lvl, x), write)
  label transitionPre0
  quasihavoc TLock_interferenceContext_fp(r, lvl, x)
  
  // no additional linking required
  
  
  // havoc performed by other front resource
  
  inhale true ==>
    TLock_interferenceReference_hf(1, r, lvl, x) ==
    old[transitionPre0](TLock_state(r, lvl, x))
  
  // ------- assert BEGIN ------------
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ni := TLock_state(r, lvl, x)
  
  // ------- assert END --------------
  
  
  // ------- call:acquire BEGIN ------
  
  assert (forall $_m: Int ::
      { ($_m in TLock_interferenceSet_hf(1, r, lvl, x)) }
      ($_m in TLock_interferenceSet_hf(1, r, lvl, x)) ==>
      ($_m in comprehension_85_220()))
  label pre_call0
  assert $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert true
  exhale acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x)) &&
    (TLock_state(r, lvl, x) in comprehension_85_220())
  
  // ------- Stabilising regions Client,TLock (within call:acquire@28.5) BEGIN 
  
  label pre_stabilize
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (within call:acquire@28.5) END 
  
  inhale acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 &&
    TLock_state(r, lvl, x) == old[pre_call0](TLock_state(r, lvl, x))) &&
    (TLock_TICKET_T(r, old[pre_call0](TLock_state(r, lvl, x))) &&
    acc(TLock_TICKET(r, old[pre_call0](TLock_state(r, lvl, x))), write))
  
  // ------- call:acquire END --------
  
  inhale perm(TLock_TICKET(r, ni)) <= write
  
  // ------- havoc BEGIN -------------
  
  exhale acc(z.$dualcell_$_own, write)
  inhale acc(z.$dualcell_$_own, write)
  
  // ------- havoc END ---------------
  
  
  // ------- assert BEGIN ------------
  
  assert acc(z.$dualcell_$_own, write) && true
  s1 := z.$dualcell_$_own
  
  // ------- assert END --------------
  
  
  // ------- assume BEGIN ------------
  
  inhale s1 == true
  
  // ------- assume END --------------
  
  fold acc(Client(c, l, z, r, lvl, x), write)
  assert Client_state(c, l, z, r, lvl, x) ==
    old[pre_open_region0](Client_state(c, l, z, r, lvl, x))
  $_levelVar_2 := $_levelVar_0
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions Client,TLock (after open-region@25.3) BEGIN 
  
  label pre_stabilize2
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client_interferenceContext_fp($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Client_interferenceSet_df(2, $c, $l, $z, $r, $lvl, $x)) }
        none < old[pre_stabilize2](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
        ($$_m in Client_interferenceSet_hf(2, $c, $l, $z, $r, $lvl, $x)) ==
        ((none < perm($c.$diamond) &&
        none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
        ($$_m in Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize2](Client_state($c, $l, $z, $r, $lvl, $x)) ||
        Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
        old[pre_stabilize2](Client_state($c, $l, $z, $r, $lvl, $x)) &&
        Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) == $$_m &&
        true &&
        true))))
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_interferenceSet_hf(2, $c, $l, $z, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      Client_interferenceReference_hf(2, $c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize2](Client_state($c, $l, $z, $r, $lvl, $x)))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(2, $r, $lvl, $x)) }
        none < old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(2, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize2](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize2](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(2, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(2, $r, $lvl, $x) ==
      old[pre_stabilize2](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Client,TLock (after open-region@25.3) END 
  
  
  // ------- heap-write BEGIN --------
  
  z.$dualcell_$left := w
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions Client,TLock (after heap-write@39.3) BEGIN 
  
  label pre_stabilize3
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client_interferenceContext_fp($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Client_interferenceSet_df(3, $c, $l, $z, $r, $lvl, $x)) }
        none < old[pre_stabilize3](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
        ($$_m in Client_interferenceSet_hf(3, $c, $l, $z, $r, $lvl, $x)) ==
        ((none < perm($c.$diamond) &&
        none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
        ($$_m in Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize3](Client_state($c, $l, $z, $r, $lvl, $x)) ||
        Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
        old[pre_stabilize3](Client_state($c, $l, $z, $r, $lvl, $x)) &&
        Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) == $$_m &&
        true &&
        true))))
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_interferenceSet_hf(3, $c, $l, $z, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      Client_interferenceReference_hf(3, $c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize3](Client_state($c, $l, $z, $r, $lvl, $x)))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(3, $r, $lvl, $x)) }
        none < old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(3, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize3](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize3](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(3, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(3, $r, $lvl, $x) ==
      old[pre_stabilize3](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Client,TLock (after heap-write@39.3) END 
  
  
  // ------- heap-write BEGIN --------
  
  z.$dualcell_$right := w
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions Client,TLock (after heap-write@40.3) BEGIN 
  
  label pre_stabilize4
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client_interferenceContext_fp($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Client_interferenceSet_df(4, $c, $l, $z, $r, $lvl, $x)) }
        none < old[pre_stabilize4](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
        ($$_m in Client_interferenceSet_hf(4, $c, $l, $z, $r, $lvl, $x)) ==
        ((none < perm($c.$diamond) &&
        none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
        ($$_m in Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize4](Client_state($c, $l, $z, $r, $lvl, $x)) ||
        Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
        old[pre_stabilize4](Client_state($c, $l, $z, $r, $lvl, $x)) &&
        Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) == $$_m &&
        true &&
        true))))
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_interferenceSet_hf(4, $c, $l, $z, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      Client_interferenceReference_hf(4, $c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize4](Client_state($c, $l, $z, $r, $lvl, $x)))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(4, $r, $lvl, $x)) }
        none < old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(4, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize4](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize4](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(4, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(4, $r, $lvl, $x) ==
      old[pre_stabilize4](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Client,TLock (after heap-write@40.3) END 
  
  
  // ------- use-atomic BEGIN --------
  
  label pre_use_atomic0
  assert perm(Client_atomicity_context_fp(c, l, z, r, lvl, x)) == none
  assert $_levelVar_2 > l
  $_levelVar_3 := l
  exhale acc(Client_Z(c), write)
  unfold acc(Client(c, l, z, r, lvl, x), write)
  label transitionPre
  quasihavoc TLock_interferenceContext_fp(r, lvl, x)
  
  // no additional linking required
  
  
  // havoc performed by other front resource
  
  inhale true ==>
    TLock_interferenceReference_hf(4, r, lvl, x) ==
    old[transitionPre](TLock_state(r, lvl, x))
  inhale acc(Client_Z(c), write)
  exhale acc(Client(c, l, z, r, lvl, x), perm(Client(c, l, z, r, lvl, x)))
  
  // ------- havoc BEGIN -------------
  
  exhale acc(z.$dualcell_$_val, write)
  inhale acc(z.$dualcell_$_val, write)
  
  // ------- havoc END ---------------
  
  
  // ------- assert BEGIN ------------
  
  assert acc(z.$dualcell_$_val, write) && true
  a := z.$dualcell_$_val
  
  // ------- assert END --------------
  
  
  // ------- assume BEGIN ------------
  
  inhale a == w
  
  // ------- assume END --------------
  
  
  // ------- assert BEGIN ------------
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  m := TLock_state(r, lvl, x)
  
  // ------- assert END --------------
  
  
  // ------- havoc BEGIN -------------
  
  exhale acc(z.$dualcell_$_own, write)
  inhale acc(z.$dualcell_$_own, write)
  
  // ------- havoc END ---------------
  
  
  // ------- assert BEGIN ------------
  
  assert acc(z.$dualcell_$_own, write) && true
  s2 := z.$dualcell_$_own
  
  // ------- assert END --------------
  
  
  // ------- assume BEGIN ------------
  
  inhale s2 == false
  
  // ------- assume END --------------
  
  
  // ------- call:release BEGIN ------
  
  assert (forall $_m: Int ::
      { ($_m in TLock_interferenceSet_hf(4, r, lvl, x)) }
      ($_m in TLock_interferenceSet_hf(4, r, lvl, x)) ==>
      ($_m in comprehension_85_220()))
  label pre_call
  assert $_levelVar_3 >= 0 && $_levelVar_3 > lvl
  assert true
  exhale acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x)) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write)) &&
    (TLock_state(r, lvl, x) in comprehension_85_220())
  
  // ------- Stabilising regions Client,TLock (within call:release@53.5) BEGIN 
  
  label pre_stabilize5
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize5](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize5](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize5](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize5](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize5](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize5](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (within call:release@53.5) END 
  
  inhale acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 &&
    TLock_state(r, lvl, x) == old[pre_call](TLock_state(r, lvl, x)) + 1)
  
  // ------- call:release END --------
  
  fold acc(Client(c, l, z, r, lvl, x), write)
  assert true
  $_levelVar_4 := $_levelVar_2
  
  // ------- use-atomic END ----------
  
  
  // ------- Stabilising regions Client,TLock (after use-atomic@42.3) BEGIN 
  
  label pre_stabilize6
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client_interferenceContext_fp($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Client_interferenceSet_df(5, $c, $l, $z, $r, $lvl, $x)) }
        none < old[pre_stabilize6](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
        ($$_m in Client_interferenceSet_hf(5, $c, $l, $z, $r, $lvl, $x)) ==
        ((none < perm($c.$diamond) &&
        none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
        ($$_m in Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
        ($$_m ==
        old[pre_stabilize6](Client_state($c, $l, $z, $r, $lvl, $x)) ||
        Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
        old[pre_stabilize6](Client_state($c, $l, $z, $r, $lvl, $x)) &&
        Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) == $$_m &&
        true &&
        true))))
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_interferenceSet_hf(5, $c, $l, $z, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      Client_interferenceReference_hf(5, $c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize6](Client_state($c, $l, $z, $r, $lvl, $x)))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(5, $r, $lvl, $x)) }
        none < old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(5, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize6](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize6](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(5, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(5, $r, $lvl, $x) ==
      old[pre_stabilize6](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Client,TLock (after use-atomic@42.3) END 
  
}

method acquire(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x))
  requires (TLock_state(r, lvl, x) in comprehension_85_220())
  ensures acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == old(TLock_state(r, lvl, x))) &&
    (TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) &&
    acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write))
{
  var $_levelVar_5: Int
  inhale $_levelVar_5 >= 0 && $_levelVar_5 > lvl
  assert $_levelVar_5 >= 0
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale TLock_interferenceSet_hf(5, r, lvl, x) == comprehension_85_220()
  inhale TLock_interferenceReference_hf(5, r, lvl, x) ==
    old(TLock_state(r, lvl, x))
  inhale false
}

method release(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x)) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
  requires (TLock_state(r, lvl, x) in comprehension_85_220())
  ensures acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == old(TLock_state(r, lvl, x)) + 1)
{
  var $_levelVar_6: Int
  inhale $_levelVar_6 >= 0 && $_levelVar_6 > lvl
  assert $_levelVar_6 >= 0
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale TLock_interferenceSet_hf(5, r, lvl, x) == comprehension_85_220()
  inhale TLock_interferenceReference_hf(5, r, lvl, x) ==
    old(TLock_state(r, lvl, x))
  inhale false
}

method $_Client_interpretation_stability_check(c: Ref, l: Int, z: Ref, r: Ref,
  lvl: Int, x: Ref)
{
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale acc(z.$dualcell_$_val, write) && true &&
    (acc(z.$dualcell_$_own, write) && true) &&
    (acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)) &&
    lvl < l &&
    (z.$dualcell_$_own ?
      TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
      acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write) :
      acc(z.$dualcell_$left, write) &&
      z.$dualcell_$left == z.$dualcell_$_val &&
      (acc(z.$dualcell_$right, write) &&
      z.$dualcell_$right == z.$dualcell_$_val))
  
  // ------- Stabilising regions Client,TLock (check stability of region interpretation) BEGIN 
  
  label pre_stabilize7
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize7](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize7](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize7](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize7](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (check stability of region interpretation) END 
  
  assert acc(z.$dualcell_$_val, write) && true &&
    (acc(z.$dualcell_$_own, write) && true) &&
    (acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)) &&
    lvl < l &&
    (z.$dualcell_$_own ?
      TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
      acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write) :
      acc(z.$dualcell_$left, write) &&
      z.$dualcell_$left == z.$dualcell_$_val &&
      (acc(z.$dualcell_$right, write) &&
      z.$dualcell_$right == z.$dualcell_$_val))
}

method $_Client_action_transitivity_check()
{
  var Z: Bool
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState ||
    $_action_n_0_x == aState && $_action_m_0_x == bState && true && Z
  inhale bState == cState ||
    $_action_n_0_y == bState && $_action_m_0_y == cState && true && Z
  assert aState == cState ||
    aState == aState && cState == cState && true && Z
}

method $_TLock_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale acc(x.$memcell_$owner, write) && true &&
    (acc(x.$memcell_$next, write) && true) &&
    ((forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_70_150(x.$memcell_$next)) }
      ($a in comprehension_70_150(x.$memcell_$next)) ==>
      TLock_TICKET_T(r, $a)) &&
    (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_70_150(x.$memcell_$next)) }
      ($a in comprehension_70_150(x.$memcell_$next)) ==>
      acc(TLock_TICKET(r, $a), write))) &&
    x.$memcell_$next >= x.$memcell_$owner
  
  // ------- Stabilising regions Client,TLock (check stability of region interpretation) BEGIN 
  
  label pre_stabilize8
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize8](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize8](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize8](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize8](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (check stability of region interpretation) END 
  
  assert acc(x.$memcell_$owner, write) && true &&
    (acc(x.$memcell_$next, write) && true) &&
    ((forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_70_150(x.$memcell_$next)) }
      ($a in comprehension_70_150(x.$memcell_$next)) ==>
      TLock_TICKET_T(r, $a)) &&
    (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_70_150(x.$memcell_$next)) }
      ($a in comprehension_70_150(x.$memcell_$next)) ==>
      acc(TLock_TICKET(r, $a), write))) &&
    x.$memcell_$next >= x.$memcell_$owner
}

method $_TLock_action_transitivity_check()
{
  var TICKET: Set[Int]
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState ||
    $_action_n_0_x == aState && $_action_m_0_x == bState &&
    $_action_n_0_x < $_action_m_0_x &&
    (comprehension_74_280($_action_n_0_x, $_action_m_0_x) subset TICKET)
  inhale bState == cState ||
    $_action_n_0_y == bState && $_action_m_0_y == cState &&
    $_action_n_0_y < $_action_m_0_y &&
    (comprehension_74_280($_action_n_0_y, $_action_m_0_y) subset TICKET)
  assert aState == cState ||
    aState == aState && cState == cState && aState < cState &&
    (comprehension_74_280(aState, cState) subset TICKET)
}

method $_foo_condition_stability_precondition_check(c: Ref, l: Int, z: Ref,
  r: Ref, lvl: Int, x: Ref, w: Int)
  requires acc(Client(c, l, z, r, lvl, x), write) && (l >= 0 && true) &&
    acc(Client_Z(c), write)
{
  var $_levelVar_7: Int
  inhale $_levelVar_7 >= 0 && $_levelVar_7 > l
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize9
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize9](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize9](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize9](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize9](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize9](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize9](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) END 
  
  assert acc(Client(c, l, z, r, lvl, x), write) && (l >= 0 && true) &&
    acc(Client_Z(c), write)
}

method $_acquire_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x))
{
  var $_levelVar_8: Int
  inhale $_levelVar_8 >= 0 && $_levelVar_8 > lvl
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale TLock_interferenceSet_hf(5, r, lvl, x) == comprehension_85_220()
  inhale TLock_interferenceReference_hf(5, r, lvl, x) ==
    old(TLock_state(r, lvl, x))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize10
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize10](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize10](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize10](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize10](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) END 
  
  assert acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x))
}

method $_release_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x)) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
{
  var $_levelVar_9: Int
  inhale $_levelVar_9 >= 0 && $_levelVar_9 > lvl
  inhale acc(Client_sk_fp(), write) && acc(TLock_sk_fp(), write)
  
  // no init required
  
  
  // no init required
  
  inhale (forall $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref ::acc(Client_interferenceContext_fp($c,
      $l, $z, $r, $lvl, $x), write))
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale TLock_interferenceSet_hf(5, r, lvl, x) == comprehension_85_220()
  inhale TLock_interferenceReference_hf(5, r, lvl, x) ==
    old(TLock_state(r, lvl, x))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize11
  
  // Stabilising all instances of region Client
  quasihavocall $$c: Ref, $$l: Int, $$z: Ref, $$r: Ref, $$lvl: Int, $$x: Ref :: Client($$c,
  $$l, $$z, $$r, $$lvl, $$x)
  exhale acc(Client_sk_fp(), write)
  inhale acc(Client_sk_fp(), write)
  inhale (forperm
      $c: Ref, $l: Int, $z: Ref, $r: Ref, $lvl: Int, $x: Ref [Client($c, $l,
      $z, $r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(Client($c, $l, $z, $r, $lvl, $x))) ==>
      (none < perm($c.$diamond) &&
      none < perm(Client_atomicity_context_fp($c, $l, $z, $r, $lvl, $x)) ==>
      (Client_state($c, $l, $z, $r, $lvl, $x) in
      Client_atomicity_context_hf($c, $l, $z, $r, $lvl, $x))) &&
      (Client_state($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize11](Client_state($c, $l, $z, $r, $lvl, $x)) ||
      Client_sk_$_action_n($c, $l, $z, $r, $lvl, $x) ==
      old[pre_stabilize11](Client_state($c, $l, $z, $r, $lvl, $x)) &&
      Client_sk_$_action_m($c, $l, $z, $r, $lvl, $x) ==
      Client_state($c, $l, $z, $r, $lvl, $x) &&
      true &&
      true))
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize11](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize11](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize11](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_74_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions Client,TLock (check stability of method condition) END 
  
  assert acc(TLock(r, lvl, x), write) &&
    (lvl >= 0 && TLock_state(r, lvl, x) == TLock_state(r, lvl, x)) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
}