domain $Map[U, V]  {
  
  function Map_keys(m: $Map[U, V]): Set[U] 
  
  function Map_card(m: $Map[U, V]): Int 
  
  function Map_lookup(m: $Map[U, V], u: U): V 
  
  function Map_values(m: $Map[U, V]): Set[V] 
  
  function Map_empty(): $Map[U, V] 
  
  function Map_build(m: $Map[U, V], u: U, v: V): $Map[U, V] 
  
  function Map_equal(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_disjoint(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_union(m1: $Map[U, V], m2: $Map[U, V]): $Map[U, V] 
  
  axiom Map_card_non_neg {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      0 <= (Map_card(m): Int))
  }
  
  axiom Map_card_domain {
    (forall m: $Map[U, V] ::
      { |(Map_keys(m): Set[U])| }
      |(Map_keys(m): Set[U])| == (Map_card(m): Int))
  }
  
  axiom Map_values_def {
    (forall m: $Map[U, V], v: V ::
      { (v in (Map_values(m): Set[V])) }
      (v in (Map_values(m): Set[V])) ==
      (exists u: U :: (u in (Map_keys(m): Set[U])) &&
        v == (Map_lookup(m, u): V)))
  }
  
  axiom Map_empty_1 {
    (forall u: U ::
      { (u in (Map_keys((Map_empty(): $Map[U, V])): Set[U])) }
      !((u in (Map_keys((Map_empty(): $Map[U, V])): Set[U]))))
  }
  
  axiom Map_empty_2 {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      ((Map_card(m): Int) == 0) == (m == (Map_empty(): $Map[U, V])) &&
      ((Map_card(m): Int) != 0 ==>
      (exists u: U :: (u in (Map_keys(m): Set[U])))))
  }
  
  axiom Map_build_1 {
    (forall m: $Map[U, V], u1: U, u2: U, v: V ::
      { (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) }
      (u2 == u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u1): V) == v) &&
      (u2 != u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) ==
      (u2 in (Map_keys(m): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u2): V) ==
      (Map_lookup(m, u2): V)))
  }
  
  axiom Map_build_2 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      (u in (Map_keys(m): Set[U])) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int))
  }
  
  axiom Map_build_3 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      !((u in (Map_keys(m): Set[U]))) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int) + 1)
  }
  
  axiom Map_equality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        (u in (Map_keys(m1): Set[U])) == (u in (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_extensionality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_disjoint(m1, m2): Bool) }
      (Map_disjoint(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        !((u in (Map_keys(m1): Set[U]))) ||
        !((u in (Map_keys(m2): Set[U])))))
  }
  
  axiom Map_union_1 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) }
      { (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))) }
      (Map_disjoint(m1, m2): Bool) ==>
      (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) ==
      (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_union_2 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m1): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m1, u): V))
  }
  
  axiom Map_union_3 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m2): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m2, u): V))
  }
}

domain trigger_functions  {
  
  function TLock_TICKET_T($r: Ref, n: Int): Bool 
  
  function TLock_state_T(r: Ref, lvl: Int, x: Ref): Bool 
  
  axiom TLock_TICKET_T_bottom {
    (forall $r: Ref, n: Int ::
      { TLock_TICKET_T($r, n) }
      TLock_TICKET_T($r, n))
  }
}

domain interferenceReference_Domain  {
  
  function TLock_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool 
}

domain interferenceSet_Domain  {
  
  function TLock_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int] 
}

domain atomicity_context_Domain  {
  
  function TLock_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool 
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$next: Int

field $memcell_$owner: Int

function IntSet(): Set[Int]
  ensures (forall n: Int ::(n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int ::0 <= n == (n in result))


function comprehension_12_150($s_0: Int): Set[Int]
  ensures (forall $k: Int ::($k in result) == $k >= $s_0)


function comprehension_29_170(): Set[Int]
  ensures (forall $k: Int ::($k in result) == $k >= 0)


function comprehension_16_280($s_0: Int, $s_1: Int): Set[Int]
  ensures (forall $k: Int ::($k in result) == ($s_0 <= $k && $k < $s_1))


function TLock_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_atomicity_context_fp(r, lvl, x), write)
  ensures [TLock_atomicity_context_df(r, lvl, x), true]


function TLock_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==> ($_m in TLock_interferenceSet_df($p0, r, lvl, x))),
    true]


function TLock_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_interferenceContext_fp(r, lvl, x), write)
  ensures [TLock_interferenceReference_df($p0, r, lvl, x), true]


function TLock_sk_$_action_n(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_sk_$_action_m(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock_sk_fp(), write)


function TLock_out0(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$next)
}

function TLock_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(TLock(r, lvl, x), write)
  ensures [TLock_state_T(r, lvl, x), true]
{
  (unfolding acc(TLock(r, lvl, x), write) in x.$memcell_$owner)
}

predicate TLock_TICKET($r: Ref, n: Int) 

predicate TLock_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate TLock_sk_fp() 

predicate TLock(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$owner, write) && true &&
  (acc(x.$memcell_$next, write) && true) &&
  ((forall $a: Int ::
    { TLock_TICKET_T(r, $a) }
    { ($a in comprehension_12_150(x.$memcell_$next)) }
    ($a in comprehension_12_150(x.$memcell_$next)) ==>
    TLock_TICKET_T(r, $a)) &&
  (forall $a: Int ::
    { TLock_TICKET_T(r, $a) }
    { ($a in comprehension_12_150(x.$memcell_$next)) }
    ($a in comprehension_12_150(x.$memcell_$next)) ==>
    acc(TLock_TICKET(r, $a), write))) &&
  x.$memcell_$next >= x.$memcell_$owner
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_TLock()


method ___silicon_hack407_havoc_all_TLock_interferenceContext_fp()


method makeLock(lvl: Int) returns (ret: Ref, r: Ref)
  requires lvl >= 0
  ensures acc(TLock(r, lvl, ret), write) && (lvl >= 0 && true)
{
  var k: Int
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0
  assert $_levelVar_0 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- inhale BEGIN ------------
  
  inhale acc(ret.$memcell_$next, write) && true &&
    (acc(ret.$memcell_$owner, write) && true)
  
  // ------- inhale END --------------
  
  
  // ------- heap-write BEGIN --------
  
  ret.$memcell_$next := 0
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions TLock (after heap-write@25.3) BEGIN 
  
  label pre_stabilize0
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(1, $r, $lvl, $x)) }
        none < old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(1, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize0](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize0](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(1, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(1, $r, $lvl, $x) ==
      old[pre_stabilize0](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after heap-write@25.3) END 
  
  
  // ------- heap-write BEGIN --------
  
  ret.$memcell_$owner := 0
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions TLock (after heap-write@26.3) BEGIN 
  
  label pre_stabilize
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(2, $r, $lvl, $x)) }
        none < old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(2, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(2, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(2, $r, $lvl, $x) ==
      old[pre_stabilize](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after heap-write@26.3) END 
  
  
  // ------- inhale BEGIN ------------
  
  inhale (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_29_170()) }
      ($a in comprehension_29_170()) ==> TLock_TICKET_T(r, $a)) &&
    (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_29_170()) }
      ($a in comprehension_29_170()) ==> acc(TLock_TICKET(r, $a), write))
  
  // ------- inhale END --------------
  
  
  // ------- fold BEGIN --------------
  
  fold acc(TLock(r, lvl, ret), write)
  assert lvl >= 0 && true
  
  // ------- fold END ----------------
  
}

method acquire(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
{
  var b: Bool
  var t: Int
  var v: Int
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  var $_levelVar_10: Int
  var $_levelVar_11: Int
  var $_levelVar_12: Int
  var $_levelVar_13: Int
  var $_levelVar_14: Int
  var $_levelVar_15: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  assert acc(TLock(r, lvl, x), write)
  
  // ------- Stabilising regions TLock (infer context for open-region) BEGIN 
  
  label pre_stabilize2
  
  // Stabilising single instance of region TLock
  quasihavoc TLock_interferenceContext_fp(r, lvl, x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in TLock_interferenceSet_df(3, r, lvl, x)) }
      ($$_m in TLock_interferenceSet_hf(3, r, lvl, x)) ==
      ((none < perm(r.$diamond) &&
      none < perm(TLock_atomicity_context_fp(r, lvl, x)) ==>
      ($$_m in TLock_atomicity_context_hf(r, lvl, x))) &&
      ($$_m == old[pre_stabilize2](TLock_state(r, lvl, x)) ||
      TLock_sk_$_action_n(r, lvl, x) ==
      old[pre_stabilize2](TLock_state(r, lvl, x)) &&
      TLock_sk_$_action_m(r, lvl, x) == $$_m &&
      TLock_sk_$_action_n(r, lvl, x) < TLock_sk_$_action_m(r, lvl, x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T(r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
        lvl, x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
        lvl, x))) ==>
        perm(TLock_TICKET(r, $$a)) == none))))
  quasihavoc TLock(r, lvl, x)
  inhale (TLock_state(r, lvl, x) in TLock_interferenceSet_hf(3, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale TLock_interferenceReference_hf(3, r, lvl, x) ==
    old[pre_stabilize2](TLock_state(r, lvl, x))
  
  // ------- Stabilising regions TLock (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region0
  assert $_levelVar_1 > lvl
  $_levelVar_2 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- heap-read BEGIN ---------
  
  t := x.$memcell_$next
  
  // ------- heap-read END -----------
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) ==
    old[pre_open_region0](TLock_state(r, lvl, x))
  $_levelVar_3 := $_levelVar_1
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions TLock (after open-region@46.5) BEGIN 
  
  label pre_stabilize3
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(4, $r, $lvl, $x)) }
        none < old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(4, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize3](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize3](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(4, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize3](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(4, $r, $lvl, $x) ==
      old[pre_stabilize3](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@46.5) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region
  assert $_levelVar_3 > lvl
  $_levelVar_4 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- call:CAS BEGIN ----------
  
  assert true
  label pre_call0
  assert $_levelVar_4 >= 0
  assert true
  exhale acc(x.$memcell_$next, write) && true
  b := havoc_Bool()
  inhale (old[pre_call0](x.$memcell_$next) == t ?
      b && (acc(x.$memcell_$next, write) && x.$memcell_$next == t + 1) :
      !b &&
      (acc(x.$memcell_$next, write) &&
      x.$memcell_$next == old[pre_call0](x.$memcell_$next)))
  
  // ------- call:CAS END ------------
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) ==
    old[pre_open_region](TLock_state(r, lvl, x))
  $_levelVar_5 := $_levelVar_3
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions TLock (after open-region@50.5) BEGIN 
  
  label pre_stabilize4
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(5, $r, $lvl, $x)) }
        none < old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(5, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize4](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize4](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(5, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(5, $r, $lvl, $x) ==
      old[pre_stabilize4](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@50.5) END 
  
  
  // ------- while BEGIN -------------
  
  label preWhile0
  while (!b)
    invariant acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
    invariant (b ?
        TLock_TICKET_T(r, t) && acc(TLock_TICKET(r, t), write) &&
        t >= TLock_state(r, lvl, x) :
        true) 
  {
    inhale acc(TLock_sk_fp(), write)
    
    // no init required
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
        $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_atomicity_context_fp($r,
        $lvl, $x), old[preWhile0](perm(TLock_atomicity_context_fp($r, $lvl,
        $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::
        { TLock_atomicity_context_df($r, $lvl, $x) }
        none <
        old[preWhile0](perm(TLock_atomicity_context_fp($r, $lvl, $x))) ==>
        TLock_atomicity_context_hf($r, $lvl, $x) ==
        old[preWhile0](TLock_atomicity_context_hf($r, $lvl, $x)))
    assert acc(TLock(r, lvl, x), write)
    
    // ------- Stabilising regions TLock (infer context for open-region) BEGIN 
    
    label pre_stabilize5
    
    // Stabilising single instance of region TLock
    quasihavoc TLock_interferenceContext_fp(r, lvl, x)
    exhale acc(TLock_sk_fp(), write)
    inhale acc(TLock_sk_fp(), write)
    inhale (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(6, r, lvl, x)) }
        ($$_m in TLock_interferenceSet_hf(6, r, lvl, x)) ==
        ((none < perm(r.$diamond) &&
        none < perm(TLock_atomicity_context_fp(r, lvl, x)) ==>
        ($$_m in TLock_atomicity_context_hf(r, lvl, x))) &&
        ($$_m == old[pre_stabilize5](TLock_state(r, lvl, x)) ||
        TLock_sk_$_action_n(r, lvl, x) ==
        old[pre_stabilize5](TLock_state(r, lvl, x)) &&
        TLock_sk_$_action_m(r, lvl, x) == $$_m &&
        TLock_sk_$_action_n(r, lvl, x) < TLock_sk_$_action_m(r, lvl, x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T(r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
          lvl, x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
          lvl, x))) ==>
          perm(TLock_TICKET(r, $$a)) == none))))
    quasihavoc TLock(r, lvl, x)
    inhale (TLock_state(r, lvl, x) in
      TLock_interferenceSet_hf(6, r, lvl, x))
    
    // havoc performed by other front resource
    
    inhale TLock_interferenceReference_hf(6, r, lvl, x) ==
      old[pre_stabilize5](TLock_state(r, lvl, x))
    
    // ------- Stabilising regions TLock (infer context for open-region) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region2
    assert $_levelVar_5 > lvl
    $_levelVar_6 := lvl
    unfold acc(TLock(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    // ------- heap-read BEGIN ---------
    
    t := x.$memcell_$next
    
    // ------- heap-read END -----------
    
    fold acc(TLock(r, lvl, x), write)
    assert TLock_state(r, lvl, x) ==
      old[pre_open_region2](TLock_state(r, lvl, x))
    $_levelVar_7 := $_levelVar_5
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions TLock (after open-region@46.5) BEGIN 
    
    label pre_stabilize6
    
    // Stabilising all instances of region TLock
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(TLock_sk_fp(), write)
    inhale acc(TLock_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in TLock_interferenceSet_df(7, $r, $lvl, $x)) }
          none < old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
          ($$_m in TLock_interferenceSet_hf(7, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize6](TLock_state($r, $lvl, $x)) ||
          TLock_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize6](TLock_state($r, $lvl, $x)) &&
          TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
          TLock_sk_$_action_n($r, $lvl, $x) <
          TLock_sk_$_action_m($r, $lvl, $x) &&
          (forall $$a: Int ::
            { TLock_TICKET_T($r, $$a) }
            { ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) }
            ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) ==>
            perm(TLock_TICKET($r, $$a)) == none)))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
        (TLock_state($r, $lvl, $x) in
        TLock_interferenceSet_hf(7, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize6](perm(TLock($r, $lvl, $x))) ==>
        TLock_interferenceReference_hf(7, $r, $lvl, $x) ==
        old[pre_stabilize6](TLock_state($r, $lvl, $x)))
    
    // ------- Stabilising regions TLock (after open-region@46.5) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region3
    assert $_levelVar_7 > lvl
    $_levelVar_8 := lvl
    unfold acc(TLock(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    // ------- call:CAS BEGIN ----------
    
    assert true
    label pre_call
    assert $_levelVar_8 >= 0
    assert true
    exhale acc(x.$memcell_$next, write) && true
    b := havoc_Bool()
    inhale (old[pre_call](x.$memcell_$next) == t ?
        b && (acc(x.$memcell_$next, write) && x.$memcell_$next == t + 1) :
        !b &&
        (acc(x.$memcell_$next, write) &&
        x.$memcell_$next == old[pre_call](x.$memcell_$next)))
    
    // ------- call:CAS END ------------
    
    fold acc(TLock(r, lvl, x), write)
    assert TLock_state(r, lvl, x) ==
      old[pre_open_region3](TLock_state(r, lvl, x))
    $_levelVar_9 := $_levelVar_7
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions TLock (after open-region@50.5) BEGIN 
    
    label pre_stabilize7
    
    // Stabilising all instances of region TLock
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(TLock_sk_fp(), write)
    inhale acc(TLock_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in TLock_interferenceSet_df(8, $r, $lvl, $x)) }
          none < old[pre_stabilize7](perm(TLock($r, $lvl, $x))) ==>
          ($$_m in TLock_interferenceSet_hf(8, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize7](TLock_state($r, $lvl, $x)) ||
          TLock_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize7](TLock_state($r, $lvl, $x)) &&
          TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
          TLock_sk_$_action_n($r, $lvl, $x) <
          TLock_sk_$_action_m($r, $lvl, $x) &&
          (forall $$a: Int ::
            { TLock_TICKET_T($r, $$a) }
            { ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) }
            ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) ==>
            perm(TLock_TICKET($r, $$a)) == none)))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize7](perm(TLock($r, $lvl, $x))) ==>
        (TLock_state($r, $lvl, $x) in
        TLock_interferenceSet_hf(8, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize7](perm(TLock($r, $lvl, $x))) ==>
        TLock_interferenceReference_hf(8, $r, $lvl, $x) ==
        old[pre_stabilize7](TLock_state($r, $lvl, $x)))
    
    // ------- Stabilising regions TLock (after open-region@50.5) END 
    
    assert $_levelVar_9 == $_levelVar_5
  }
  $_levelVar_10 := $_levelVar_5
  
  // ------- while END ---------------
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region4
  assert $_levelVar_10 > lvl
  $_levelVar_11 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- heap-read BEGIN ---------
  
  v := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) ==
    old[pre_open_region4](TLock_state(r, lvl, x))
  $_levelVar_12 := $_levelVar_10
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions TLock (after open-region@60.5) BEGIN 
  
  label pre_stabilize8
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(9, $r, $lvl, $x)) }
        none < old[pre_stabilize8](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(9, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize8](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize8](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(9, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(9, $r, $lvl, $x) ==
      old[pre_stabilize8](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@60.5) END 
  
  
  // ------- while BEGIN -------------
  
  label preWhile
  while (v < t)
    invariant acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) &&
      (TLock_TICKET_T(r, t) && acc(TLock_TICKET(r, t), write))
    invariant t >= TLock_state(r, lvl, x) && TLock_state(r, lvl, x) >= v 
  {
    inhale acc(TLock_sk_fp(), write)
    
    // no init required
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
        $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_atomicity_context_fp($r,
        $lvl, $x), old[preWhile](perm(TLock_atomicity_context_fp($r, $lvl, $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::
        { TLock_atomicity_context_df($r, $lvl, $x) }
        none <
        old[preWhile](perm(TLock_atomicity_context_fp($r, $lvl, $x))) ==>
        TLock_atomicity_context_hf($r, $lvl, $x) ==
        old[preWhile](TLock_atomicity_context_hf($r, $lvl, $x)))
    assert acc(TLock(r, lvl, x), write)
    
    // ------- Stabilising regions TLock (infer context for open-region) BEGIN 
    
    label pre_stabilize9
    
    // Stabilising single instance of region TLock
    quasihavoc TLock_interferenceContext_fp(r, lvl, x)
    exhale acc(TLock_sk_fp(), write)
    inhale acc(TLock_sk_fp(), write)
    inhale (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(10, r, lvl, x)) }
        ($$_m in TLock_interferenceSet_hf(10, r, lvl, x)) ==
        ((none < perm(r.$diamond) &&
        none < perm(TLock_atomicity_context_fp(r, lvl, x)) ==>
        ($$_m in TLock_atomicity_context_hf(r, lvl, x))) &&
        ($$_m == old[pre_stabilize9](TLock_state(r, lvl, x)) ||
        TLock_sk_$_action_n(r, lvl, x) ==
        old[pre_stabilize9](TLock_state(r, lvl, x)) &&
        TLock_sk_$_action_m(r, lvl, x) == $$_m &&
        TLock_sk_$_action_n(r, lvl, x) < TLock_sk_$_action_m(r, lvl, x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T(r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
          lvl, x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
          lvl, x))) ==>
          perm(TLock_TICKET(r, $$a)) == none))))
    quasihavoc TLock(r, lvl, x)
    inhale (TLock_state(r, lvl, x) in
      TLock_interferenceSet_hf(10, r, lvl, x))
    
    // havoc performed by other front resource
    
    inhale TLock_interferenceReference_hf(10, r, lvl, x) ==
      old[pre_stabilize9](TLock_state(r, lvl, x))
    
    // ------- Stabilising regions TLock (infer context for open-region) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region5
    assert $_levelVar_12 > lvl
    $_levelVar_13 := lvl
    unfold acc(TLock(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    // ------- heap-read BEGIN ---------
    
    v := x.$memcell_$owner
    
    // ------- heap-read END -----------
    
    fold acc(TLock(r, lvl, x), write)
    assert TLock_state(r, lvl, x) ==
      old[pre_open_region5](TLock_state(r, lvl, x))
    $_levelVar_14 := $_levelVar_12
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions TLock (after open-region@60.5) BEGIN 
    
    label pre_stabilize10
    
    // Stabilising all instances of region TLock
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(TLock_sk_fp(), write)
    inhale acc(TLock_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in TLock_interferenceSet_df(11, $r, $lvl, $x)) }
          none < old[pre_stabilize10](perm(TLock($r, $lvl, $x))) ==>
          ($$_m in TLock_interferenceSet_hf(11, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize10](TLock_state($r, $lvl, $x)) ||
          TLock_sk_$_action_n($r, $lvl, $x) ==
          old[pre_stabilize10](TLock_state($r, $lvl, $x)) &&
          TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
          TLock_sk_$_action_n($r, $lvl, $x) <
          TLock_sk_$_action_m($r, $lvl, $x) &&
          (forall $$a: Int ::
            { TLock_TICKET_T($r, $$a) }
            { ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) }
            ($$a in
            comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
            $lvl, $x))) ==>
            perm(TLock_TICKET($r, $$a)) == none)))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize10](perm(TLock($r, $lvl, $x))) ==>
        (TLock_state($r, $lvl, $x) in
        TLock_interferenceSet_hf(11, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
        old[pre_stabilize10](perm(TLock($r, $lvl, $x))) ==>
        TLock_interferenceReference_hf(11, $r, $lvl, $x) ==
        old[pre_stabilize10](TLock_state($r, $lvl, $x)))
    
    // ------- Stabilising regions TLock (after open-region@60.5) END 
    
    assert $_levelVar_14 == $_levelVar_12
  }
  $_levelVar_15 := $_levelVar_12
  
  // ------- while END ---------------
  
}

method release(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
  ensures acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
{
  var v: Int
  var $_levelVar_16: Int
  var $_levelVar_17: Int
  var $_levelVar_18: Int
  var $_levelVar_19: Int
  var $_levelVar_20: Int
  inhale $_levelVar_16 >= 0 && $_levelVar_16 > lvl
  assert $_levelVar_16 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  assert acc(TLock(r, lvl, x), write)
  
  // ------- Stabilising regions TLock (infer context for open-region) BEGIN 
  
  label pre_stabilize11
  
  // Stabilising single instance of region TLock
  quasihavoc TLock_interferenceContext_fp(r, lvl, x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in TLock_interferenceSet_df(12, r, lvl, x)) }
      ($$_m in TLock_interferenceSet_hf(12, r, lvl, x)) ==
      ((none < perm(r.$diamond) &&
      none < perm(TLock_atomicity_context_fp(r, lvl, x)) ==>
      ($$_m in TLock_atomicity_context_hf(r, lvl, x))) &&
      ($$_m == old[pre_stabilize11](TLock_state(r, lvl, x)) ||
      TLock_sk_$_action_n(r, lvl, x) ==
      old[pre_stabilize11](TLock_state(r, lvl, x)) &&
      TLock_sk_$_action_m(r, lvl, x) == $$_m &&
      TLock_sk_$_action_n(r, lvl, x) < TLock_sk_$_action_m(r, lvl, x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T(r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
        lvl, x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n(r, lvl, x), TLock_sk_$_action_m(r,
        lvl, x))) ==>
        perm(TLock_TICKET(r, $$a)) == none))))
  quasihavoc TLock(r, lvl, x)
  inhale (TLock_state(r, lvl, x) in
    TLock_interferenceSet_hf(12, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale TLock_interferenceReference_hf(12, r, lvl, x) ==
    old[pre_stabilize11](TLock_state(r, lvl, x))
  
  // ------- Stabilising regions TLock (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region6
  assert $_levelVar_16 > lvl
  $_levelVar_17 := lvl
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- heap-read BEGIN ---------
  
  v := x.$memcell_$owner
  
  // ------- heap-read END -----------
  
  fold acc(TLock(r, lvl, x), write)
  assert TLock_state(r, lvl, x) ==
    old[pre_open_region6](TLock_state(r, lvl, x))
  $_levelVar_18 := $_levelVar_16
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions TLock (after open-region@74.3) BEGIN 
  
  label pre_stabilize12
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(13, $r, $lvl, $x)) }
        none < old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(13, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize12](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize12](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(13, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize12](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(13, $r, $lvl, $x) ==
      old[pre_stabilize12](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after open-region@74.3) END 
  
  
  // ------- use-atomic BEGIN --------
  
  label pre_use_atomic0
  assert perm(TLock_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_18 > lvl
  $_levelVar_19 := lvl
  exhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) &&
    acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  unfold acc(TLock(r, lvl, x), write)
  
  // no interference context translation needed
  
  inhale TLock_TICKET_T(r, old(TLock_state(r, lvl, x))) &&
    acc(TLock_TICKET(r, old(TLock_state(r, lvl, x))), write)
  exhale acc(TLock(r, lvl, x), perm(TLock(r, lvl, x)))
  
  // ------- heap-write BEGIN --------
  
  x.$memcell_$owner := v + 1
  
  // ------- heap-write END ----------
  
  inhale perm(TLock_TICKET(r, old(TLock_state(r, lvl, x)))) <= write
  fold acc(TLock(r, lvl, x), write)
  assert old[pre_use_atomic0](TLock_state(r, lvl, x)) ==
    TLock_state(r, lvl, x) ||
    old[pre_use_atomic0](TLock_state(r, lvl, x)) < TLock_state(r, lvl, x) &&
    (forall $a: Int ::($a in
      comprehension_16_280(old[pre_use_atomic0](TLock_state(r, lvl, x)), TLock_state(r,
      lvl, x))) ==>
      $a == old(TLock_state(r, lvl, x)))
  $_levelVar_20 := $_levelVar_18
  
  // ------- use-atomic END ----------
  
  
  // ------- Stabilising regions TLock (after use-atomic@78.3) BEGIN 
  
  label pre_stabilize13
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in TLock_interferenceSet_df(14, $r, $lvl, $x)) }
        none < old[pre_stabilize13](perm(TLock($r, $lvl, $x))) ==>
        ($$_m in TLock_interferenceSet_hf(14, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in TLock_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize13](TLock_state($r, $lvl, $x)) ||
        TLock_sk_$_action_n($r, $lvl, $x) ==
        old[pre_stabilize13](TLock_state($r, $lvl, $x)) &&
        TLock_sk_$_action_m($r, $lvl, $x) == $$_m &&
        TLock_sk_$_action_n($r, $lvl, $x) <
        TLock_sk_$_action_m($r, $lvl, $x) &&
        (forall $$a: Int ::
          { TLock_TICKET_T($r, $$a) }
          { ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) }
          ($$a in
          comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
          $lvl, $x))) ==>
          perm(TLock_TICKET($r, $$a)) == none)))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize13](perm(TLock($r, $lvl, $x))) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_interferenceSet_hf(14, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize13](perm(TLock($r, $lvl, $x))) ==>
      TLock_interferenceReference_hf(14, $r, $lvl, $x) ==
      old[pre_stabilize13](TLock_state($r, $lvl, $x)))
  
  // ------- Stabilising regions TLock (after use-atomic@78.3) END 
  
}

method CAS(x: Ref, now: Int, thn: Int) returns (ret: Bool)
  requires acc(x.$memcell_$next, write) && true
  ensures (old(x.$memcell_$next) == now ?
      ret && (acc(x.$memcell_$next, write) && x.$memcell_$next == thn) :
      !ret &&
      (acc(x.$memcell_$next, write) &&
      x.$memcell_$next == old(x.$memcell_$next)))


method $_TLock_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale acc(x.$memcell_$owner, write) && true &&
    (acc(x.$memcell_$next, write) && true) &&
    ((forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_12_150(x.$memcell_$next)) }
      ($a in comprehension_12_150(x.$memcell_$next)) ==>
      TLock_TICKET_T(r, $a)) &&
    (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_12_150(x.$memcell_$next)) }
      ($a in comprehension_12_150(x.$memcell_$next)) ==>
      acc(TLock_TICKET(r, $a), write))) &&
    x.$memcell_$next >= x.$memcell_$owner
  
  // ------- Stabilising regions TLock (check stability of region interpretation) BEGIN 
  
  label pre_stabilize14
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize14](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize14](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize14](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of region interpretation) END 
  
  assert acc(x.$memcell_$owner, write) && true &&
    (acc(x.$memcell_$next, write) && true) &&
    ((forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_12_150(x.$memcell_$next)) }
      ($a in comprehension_12_150(x.$memcell_$next)) ==>
      TLock_TICKET_T(r, $a)) &&
    (forall $a: Int ::
      { TLock_TICKET_T(r, $a) }
      { ($a in comprehension_12_150(x.$memcell_$next)) }
      ($a in comprehension_12_150(x.$memcell_$next)) ==>
      acc(TLock_TICKET(r, $a), write))) &&
    x.$memcell_$next >= x.$memcell_$owner
}

method $_TLock_action_transitivity_check()
{
  var TICKET: Set[Int]
  var $_action_n_0_x: Int
  var $_action_m_0_x: Int
  var $_action_n_0_y: Int
  var $_action_m_0_y: Int
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState ||
    $_action_n_0_x == aState && $_action_m_0_x == bState &&
    $_action_n_0_x < $_action_m_0_x &&
    (comprehension_16_280($_action_n_0_x, $_action_m_0_x) subset TICKET)
  inhale bState == cState ||
    $_action_n_0_y == bState && $_action_m_0_y == cState &&
    $_action_n_0_y < $_action_m_0_y &&
    (comprehension_16_280($_action_n_0_y, $_action_m_0_y) subset TICKET)
  assert aState == cState ||
    aState == aState && cState == cState && aState < cState &&
    (comprehension_16_280(aState, cState) subset TICKET)
}

method $_makeLock_condition_stability_precondition_check(lvl: Int, ret: Ref,
  r: Ref)
  requires lvl >= 0
{
  var $_levelVar_22: Int
  inhale $_levelVar_22 >= 0
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize15
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize15](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize15](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize15](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  assert lvl >= 0
}

method $_acquire_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
{
  var $_levelVar_23: Int
  var b: Bool
  var t: Int
  var v: Int
  inhale $_levelVar_23 >= 0 && $_levelVar_23 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize16
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize16](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize16](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize16](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true)
}

method $_release_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
{
  var $_levelVar_24: Int
  var v: Int
  inhale $_levelVar_24 >= 0 && $_levelVar_24 > lvl
  inhale acc(TLock_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(TLock_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions TLock (check stability of method condition) BEGIN 
  
  label pre_stabilize17
  
  // Stabilising all instances of region TLock
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: TLock($$r, $$lvl, $$x)
  exhale acc(TLock_sk_fp(), write)
  inhale acc(TLock_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [TLock($r, $lvl, $x)] :: none <
      old[pre_stabilize17](perm(TLock($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(TLock_atomicity_context_fp($r, $lvl, $x)) ==>
      (TLock_state($r, $lvl, $x) in
      TLock_atomicity_context_hf($r, $lvl, $x))) &&
      (TLock_state($r, $lvl, $x) ==
      old[pre_stabilize17](TLock_state($r, $lvl, $x)) ||
      TLock_sk_$_action_n($r, $lvl, $x) ==
      old[pre_stabilize17](TLock_state($r, $lvl, $x)) &&
      TLock_sk_$_action_m($r, $lvl, $x) == TLock_state($r, $lvl, $x) &&
      TLock_sk_$_action_n($r, $lvl, $x) < TLock_sk_$_action_m($r, $lvl, $x) &&
      (forall $$a: Int ::
        { TLock_TICKET_T($r, $$a) }
        { ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) }
        ($$a in
        comprehension_16_280(TLock_sk_$_action_n($r, $lvl, $x), TLock_sk_$_action_m($r,
        $lvl, $x))) ==>
        perm(TLock_TICKET($r, $$a)) == none)))
  
  // ------- Stabilising regions TLock (check stability of method condition) END 
  
  assert acc(TLock(r, lvl, x), write) && (lvl >= 0 && true) &&
    (TLock_TICKET_T(r, TLock_state(r, lvl, x)) &&
    acc(TLock_TICKET(r, TLock_state(r, lvl, x)), write))
}