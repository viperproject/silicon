domain $Map[U, V]  {
  
  function Map_keys(m: $Map[U, V]): Set[U] 
  
  function Map_card(m: $Map[U, V]): Int 
  
  function Map_lookup(m: $Map[U, V], u: U): V 
  
  function Map_values(m: $Map[U, V]): Set[V] 
  
  function Map_empty(): $Map[U, V] 
  
  function Map_build(m: $Map[U, V], u: U, v: V): $Map[U, V] 
  
  function Map_equal(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_disjoint(m1: $Map[U, V], m2: $Map[U, V]): Bool 
  
  function Map_union(m1: $Map[U, V], m2: $Map[U, V]): $Map[U, V] 
  
  axiom Map_card_non_neg {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      0 <= (Map_card(m): Int))
  }
  
  axiom Map_card_domain {
    (forall m: $Map[U, V] ::
      { |(Map_keys(m): Set[U])| }
      |(Map_keys(m): Set[U])| == (Map_card(m): Int))
  }
  
  axiom Map_values_def {
    (forall m: $Map[U, V], v: V ::
      { (v in (Map_values(m): Set[V])) }
      (v in (Map_values(m): Set[V])) ==
      (exists u: U :: (u in (Map_keys(m): Set[U])) &&
        v == (Map_lookup(m, u): V)))
  }
  
  axiom Map_empty_1 {
    (forall u: U ::
      { (u in (Map_keys((Map_empty(): $Map[U, V])): Set[U])) }
      !((u in (Map_keys((Map_empty(): $Map[U, V])): Set[U]))))
  }
  
  axiom Map_empty_2 {
    (forall m: $Map[U, V] ::
      { (Map_card(m): Int) }
      ((Map_card(m): Int) == 0) == (m == (Map_empty(): $Map[U, V])) &&
      ((Map_card(m): Int) != 0 ==>
      (exists u: U :: (u in (Map_keys(m): Set[U])))))
  }
  
  axiom Map_build_1 {
    (forall m: $Map[U, V], u1: U, u2: U, v: V ::
      { (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) }
      (u2 == u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u1): V) == v) &&
      (u2 != u1 ==>
      (u2 in (Map_keys((Map_build(m, u1, v): $Map[U, V])): Set[U])) ==
      (u2 in (Map_keys(m): Set[U])) &&
      (Map_lookup((Map_build(m, u1, v): $Map[U, V]), u2): V) ==
      (Map_lookup(m, u2): V)))
  }
  
  axiom Map_build_2 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      (u in (Map_keys(m): Set[U])) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int))
  }
  
  axiom Map_build_3 {
    (forall m: $Map[U, V], u: U, v: V ::
      { (Map_card((Map_build(m, u, v): $Map[U, V])): Int) }
      !((u in (Map_keys(m): Set[U]))) ==>
      (Map_card((Map_build(m, u, v): $Map[U, V])): Int) ==
      (Map_card(m): Int) + 1)
  }
  
  axiom Map_equality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        (u in (Map_keys(m1): Set[U])) == (u in (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_extensionality {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_equal(m1, m2): Bool) }
      (Map_equal(m1, m2): Bool) ==> m1 == m2)
  }
  
  axiom Map_disjoint_def {
    (forall m1: $Map[U, V], m2: $Map[U, V] ::
      { (Map_disjoint(m1, m2): Bool) }
      (Map_disjoint(m1, m2): Bool) ==
      (forall u: U ::
        { (u in (Map_keys(m1): Set[U])) }
        { (u in (Map_keys(m2): Set[U])) }
        !((u in (Map_keys(m1): Set[U]))) ||
        !((u in (Map_keys(m2): Set[U])))))
  }
  
  axiom Map_union_1 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) }
      { (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))) }
      (Map_disjoint(m1, m2): Bool) ==>
      (u in (Map_keys((Map_union(m1, m2): $Map[U, V])): Set[U])) ==
      (u in ((Map_keys(m1): Set[U]) union (Map_keys(m2): Set[U]))))
  }
  
  axiom Map_union_2 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m1): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m1, u): V))
  }
  
  axiom Map_union_3 {
    (forall m1: $Map[U, V], m2: $Map[U, V], u: U ::
      { (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) }
      (Map_disjoint(m1, m2): Bool) && (u in (Map_keys(m2): Set[U])) ==>
      (Map_lookup((Map_union(m1, m2): $Map[U, V]), u): V) ==
      (Map_lookup(m2, u): V))
  }
}

domain trigger_functions  {
  
  function Join_state_T(r: Ref, lvl: Int, x: Ref): Bool 
}

domain interferenceReference_Domain  {
  
  function Join_interferenceReference_df($p0: Int, r: Ref, lvl: Int, x: Ref): Bool 
}

domain interferenceSet_Domain  {
  
  function Join_interferenceSet_df($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int] 
}

domain atomicity_context_Domain  {
  
  function Join_atomicity_context_df(r: Ref, lvl: Int, x: Ref): Bool 
}

field $diamond: Int

field $stepFrom_int: Int

field $stepTo_int: Int

field $memcell_$f: Int

function IntSet(): Set[Int]
  ensures (forall n: Int ::(n in result))


function NatSet(): Set[Int]
  ensures (forall n: Int ::0 <= n == (n in result))


function Join_atomicity_context_hf(r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Join_atomicity_context_fp(r, lvl, x), write)
  ensures [Join_atomicity_context_df(r, lvl, x), true]


function Join_interferenceSet_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Set[Int]
  requires acc(Join_interferenceContext_fp(r, lvl, x), write)
  ensures [(forall $_m: Int ::
      { ($_m in result) }
      ($_m in result) ==> ($_m in Join_interferenceSet_df($p0, r, lvl, x))),
    true]


function Join_interferenceReference_hf($p0: Int, r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join_interferenceContext_fp(r, lvl, x), write)
  ensures [Join_interferenceReference_df($p0, r, lvl, x), true]


function Join_state(r: Ref, lvl: Int, x: Ref): Int
  requires acc(Join(r, lvl, x), write)
  ensures [Join_state_T(r, lvl, x), true]
{
  (unfolding acc(Join(r, lvl, x), write) in x.$memcell_$f)
}

predicate Join_SET($r: Ref) 

predicate Join_atomicity_context_fp(r: Ref, lvl: Int, x: Ref) 

predicate Join_interferenceContext_fp(r: Ref, lvl: Int, x: Ref) 

predicate Join_sk_fp() 

predicate Join(r: Ref, lvl: Int, x: Ref) {
  acc(x.$memcell_$f, write) && true &&
  (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

method havoc_Bool() returns ($r: Bool)


method havoc_Int() returns ($r: Int)


method havoc_Ref() returns ($r: Ref)


method ___silicon_hack407_havoc_all_Join()


method ___silicon_hack407_havoc_all_Join_interferenceContext_fp()


method makeJoin(lvl: Int) returns (ret: Ref, r: Ref)
  requires lvl >= 0
  ensures acc(Join(r, lvl, ret), write) && (lvl >= 0 && true) &&
    acc(Join_SET(r), write)
{
  var $_levelVar_0: Int
  inhale $_levelVar_0 >= 0
  assert $_levelVar_0 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- inhale BEGIN ------------
  
  inhale acc(ret.$memcell_$f, write) && true
  
  // ------- inhale END --------------
  
  
  // ------- heap-write BEGIN --------
  
  ret.$memcell_$f := 0
  
  // ------- heap-write END ----------
  
  
  // ------- Stabilising regions Join (after heap-write@19.3) BEGIN 
  
  label pre_stabilize0
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(1, $r, $lvl, $x)) }
        none < old[pre_stabilize0](perm(Join($r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(1, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize0](Join_state($r, $lvl, $x)) ||
        0 == old[pre_stabilize0](Join_state($r, $lvl, $x)) && 1 == $$_m &&
        true &&
        true))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(Join($r, $lvl, $x))) ==>
      (Join_state($r, $lvl, $x) in
      Join_interferenceSet_hf(1, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize0](perm(Join($r, $lvl, $x))) ==>
      Join_interferenceReference_hf(1, $r, $lvl, $x) ==
      old[pre_stabilize0](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after heap-write@19.3) END 
  
  
  // ------- inhale BEGIN ------------
  
  inhale acc(Join_SET(r), write)
  
  // ------- inhale END --------------
  
  
  // ------- fold BEGIN --------------
  
  fold acc(Join(r, lvl, ret), write)
  assert lvl >= 0 && true
  
  // ------- fold END ----------------
  
}

method set_to_one(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_SET(r), write)
  ensures acc(Join(r, lvl, x), write) &&
    (lvl >= 0 && Join_state(r, lvl, x) == 1) &&
    acc(Join_SET(r), write)
{
  var $_levelVar_1: Int
  var $_levelVar_2: Int
  var $_levelVar_3: Int
  inhale $_levelVar_1 >= 0 && $_levelVar_1 > lvl
  assert $_levelVar_1 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  assert acc(Join(r, lvl, x), write)
  
  // ------- Stabilising regions Join (infer context for use-atomic) BEGIN 
  
  label pre_stabilize
  
  // Stabilising single instance of region Join
  quasihavoc Join_interferenceContext_fp(r, lvl, x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Join_interferenceSet_df(2, r, lvl, x)) }
      ($$_m in Join_interferenceSet_hf(2, r, lvl, x)) ==
      ((none < perm(r.$diamond) &&
      none < perm(Join_atomicity_context_fp(r, lvl, x)) ==>
      ($$_m in Join_atomicity_context_hf(r, lvl, x))) &&
      ($$_m == old[pre_stabilize](Join_state(r, lvl, x)) ||
      0 == old[pre_stabilize](Join_state(r, lvl, x)) && 1 == $$_m && true &&
      true)))
  quasihavoc Join(r, lvl, x)
  inhale (Join_state(r, lvl, x) in Join_interferenceSet_hf(2, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Join_interferenceReference_hf(2, r, lvl, x) ==
    old[pre_stabilize](Join_state(r, lvl, x))
  
  // ------- Stabilising regions Join (infer context for use-atomic) END 
  
  
  // ------- use-atomic BEGIN --------
  
  label pre_use_atomic0
  assert perm(Join_atomicity_context_fp(r, lvl, x)) == none
  assert $_levelVar_1 > lvl
  $_levelVar_2 := lvl
  exhale acc(Join_SET(r), write)
  unfold acc(Join(r, lvl, x), write)
  
  // no interference context translation needed
  
  inhale acc(Join_SET(r), write)
  exhale acc(Join(r, lvl, x), perm(Join(r, lvl, x)))
  
  // ------- heap-write BEGIN --------
  
  x.$memcell_$f := 1
  
  // ------- heap-write END ----------
  
  fold acc(Join(r, lvl, x), write)
  assert old[pre_use_atomic0](Join_state(r, lvl, x)) ==
    Join_state(r, lvl, x) ||
    0 == old[pre_use_atomic0](Join_state(r, lvl, x)) &&
    1 == Join_state(r, lvl, x)
  $_levelVar_3 := $_levelVar_1
  
  // ------- use-atomic END ----------
  
  
  // ------- Stabilising regions Join (after use-atomic@31.3) BEGIN 
  
  label pre_stabilize2
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(3, $r, $lvl, $x)) }
        none < old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(3, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize2](Join_state($r, $lvl, $x)) ||
        0 == old[pre_stabilize2](Join_state($r, $lvl, $x)) && 1 == $$_m &&
        true &&
        true))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==>
      (Join_state($r, $lvl, $x) in
      Join_interferenceSet_hf(3, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize2](perm(Join($r, $lvl, $x))) ==>
      Join_interferenceReference_hf(3, $r, $lvl, $x) ==
      old[pre_stabilize2](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after use-atomic@31.3) END 
  
}

method wait(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
  ensures acc(Join(r, lvl, x), write) &&
    (lvl >= 0 && Join_state(r, lvl, x) == 1)
{
  var v: Int
  var $_levelVar_4: Int
  var $_levelVar_5: Int
  var $_levelVar_6: Int
  var $_levelVar_7: Int
  var $_levelVar_8: Int
  var $_levelVar_9: Int
  inhale $_levelVar_4 >= 0 && $_levelVar_4 > lvl
  assert $_levelVar_4 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  assert acc(Join(r, lvl, x), write)
  
  // ------- Stabilising regions Join (infer context for open-region) BEGIN 
  
  label pre_stabilize3
  
  // Stabilising single instance of region Join
  quasihavoc Join_interferenceContext_fp(r, lvl, x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forall $$_m: Int ::
      { ($$_m in Join_interferenceSet_df(4, r, lvl, x)) }
      ($$_m in Join_interferenceSet_hf(4, r, lvl, x)) ==
      ((none < perm(r.$diamond) &&
      none < perm(Join_atomicity_context_fp(r, lvl, x)) ==>
      ($$_m in Join_atomicity_context_hf(r, lvl, x))) &&
      ($$_m == old[pre_stabilize3](Join_state(r, lvl, x)) ||
      0 == old[pre_stabilize3](Join_state(r, lvl, x)) && 1 == $$_m && true &&
      true)))
  quasihavoc Join(r, lvl, x)
  inhale (Join_state(r, lvl, x) in Join_interferenceSet_hf(4, r, lvl, x))
  
  // havoc performed by other front resource
  
  inhale Join_interferenceReference_hf(4, r, lvl, x) ==
    old[pre_stabilize3](Join_state(r, lvl, x))
  
  // ------- Stabilising regions Join (infer context for open-region) END 
  
  
  // ------- open-region BEGIN -------
  
  label pre_open_region0
  assert $_levelVar_4 > lvl
  $_levelVar_5 := lvl
  unfold acc(Join(r, lvl, x), write)
  
  // no interference context translation needed
  
  
  // ------- heap-read BEGIN ---------
  
  v := x.$memcell_$f
  
  // ------- heap-read END -----------
  
  fold acc(Join(r, lvl, x), write)
  assert Join_state(r, lvl, x) ==
    old[pre_open_region0](Join_state(r, lvl, x))
  $_levelVar_6 := $_levelVar_4
  
  // ------- open-region END ---------
  
  
  // ------- Stabilising regions Join (after open-region@47.5) BEGIN 
  
  label pre_stabilize4
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$r,
  $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(5, $r, $lvl, $x)) }
        none < old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==>
        ($$_m in Join_interferenceSet_hf(5, $r, $lvl, $x)) ==
        ((none < perm($r.$diamond) &&
        none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
        ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) &&
        ($$_m == old[pre_stabilize4](Join_state($r, $lvl, $x)) ||
        0 == old[pre_stabilize4](Join_state($r, $lvl, $x)) && 1 == $$_m &&
        true &&
        true))))
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==>
      (Join_state($r, $lvl, $x) in
      Join_interferenceSet_hf(5, $r, $lvl, $x)))
  
  // havoc performed by other front resource
  
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize4](perm(Join($r, $lvl, $x))) ==>
      Join_interferenceReference_hf(5, $r, $lvl, $x) ==
      old[pre_stabilize4](Join_state($r, $lvl, $x)))
  
  // ------- Stabilising regions Join (after open-region@47.5) END 
  
  
  // ------- while BEGIN -------------
  
  label preWhile0
  while (v == 0)
    invariant acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
    invariant (v == 0 ?
        Join_state(r, lvl, x) >= 0 :
        Join_state(r, lvl, x) == 1) 
  {
    inhale acc(Join_sk_fp(), write)
    
    // no init required
    
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
        $lvl, $x), write))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_atomicity_context_fp($r,
        $lvl, $x), old[preWhile0](perm(Join_atomicity_context_fp($r, $lvl, $x)))))
    inhale (forall $r: Ref, $lvl: Int, $x: Ref ::
        { Join_atomicity_context_df($r, $lvl, $x) }
        none <
        old[preWhile0](perm(Join_atomicity_context_fp($r, $lvl, $x))) ==>
        Join_atomicity_context_hf($r, $lvl, $x) ==
        old[preWhile0](Join_atomicity_context_hf($r, $lvl, $x)))
    assert acc(Join(r, lvl, x), write)
    
    // ------- Stabilising regions Join (infer context for open-region) BEGIN 
    
    label pre_stabilize5
    
    // Stabilising single instance of region Join
    quasihavoc Join_interferenceContext_fp(r, lvl, x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forall $$_m: Int ::
        { ($$_m in Join_interferenceSet_df(6, r, lvl, x)) }
        ($$_m in Join_interferenceSet_hf(6, r, lvl, x)) ==
        ((none < perm(r.$diamond) &&
        none < perm(Join_atomicity_context_fp(r, lvl, x)) ==>
        ($$_m in Join_atomicity_context_hf(r, lvl, x))) &&
        ($$_m == old[pre_stabilize5](Join_state(r, lvl, x)) ||
        0 == old[pre_stabilize5](Join_state(r, lvl, x)) && 1 == $$_m &&
        true &&
        true)))
    quasihavoc Join(r, lvl, x)
    inhale (Join_state(r, lvl, x) in Join_interferenceSet_hf(6, r, lvl, x))
    
    // havoc performed by other front resource
    
    inhale Join_interferenceReference_hf(6, r, lvl, x) ==
      old[pre_stabilize5](Join_state(r, lvl, x))
    
    // ------- Stabilising regions Join (infer context for open-region) END 
    
    
    // ------- open-region BEGIN -------
    
    label pre_open_region
    assert $_levelVar_6 > lvl
    $_levelVar_7 := lvl
    unfold acc(Join(r, lvl, x), write)
    
    // no interference context translation needed
    
    
    // ------- heap-read BEGIN ---------
    
    v := x.$memcell_$f
    
    // ------- heap-read END -----------
    
    fold acc(Join(r, lvl, x), write)
    assert Join_state(r, lvl, x) ==
      old[pre_open_region](Join_state(r, lvl, x))
    $_levelVar_8 := $_levelVar_6
    
    // ------- open-region END ---------
    
    
    // ------- Stabilising regions Join (after open-region@47.5) BEGIN 
    
    label pre_stabilize6
    
    // Stabilising all instances of region Join
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join_interferenceContext_fp($$r,
    $$lvl, $$x)
    exhale acc(Join_sk_fp(), write)
    inhale acc(Join_sk_fp(), write)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: (forall $$_m: Int ::
          { ($$_m in Join_interferenceSet_df(7, $r, $lvl, $x)) }
          none < old[pre_stabilize6](perm(Join($r, $lvl, $x))) ==>
          ($$_m in Join_interferenceSet_hf(7, $r, $lvl, $x)) ==
          ((none < perm($r.$diamond) &&
          none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
          ($$_m in Join_atomicity_context_hf($r, $lvl, $x))) &&
          ($$_m == old[pre_stabilize6](Join_state($r, $lvl, $x)) ||
          0 == old[pre_stabilize6](Join_state($r, $lvl, $x)) && 1 == $$_m &&
          true &&
          true))))
    quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
        old[pre_stabilize6](perm(Join($r, $lvl, $x))) ==>
        (Join_state($r, $lvl, $x) in
        Join_interferenceSet_hf(7, $r, $lvl, $x)))
    
    // havoc performed by other front resource
    
    inhale (forperm
        $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
        old[pre_stabilize6](perm(Join($r, $lvl, $x))) ==>
        Join_interferenceReference_hf(7, $r, $lvl, $x) ==
        old[pre_stabilize6](Join_state($r, $lvl, $x)))
    
    // ------- Stabilising regions Join (after open-region@47.5) END 
    
    assert $_levelVar_8 == $_levelVar_6
  }
  $_levelVar_9 := $_levelVar_6
  
  // ------- while END ---------------
  
}

method $_Join_interpretation_stability_check(r: Ref, lvl: Int, x: Ref)
{
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  inhale acc(x.$memcell_$f, write) && true &&
    (x.$memcell_$f == 0 || x.$memcell_$f == 1)
  
  // ------- Stabilising regions Join (check stability of region interpretation) BEGIN 
  
  label pre_stabilize7
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize7](perm(Join($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
      (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) &&
      (Join_state($r, $lvl, $x) ==
      old[pre_stabilize7](Join_state($r, $lvl, $x)) ||
      0 == old[pre_stabilize7](Join_state($r, $lvl, $x)) &&
      1 == Join_state($r, $lvl, $x) &&
      true &&
      true))
  
  // ------- Stabilising regions Join (check stability of region interpretation) END 
  
  assert acc(x.$memcell_$f, write) && true &&
    (x.$memcell_$f == 0 || x.$memcell_$f == 1)
}

method $_Join_action_transitivity_check()
{
  var SET: Bool
  var aState: Int
  var bState: Int
  var cState: Int
  inhale aState == bState || 0 == aState && 1 == bState && true && SET
  inhale bState == cState || 0 == bState && 1 == cState && true && SET
  assert aState == cState || 0 == aState && 1 == cState && true && SET
}

method $_makeJoin_condition_stability_precondition_check(lvl: Int, ret: Ref,
  r: Ref)
  requires lvl >= 0
{
  var $_levelVar_10: Int
  inhale $_levelVar_10 >= 0
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions Join (check stability of method condition) BEGIN 
  
  label pre_stabilize8
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize8](perm(Join($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
      (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) &&
      (Join_state($r, $lvl, $x) ==
      old[pre_stabilize8](Join_state($r, $lvl, $x)) ||
      0 == old[pre_stabilize8](Join_state($r, $lvl, $x)) &&
      1 == Join_state($r, $lvl, $x) &&
      true &&
      true))
  
  // ------- Stabilising regions Join (check stability of method condition) END 
  
  assert lvl >= 0
}

method $_set_to_one_condition_stability_precondition_check(r: Ref, lvl: Int,
  x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_SET(r), write)
{
  var $_levelVar_11: Int
  inhale $_levelVar_11 >= 0 && $_levelVar_11 > lvl
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions Join (check stability of method condition) BEGIN 
  
  label pre_stabilize9
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize9](perm(Join($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
      (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) &&
      (Join_state($r, $lvl, $x) ==
      old[pre_stabilize9](Join_state($r, $lvl, $x)) ||
      0 == old[pre_stabilize9](Join_state($r, $lvl, $x)) &&
      1 == Join_state($r, $lvl, $x) &&
      true &&
      true))
  
  // ------- Stabilising regions Join (check stability of method condition) END 
  
  assert acc(Join(r, lvl, x), write) && (lvl >= 0 && true) &&
    acc(Join_SET(r), write)
}

method $_wait_condition_stability_precondition_check(r: Ref, lvl: Int, x: Ref)
  requires acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
{
  var $_levelVar_12: Int
  var v: Int
  inhale $_levelVar_12 >= 0 && $_levelVar_12 > lvl
  inhale acc(Join_sk_fp(), write)
  
  // no init required
  
  inhale (forall $r: Ref, $lvl: Int, $x: Ref ::acc(Join_interferenceContext_fp($r,
      $lvl, $x), write))
  
  // ------- Stabilising regions Join (check stability of method condition) BEGIN 
  
  label pre_stabilize10
  
  // Stabilising all instances of region Join
  quasihavocall $$r: Ref, $$lvl: Int, $$x: Ref :: Join($$r, $$lvl, $$x)
  exhale acc(Join_sk_fp(), write)
  inhale acc(Join_sk_fp(), write)
  inhale (forperm
      $r: Ref, $lvl: Int, $x: Ref [Join($r, $lvl, $x)] :: none <
      old[pre_stabilize10](perm(Join($r, $lvl, $x))) ==>
      (none < perm($r.$diamond) &&
      none < perm(Join_atomicity_context_fp($r, $lvl, $x)) ==>
      (Join_state($r, $lvl, $x) in Join_atomicity_context_hf($r, $lvl, $x))) &&
      (Join_state($r, $lvl, $x) ==
      old[pre_stabilize10](Join_state($r, $lvl, $x)) ||
      0 == old[pre_stabilize10](Join_state($r, $lvl, $x)) &&
      1 == Join_state($r, $lvl, $x) &&
      true &&
      true))
  
  // ------- Stabilising regions Join (check stability of method condition) END 
  
  assert acc(Join(r, lvl, x), write) && (lvl >= 0 && true)
}