domain MirrorDomain  {
  
  function mirror_simple$f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(_1: Snap$struct$m_VecWrapperI32I32): Int 
  
  function mirror_simple$f_size__$TY$__$int$(): Int 
}

domain Snap$struct$m_VecWrapperI32I32  {
  
  function cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_0: Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global): Snap$struct$m_VecWrapperI32I32 
  
  function Snap$struct$m_VecWrapperI32I32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self: Snap$struct$m_VecWrapperI32I32): Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global 
  
  axiom Snap$struct$m_VecWrapperI32I32$0$injectivity {
    (forall _l_0: Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global,
    _r_0: Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global ::
      { cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_l_0),
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_r_0) }
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_l_0) ==
      cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$struct$m_VecWrapperI32I32$0$field$f$v$axiom {
    (forall _0: Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global ::
      { Snap$struct$m_VecWrapperI32I32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_0)) }
      Snap$struct$m_VecWrapperI32I32$0$field$f$v__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32(_0)) ==
      _0)
  }
}

domain Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global  {
  
  
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field f$v: Ref

field f$x: Ref

field f$y: Ref

field tuple_0: Ref

field tuple_1: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(_1: Snap$struct$m_VecWrapperI32I32): Int
  requires true
  requires true
  ensures result >= 0
  ensures 0 <= result
  ensures [result ==
    mirror_simple$f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(_1),
    true]


function f_size__$TY$__$int$(): Int
  requires true
  requires true
  ensures result == 8
  ensures [result == mirror_simple$f_size__$TY$__$int$(), true]


function snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(self: Ref): Snap$struct$m_VecWrapperI32I32
  requires acc(struct$m_VecWrapperI32I32(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_VecWrapperI32I32$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_VecWrapperI32I32((unfolding acc(struct$m_VecWrapperI32I32(self), read$()) in
    snap$__$TY$__Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self.f$v)))
}

function snap$__$TY$__Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global$Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self: Ref): Snap$struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global
  requires acc(struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self), read$())


function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write)
}

predicate struct$m_Board(self: Ref) 

predicate struct$m_Point(self: Ref) {
  acc(self.f$x, write) &&
  (acc(i32(self.f$x), write) &&
  (acc(self.f$y, write) && acc(i32(self.f$y), write)))
}

predicate struct$m_VecWrapperI32I32(self: Ref) {
  acc(self.f$v, write) &&
  acc(struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self.f$v), write)
}

predicate struct$m_std$$vec$$Vec$tuple2$i32$i32$struct$m_std$$alloc$$Global(self: Ref) 

predicate tuple2$i32$i32(self: Ref) 

predicate usize(self: Ref) {
  acc(self.val_int, write) && 0 <= self.val_int
}

method m_Board$$count_degree() returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Bool
  var __t18: Bool
  var __t19: Bool
  var __t20: Bool
  var __t21: Bool
  var __t22: Bool
  var _preserve$0: Ref
  var __t23: Bool
  var __t24: Bool
  var __t25: Bool
  var __t26: Bool
  var __t27: Bool
  var __t28: Bool
  var __t29: Bool
  var __t30: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _7: Ref
  var _8: Ref
  var _9: Int
  var _10: Int
  var _11: Ref
  var _14: Ref
  var _16: Ref
  var _20: Ref
  var _24: Ref
  var _25: Ref
  var _26: Int
  var _27: Ref
  var _28: Ref
  var _29: Ref
  var _30: Ref
  var _32: Ref
  var _33: Ref
  var _34: Ref
  var _35: Ref
  var _36: Ref
  var _37: Int
  var _38: Int
  var _39: Ref
  
  label start
  // ========== start ==========
  // Def path: "Knights_tour::{impl#4}::count_degree"
  // Span: tests/verify/pass/rosetta/Knights_tour.rs:187:5: 205:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  __t15 := false
  __t16 := false
  __t17 := false
  __t18 := false
  __t19 := false
  __t20 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) &&
    (acc(struct$m_Board(_1.val_ref), write) &&
    acc(struct$m_Point(_2), write))
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_4)
  // [mir] _4 = move _2
  _4 := _2
  label l0
  // [mir] FakeRead(ForLet(None), _4)
  // [mir] StorageLive(_5)
  // [mir] _5 = const 0_i32
  _5 := builtin$havoc_ref()
  inhale acc(_5.val_int, write)
  _5.val_int := 0
  // [mir] FakeRead(ForLet(None), _5)
  // [mir] StorageLive(_6)
  // [mir] _6 = moves() -> [return: bb1, unwind: bb24]
  label l1
  _6 := builtin$havoc_ref()
  inhale acc(struct$m_VecWrapperI32I32(_6), write)
  inhale true
  label l2
  // ========== bb1 ==========
  __t1 := true
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] StorageLive(_7)
  // [mir] _7 = const 0_usize
  _7 := builtin$havoc_ref()
  inhale acc(_7.val_int, write)
  _7.val_int := 0
  // [mir] FakeRead(ForLet(None), _7)
  // [mir] StorageLive(_8)
  // [mir] StorageLive(_9)
  // [mir] _9 = _7
  _9 := builtin$havoc_int()
  _9 := _7.val_int
  label l3
  // [mir] StorageLive(_10)
  // [mir] StorageLive(_11)
  // [mir] _11 = &_6
  _11 := builtin$havoc_ref()
  inhale acc(_11.val_ref, write)
  _11.val_ref := _6
  exhale acc(struct$m_VecWrapperI32I32(_6), write - read$())
  inhale acc(struct$m_VecWrapperI32I32(_11.val_ref), read$())
  label l4
  // [mir] _10 = VecWrapperI32I32::len(move _11) -> [return: bb2, unwind: bb23]
  label l5
  _10 := builtin$havoc_int()
  inhale _10 >= 0
  inhale _10 ==
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_11.val_ref))
  // transfer perm _11.val_ref --> old[l5](_11.val_ref) // unchecked: false
  // ========== l6 ==========
  // MIR edge bb1 --> bb2
  // Expire borrows
  // expire_borrows ReborrowingDAG(L14,L0,)

  if (__t1 && __t1) {
    // expire loan L0
    // transfer perm old[l5](_11.val_ref) --> old[l4](_11.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32I32(old[l4](_11.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32I32(_6), write - read$())
  }
  // ========== bb2 ==========
  __t2 := true
  // [mir] StorageDead(_11)
  // [mir] _8 = Lt(move _9, move _10)
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  inhale _10 >= 0
  _8.val_bool := _9 < _10
  // [mir] StorageDead(_10)
  // [mir] StorageDead(_9)
  // [mir] FakeRead(ForLet(None), _8)
  // [mir] StorageLive(_12)
  // [mir] goto -> bb3
  // ========== loop3_start ==========
  // ========== loop3_group1_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb23]
  // ========== loop3_group1_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_14)
  // [mir] _14 = _8
  _14 := builtin$havoc_ref()
  inhale acc(_14.val_bool, write)
  _14.val_bool := _8.val_bool
  label l7
  // [mir] switchInt(move _14) -> [0: bb21, otherwise: bb5]
  __t21 := _14.val_bool
  if (__t21) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l9 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group2_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] switchInt(move _16) -> [0: bb7, otherwise: bb6]
  __t22 := _16.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb3)
  _preserve$0 := _1.val_ref
  fold acc(i32(_5), write)
  // obtain acc(i32(_5), write)
  fold acc(usize(_7), write)
  // obtain acc(usize(_7), write)
  fold acc(bool(_8), write)
  // obtain acc(bool(_8), write)
  // obtain acc(struct$m_VecWrapperI32I32(_6), write)
  // obtain acc(struct$m_Point(_4), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_Board(_1.val_ref), write)
  assert 0 <= (unfolding acc(usize(_7), write) in _7.val_int) &&
    (unfolding acc(usize(_7), write) in _7.val_int) <
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_6))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(i32(_5), write) &&
    (acc(usize(_7), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_VecWrapperI32I32(_6), write) &&
    (acc(struct$m_Point(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(struct$m_Board(_1.val_ref), write))))))
  _14 := builtin$havoc_ref()
  _16 := builtin$havoc_ref()
  _20 := builtin$havoc_ref()
  _24 := builtin$havoc_ref()
  _25 := builtin$havoc_ref()
  _26 := builtin$havoc_int()
  _27 := builtin$havoc_ref()
  _28 := builtin$havoc_ref()
  _29 := builtin$havoc_ref()
  _30 := builtin$havoc_ref()
  _32 := builtin$havoc_ref()
  _33 := builtin$havoc_ref()
  _34 := builtin$havoc_ref()
  _35 := builtin$havoc_ref()
  _36 := builtin$havoc_ref()
  _37 := builtin$havoc_int()
  _38 := builtin$havoc_int()
  _39 := builtin$havoc_ref()
  _5 := builtin$havoc_ref()
  _7 := builtin$havoc_ref()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t13 := builtin$havoc_bool()
  __t14 := builtin$havoc_bool()
  __t15 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_bool()
  __t18 := builtin$havoc_bool()
  __t23 := builtin$havoc_bool()
  __t24 := builtin$havoc_bool()
  __t25 := builtin$havoc_bool()
  __t26 := builtin$havoc_bool()
  __t27 := builtin$havoc_bool()
  __t28 := builtin$havoc_bool()
  __t29 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t30 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop3_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb3
  inhale acc(i32(_5), write) &&
    (acc(usize(_7), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_VecWrapperI32I32(_6), write) &&
    (acc(struct$m_Point(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(struct$m_Board(_1.val_ref), write))))))
  inhale _preserve$0 == _1.val_ref
  inhale true
  // ========== loop3_group2a_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb23]
  // ========== loop3_group2a_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_14)
  // [mir] _14 = _8
  _14 := builtin$havoc_ref()
  inhale acc(_14.val_bool, write)
  unfold acc(bool(_8), write)
  _14.val_bool := _8.val_bool
  label l10
  // [mir] switchInt(move _14) -> [0: bb21, otherwise: bb5]
  __t23 := _14.val_bool
  if (__t23) {
    goto l6
  }
  goto bb1
  
  label bb1
  // ========== l11 ==========
  // MIR edge bb4 --> bb21
  goto end_of_method
  
  label bb2
  // ========== l29 ==========
  // MIR edge bb14 --> bb15
  // ========== loop3_group3_bb15 ==========
  __t13 := true
  // [mir] _35 = CheckedAdd(_5, const 1_i32)
  _35 := builtin$havoc_ref()
  inhale acc(_35.tuple_0, write)
  inhale acc(_35.tuple_0.val_int, write)
  inhale acc(_35.tuple_1, write)
  inhale acc(_35.tuple_1.val_bool, write)
  unfold acc(i32(_5), write)
  _35.tuple_0.val_int := _5.val_int + 1
  _35.tuple_1.val_bool := false
  // [mir] assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const 1_i32) -> [success: bb16, unwind: bb23]
  __t27 := _35.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t27
  // ========== loop3_group3_bb16 ==========
  __t14 := true
  // [mir] _5 = move (_35.0: i32)
  _5 := _35.tuple_0
  label l31
  // [mir] _31 = const ()
  // [mir] goto -> bb18
  // ========== l41 ==========
  // drop Acc(_35.tuple_0, write) (Acc(_35.tuple_0, write))
  // drop Acc(_35.tuple_1.val_bool, write) (Acc(_35.tuple_1.val_bool, write))
  // drop Acc(_35.tuple_1, write) (Acc(_35.tuple_1, write))
  goto loop3_group1_bb3
  
  label l6
  // ========== l12 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group2b_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] switchInt(move _16) -> [0: bb7, otherwise: bb6]
  __t24 := _16.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb3
  inhale 0 <= (unfolding acc(usize(_7), write) in _7.val_int) &&
    (unfolding acc(usize(_7), write) in _7.val_int) <
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_6))
  // ========== loop3_group3_bb7 ==========
  __t6 := true
  // [mir] _15 = const ()
  // [mir] goto -> bb8
  // ========== loop3_group3_bb8 ==========
  __t7 := true
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_15)
  // [mir] StorageLive(_19)
  // [mir] StorageLive(_20)
  // [mir] _20 = const false
  _20 := builtin$havoc_ref()
  inhale acc(_20.val_bool, write)
  _20.val_bool := false
  // [mir] switchInt(move _20) -> [0: bb10, otherwise: bb9]
  __t25 := _20.val_bool
  // Ignore default target bb9, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_group3_bb10 ==========
  __t8 := true
  // [mir] _19 = const ()
  // [mir] goto -> bb11
  // ========== loop3_group3_bb11 ==========
  __t9 := true
  // [mir] StorageDead(_20)
  // [mir] StorageDead(_19)
  // [mir] StorageLive(_24)
  // [mir] StorageLive(_25)
  // [mir] _25 = &mut _6
  _25 := builtin$havoc_ref()
  inhale acc(_25.val_ref, write)
  _25.val_ref := _6
  label l13
  // [mir] StorageLive(_26)
  // [mir] _26 = _7
  _26 := builtin$havoc_int()
  unfold acc(usize(_7), write)
  _26 := _7.val_int
  label l14
  // [mir] _24 = VecWrapperI32I32::lookup(move _25, move _26) -> [return: bb12, unwind: bb23]
  label l15
  assert 0 <= _26 &&
    _26 <
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_25.val_ref))
  assert true
  assert _26 >= 0
  exhale acc(_25.val_ref, write) &&
    (acc(struct$m_VecWrapperI32I32(_25.val_ref), write) && _26 >= 0)
  _24 := builtin$havoc_ref()
  inhale acc(struct$m_VecWrapperI32I32(old[l15](_25.val_ref)), write)
  inhale acc(tuple2$i32$i32(_24), write)
  inhale true
  label l16
  // ========== l17 ==========
  // MIR edge bb11 --> bb12
  // Expire borrows
  // expire_borrows ReborrowingDAG(L16,L4,)

  // ========== loop3_group3_bb12 ==========
  __t10 := true
  // [mir] StorageDead(_26)
  // [mir] StorageDead(_25)
  // [mir] FakeRead(ForLet(None), _24)
  // [mir] StorageLive(_27)
  // [mir] StorageLive(_28)
  // [mir] _28 = &mut _4
  _28 := builtin$havoc_ref()
  inhale acc(_28.val_ref, write)
  _28.val_ref := _4
  label l18
  // [mir] StorageLive(_29)
  // [mir] StorageLive(_30)
  // [mir] _30 = &mut _24
  _30 := builtin$havoc_ref()
  inhale acc(_30.val_ref, write)
  _30.val_ref := _24
  label l19
  // [mir] _29 = &mut (*_30)
  _29 := builtin$havoc_ref()
  inhale acc(_29.val_ref, write)
  _29.val_ref := _30.val_ref
  label l20
  // [mir] _27 = Point::mov(move _28, move _29) -> [return: bb13, unwind: bb23]
  label l21
  assert true
  exhale acc(_28.val_ref, write) &&
    (acc(struct$m_Point(_28.val_ref), write) &&
    (acc(_29.val_ref, write) && acc(tuple2$i32$i32(_29.val_ref), write)))
  _27 := builtin$havoc_ref()
  inhale acc(struct$m_Point(old[l21](_28.val_ref)), write) &&
    acc(tuple2$i32$i32(old[l21](_29.val_ref)), write)
  inhale acc(struct$m_Point(_27), write)
  inhale true
  inhale (unfolding acc(struct$m_Point(old[l21](_28.val_ref)), write) in
      (unfolding acc(i32(old[l21](_28.val_ref).f$y), write) in
        (unfolding acc(i32(old[l21](_28.val_ref).f$x), write) in
          old[l21](_28.val_ref).f$x.val_int ==
          old[l21]((unfolding acc(struct$m_Point(_28.val_ref), write) in
            (unfolding acc(i32(_28.val_ref.f$x), write) in
              _28.val_ref.f$x.val_int))) &&
          old[l21](_28.val_ref).f$y.val_int ==
          old[l21]((unfolding acc(struct$m_Point(_28.val_ref), write) in
            (unfolding acc(i32(_28.val_ref.f$y), write) in
              _28.val_ref.f$y.val_int))))))
  label l22
  // ========== l23 ==========
  // MIR edge bb12 --> bb13
  // Expire borrows
  // expire_borrows ReborrowingDAG(L18,L17,L7,L6,L5,)

  // ========== loop3_group3_bb13 ==========
  __t11 := true
  // [mir] StorageDead(_29)
  // [mir] StorageDead(_28)
  // [mir] FakeRead(ForLet(None), _27)
  // [mir] StorageDead(_30)
  // [mir] StorageLive(_31)
  // [mir] StorageLive(_32)
  // [mir] StorageLive(_33)
  // [mir] _33 = &mut (*_1)
  _33 := builtin$havoc_ref()
  inhale acc(_33.val_ref, write)
  _33.val_ref := _1.val_ref
  label l24
  // [mir] StorageLive(_34)
  // [mir] _34 = move _27
  _34 := _27
  label l25
  // [mir] _32 = Board::available(move _33, move _34) -> [return: bb14, unwind: bb23]
  label l26
  assert true
  exhale acc(_33.val_ref, write) &&
    (acc(struct$m_Board(_33.val_ref), write) &&
    acc(struct$m_Point(_34), write))
  _32 := builtin$havoc_ref()
  inhale acc(struct$m_Board(old[l26](_33.val_ref)), write)
  inhale acc(bool(_32), write)
  inhale true
  inhale (unfolding acc(bool(_32), write) in _32.val_bool) ==>
    0 <=
    old[l26]((unfolding acc(struct$m_Point(_34), write) in
      (unfolding acc(i32(_34.f$x), write) in _34.f$x.val_int))) &&
    (old[l26]((unfolding acc(struct$m_Point(_34), write) in
      (unfolding acc(i32(_34.f$x), write) in _34.f$x.val_int))) <
    f_size__$TY$__$int$() &&
    (0 <=
    old[l26]((unfolding acc(struct$m_Point(_34), write) in
      (unfolding acc(i32(_34.f$y), write) in _34.f$y.val_int))) &&
    old[l26]((unfolding acc(struct$m_Point(_34), write) in
      (unfolding acc(i32(_34.f$y), write) in _34.f$y.val_int))) <
    f_size__$TY$__$int$()))
  label l27
  // ========== l28 ==========
  // MIR edge bb13 --> bb14
  // Expire borrows
  // expire_borrows ReborrowingDAG(L15,L8,)

  // ========== loop3_group3_bb14 ==========
  __t12 := true
  // [mir] StorageDead(_34)
  // [mir] StorageDead(_33)
  // [mir] switchInt(move _32) -> [0: bb17, otherwise: bb15]
  unfold acc(bool(_32), write)
  __t26 := _32.val_bool
  if (!__t26) {
    goto loop3_start
  }
  goto bb2
  
  label l8
  // ========== bb21 ==========
  __t19 := true
  // [mir] StorageLive(_41)
  // [mir] _12 = const ()
  // [mir] StorageDead(_41)
  // [mir] StorageDead(_14)
  // [mir] StorageDead(_12)
  // [mir] _0 = _5
  _0 := builtin$havoc_ref()
  inhale acc(_0.val_int, write)
  _0.val_int := _5.val_int
  label l40
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_7)
  // [mir] drop(_6) -> [return: bb22, unwind: bb24]
  // ========== bb22 ==========
  __t20 := true
  // [mir] StorageDead(_6)
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_4)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l42
  // Fold predicates for &mut args and transfer borrow permissions to old
  // obtain acc(struct$m_Board(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(i32(_0), write)
  // obtain acc(i32(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_Board(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(i32(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label l9
  // ========== l39 ==========
  // MIR edge bb4 --> bb5
  // ========== loop3_group5_bb5 ==========
  __t5 := true
  // [mir] StorageLive(_15)
  // [mir] StorageLive(_16)
  // [mir] _16 = const false
  _16 := builtin$havoc_ref()
  inhale acc(_16.val_bool, write)
  _16.val_bool := false
  // [mir] switchInt(move _16) -> [0: bb7, otherwise: bb6]
  __t30 := _16.val_bool
  // Ignore default target bb6, as it is only used by Prusti to type-check a loop invariant.
  // ========== loop3_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb3)
  fold acc(i32(_5), write)
  // obtain acc(i32(_5), write)
  fold acc(usize(_7), write)
  // obtain acc(usize(_7), write)
  fold acc(bool(_8), write)
  // obtain acc(bool(_8), write)
  // obtain acc(struct$m_VecWrapperI32I32(_6), write)
  // obtain acc(struct$m_Point(_4), write)
  // obtain acc(_1.val_ref, read)
  // obtain acc(struct$m_Board(_1.val_ref), write)
  assert 0 <= (unfolding acc(usize(_7), write) in _7.val_int) &&
    (unfolding acc(usize(_7), write) in _7.val_int) <
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_6))
  assert true
  assert _preserve$0 == _1.val_ref
  exhale acc(i32(_5), write) &&
    (acc(usize(_7), write) &&
    (acc(bool(_8), write) &&
    (acc(struct$m_VecWrapperI32I32(_6), write) &&
    (acc(struct$m_Point(_4), write) &&
    (acc(_1.val_ref, read$()) && acc(struct$m_Board(_1.val_ref), write))))))
  inhale false
  goto end_of_method
  
  label loop3_group1_bb3
  // ========== loop3_group3_bb18 ==========
  __t16 := true
  // [mir] StorageDead(_32)
  // [mir] StorageDead(_31)
  // [mir] _36 = CheckedAdd(_7, const 1_usize)
  _36 := builtin$havoc_ref()
  inhale acc(_36.tuple_0, write)
  inhale acc(_36.tuple_0.val_int, write)
  inhale acc(_36.tuple_1, write)
  inhale acc(_36.tuple_1.val_bool, write)
  _36.tuple_0.val_int := _7.val_int + 1
  _36.tuple_1.val_bool := false
  // [mir] assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", _7, const 1_usize) -> [success: bb19, unwind: bb23]
  __t28 := _36.tuple_1.val_bool
  // Rust assertion: attempt to add with overflow
  assert !__t28
  // ========== loop3_group3_bb19 ==========
  __t17 := true
  // [mir] _7 = move (_36.0: usize)
  _7 := _36.tuple_0
  label l32
  // [mir] StorageLive(_37)
  // [mir] _37 = _7
  _37 := builtin$havoc_int()
  _37 := _7.val_int
  label l33
  // [mir] StorageLive(_38)
  // [mir] StorageLive(_39)
  // [mir] _39 = &_6
  _39 := builtin$havoc_ref()
  inhale acc(_39.val_ref, write)
  _39.val_ref := _6
  exhale acc(struct$m_VecWrapperI32I32(_6), write - read$())
  inhale acc(struct$m_VecWrapperI32I32(_39.val_ref), read$())
  label l34
  // [mir] _38 = VecWrapperI32I32::len(move _39) -> [return: bb20, unwind: bb23]
  label l35
  _38 := builtin$havoc_int()
  inhale _38 >= 0
  inhale _38 ==
    f_VecWrapperI32I32$$len__$TY$__Snap$struct$m_VecWrapperI32I32$$int$(snap$__$TY$__Snap$struct$m_VecWrapperI32I32$struct$m_VecWrapperI32I32$Snap$struct$m_VecWrapperI32I32(_39.val_ref))
  // transfer perm _39.val_ref --> old[l35](_39.val_ref) // unchecked: false
  // ========== l36 ==========
  // MIR edge bb19 --> bb20
  // Expire borrows
  // expire_borrows ReborrowingDAG(L13,L9,)

  if (__t17 && __t17) {
    // expire loan L9
    // transfer perm old[l35](_39.val_ref) --> old[l34](_39.val_ref) // unchecked: false
    exhale acc(struct$m_VecWrapperI32I32(old[l34](_39.val_ref)), read$())
    inhale acc(struct$m_VecWrapperI32I32(_6), write - read$())
  }
  // ========== loop3_group3_bb20 ==========
  __t18 := true
  // [mir] StorageDead(_39)
  // [mir] _8 = Lt(move _37, move _38)
  inhale _38 >= 0
  _8.val_bool := _37 < _38
  // [mir] StorageDead(_38)
  // [mir] StorageDead(_37)
  // [mir] _13 = const ()
  // [mir] StorageDead(_27)
  // [mir] StorageDead(_24)
  // [mir] StorageDead(_14)
  // [mir] goto -> bb3
  // ========== loop3_group4_bb3 ==========
  // This is a loop head
  __t3 := true
  // [mir] falseUnwind -> [real: bb4, unwind: bb23]
  // ========== loop3_group4_bb4 ==========
  __t4 := true
  // [mir] StorageLive(_14)
  // [mir] _14 = _8
  _14 := builtin$havoc_ref()
  inhale acc(_14.val_bool, write)
  _14.val_bool := _8.val_bool
  label l37
  // [mir] switchInt(move _14) -> [0: bb21, otherwise: bb5]
  __t29 := _14.val_bool
  if (__t29) {
    goto l9
  }
  goto loop3_group1_bb4
  
  label loop3_group1_bb4
  // ========== l38 ==========
  // MIR edge bb4 --> bb21
  // ========== l44 ==========
  // drop Acc(_16.val_bool, write) (Acc(_16.val_bool, write))
  // drop Acc(_20.val_bool, write) (Acc(_20.val_bool, write))
  // drop Acc(_36.tuple_0, write) (Acc(_36.tuple_0, write))
  // drop Acc(_36.tuple_1.val_bool, write) (Acc(_36.tuple_1.val_bool, write))
  // drop Acc(_39.val_ref, write) (Acc(_39.val_ref, write))
  // drop Acc(_30.val_ref, write) (Acc(_30.val_ref, write))
  // drop Acc(_38.val_int, write) (Acc(_38.val_int, write))
  // drop Acc(_32.val_bool, write) (Acc(_32.val_bool, write))
  // drop Acc(_37.val_int, write) (Acc(_37.val_int, write))
  // drop Acc(old[l34](_39.val_ref), write) (Acc(old[l34](_39.val_ref), write))
  // drop Pred(_24, write) (Pred(_24, write))
  // drop Acc(_36.tuple_1, write) (Acc(_36.tuple_1, write))
  goto l8
  
  label loop3_start
  // ========== l30 ==========
  // MIR edge bb14 --> bb17
  // ========== loop3_group3_bb17 ==========
  __t15 := true
  // [mir] _31 = const ()
  // [mir] goto -> bb18
  // ========== l43 ==========
  unfold acc(i32(_5), write)
  goto loop3_group1_bb3
  
  label return
  // ========== l8 ==========
  // MIR edge bb4 --> bb21
  goto l8
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
