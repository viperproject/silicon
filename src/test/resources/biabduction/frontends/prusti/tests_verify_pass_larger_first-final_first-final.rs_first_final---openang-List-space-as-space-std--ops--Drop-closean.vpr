domain MirrorDomain  {
  
  function mirror_simple$f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(_1: Snap$m_Link$_beg_$_end_): Bool 
  
  function mirror_simple$f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(_1: Snap$m_Link$_beg_$_end_): Int 
  
  function mirror_simple$f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(_1: Snap$m_Link$_beg_$_end_,
  _2: Int): Int 
}

domain Snap$m_Link$_beg_$_end_  {
  
  function discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(self: Snap$m_Link$_beg_$_end_): Int 
  
  function cons$0$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(): Snap$m_Link$_beg_$_end_ 
  
  function cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_0: Snap$struct$m_Node): Snap$m_Link$_beg_$_end_ 
  
  function Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(self: Snap$m_Link$_beg_$_end_): Snap$struct$m_Node 
  
  axiom Snap$m_Link$_beg_$_end_$discriminant_range {
    (forall self: Snap$m_Link$_beg_$_end_ ::
      { discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(self) }
      0 <=
      discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(self) &&
      discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(self) <=
      1)
  }
  
  axiom Snap$m_Link$_beg_$_end_$0$discriminant_axiom {
    discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(cons$0$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_()) ==
    0
  }
  
  axiom Snap$m_Link$_beg_$_end_$1$injectivity {
    (forall _l_0: Snap$struct$m_Node, _r_0: Snap$struct$m_Node ::
      { cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_l_0),
      cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_r_0) }
      cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_l_0) ==
      cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_r_0) ==>
      _l_0 == _r_0)
  }
  
  axiom Snap$m_Link$_beg_$_end_$1$discriminant_axiom {
    (forall _0: Snap$struct$m_Node ::
      { cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_0) }
      discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_0)) ==
      1)
  }
  
  axiom Snap$m_Link$_beg_$_end_$1$field$f$0$axiom {
    (forall _0: Snap$struct$m_Node ::
      { Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_0)) }
      Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(_0)) ==
      _0)
  }
}

domain Snap$struct$m_Node  {
  
  function cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_0: Int,
  _1: Snap$m_Link$_beg_$_end_): Snap$struct$m_Node 
  
  function Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(self: Snap$struct$m_Node): Int 
  
  function Snap$struct$m_Node$0$field$f$next__$TY$__Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(self: Snap$struct$m_Node): Snap$m_Link$_beg_$_end_ 
  
  axiom Snap$struct$m_Node$0$injectivity {
    (forall _l_0: Int, _l_1: Snap$m_Link$_beg_$_end_, _r_0: Int, _r_1: Snap$m_Link$_beg_$_end_ ::
      { cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_l_0,
      _l_1), cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_r_0,
      _r_1) }
      cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_l_0,
      _l_1) ==
      cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_r_0,
      _r_1) ==>
      _l_0 == _r_0 && _l_1 == _r_1)
  }
  
  axiom Snap$struct$m_Node$0$field$f$elem$axiom {
    (forall _0: Int, _1: Snap$m_Link$_beg_$_end_ ::
      { Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_0,
      _1)) }
      Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_0,
      _1)) ==
      _0)
  }
  
  axiom Snap$struct$m_Node$0$field$f$elem$valid {
    (forall self: Snap$struct$m_Node ::
      { Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(self) }
      -2147483648 <=
      Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(self) &&
      Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(self) <=
      2147483647)
  }
  
  axiom Snap$struct$m_Node$0$field$f$next$axiom {
    (forall _0: Int, _1: Snap$m_Link$_beg_$_end_ ::
      { Snap$struct$m_Node$0$field$f$next__$TY$__Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_0,
      _1)) }
      Snap$struct$m_Node$0$field$f$next__$TY$__Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_0,
      _1)) ==
      _1)
  }
}

domain FloatDomain24e8 interpretation (SMTLIB: "(_ FloatingPoint 8 24)", Boogie: "float24e8") {
  
  function f32_from_bv(a: BitVectorDomain32): FloatDomain24e8 interpretation "(_ to_fp 8 24)"
  
  function f32_fp_add(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.add RNE"
  
  function f32_fp_sub(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.sub RNE"
  
  function f32_fp_mul(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.mul RNE"
  
  function f32_fp_div(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.div RNE"
  
  function f32_fp_min(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.min"
  
  function f32_fp_max(a: FloatDomain24e8, b: FloatDomain24e8): FloatDomain24e8 interpretation "fp.max"
  
  function f32_fp_eq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.eq"
  
  function f32_fp_leq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.leq"
  
  function f32_fp_geq(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.geq"
  
  function f32_fp_lt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.lt"
  
  function f32_fp_gt(a: FloatDomain24e8, b: FloatDomain24e8): Bool interpretation "fp.gt"
  
  function f32_fp_neg(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.neg"
  
  function f32_fp_abs(a: FloatDomain24e8): FloatDomain24e8 interpretation "fp.abs"
  
  function f32_fp_is_zero(a: FloatDomain24e8): Bool interpretation "fp.isZero"
  
  function f32_fp_is_infinite(a: FloatDomain24e8): Bool interpretation "fp.isInfinite"
  
  function f32_fp_is_nan(a: FloatDomain24e8): Bool interpretation "fp.isNaN"
  
  function f32_fp_is_negative(a: FloatDomain24e8): Bool interpretation "fp.isNegative"
  
  function f32_fp_is_positive(a: FloatDomain24e8): Bool interpretation "fp.isPositive"
}

domain FloatDomain52e12 interpretation (SMTLIB: "(_ FloatingPoint 12 52)", Boogie: "float52e12") {
  
  function f64_from_bv(a: BitVectorDomain64): FloatDomain52e12 interpretation "(_ to_fp 12 52)"
  
  function f64_fp_add(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.add RNE"
  
  function f64_fp_sub(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.sub RNE"
  
  function f64_fp_mul(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.mul RNE"
  
  function f64_fp_div(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.div RNE"
  
  function f64_fp_min(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.min"
  
  function f64_fp_max(a: FloatDomain52e12, b: FloatDomain52e12): FloatDomain52e12 interpretation "fp.max"
  
  function f64_fp_eq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.eq"
  
  function f64_fp_leq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.leq"
  
  function f64_fp_geq(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.geq"
  
  function f64_fp_lt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.lt"
  
  function f64_fp_gt(a: FloatDomain52e12, b: FloatDomain52e12): Bool interpretation "fp.gt"
  
  function f64_fp_neg(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.neg"
  
  function f64_fp_abs(a: FloatDomain52e12): FloatDomain52e12 interpretation "fp.abs"
  
  function f64_fp_is_zero(a: FloatDomain52e12): Bool interpretation "fp.isZero"
  
  function f64_fp_is_infinite(a: FloatDomain52e12): Bool interpretation "fp.isInfinite"
  
  function f64_fp_is_nan(a: FloatDomain52e12): Bool interpretation "fp.isNaN"
  
  function f64_fp_is_negative(a: FloatDomain52e12): Bool interpretation "fp.isNegative"
  
  function f64_fp_is_positive(a: FloatDomain52e12): Bool interpretation "fp.isPositive"
  
  function f64_fp_typ(a: FloatDomain52e12): Bool interpretation "fp.typ"
}

domain BitVectorDomain8 interpretation (SMTLIB: "(_ BitVec 8)", Boogie: "bv8") {
  
  function bv8_from_int(i: Int): BitVectorDomain8 interpretation "(_ int2bv 8)"
  
  function bv8_to_int(i: BitVectorDomain8): Int interpretation "(_ bv2int 8)"
  
  function bv8_and(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvand"
  
  function bv8_or(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvor"
  
  function bv8_xor(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvxor"
  
  function bv8_add(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvadd"
  
  function bv8_sub(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvsub"
  
  function bv8_mul(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvmul"
  
  function bv8_udiv(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvudiv"
  
  function bv8_shl(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvshl"
  
  function bv8_lshr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvlshr"
  
  function bv8_ashr(a: BitVectorDomain8, b: BitVectorDomain8): BitVectorDomain8 interpretation "bvashr"
  
  function bv8_not(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvnot"
  
  function bv8_neg(a: BitVectorDomain8): BitVectorDomain8 interpretation "bvneg"
}

domain BitVectorDomain16 interpretation (SMTLIB: "(_ BitVec 16)", Boogie: "bv16") {
  
  function bv16_from_int(i: Int): BitVectorDomain16 interpretation "(_ int2bv 16)"
  
  function bv16_to_int(i: BitVectorDomain16): Int interpretation "(_ bv2int 16)"
  
  function bv16_and(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvand"
  
  function bv16_or(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvor"
  
  function bv16_xor(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvxor"
  
  function bv16_add(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvadd"
  
  function bv16_sub(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvsub"
  
  function bv16_mul(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvmul"
  
  function bv16_udiv(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvudiv"
  
  function bv16_shl(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvshl"
  
  function bv16_lshr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvlshr"
  
  function bv16_ashr(a: BitVectorDomain16, b: BitVectorDomain16): BitVectorDomain16 interpretation "bvashr"
  
  function bv16_not(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvnot"
  
  function bv16_neg(a: BitVectorDomain16): BitVectorDomain16 interpretation "bvneg"
}

domain BitVectorDomain32 interpretation (SMTLIB: "(_ BitVec 32)", Boogie: "bv32") {
  
  function bv32_from_int(i: Int): BitVectorDomain32 interpretation "(_ int2bv 32)"
  
  function bv32_to_int(i: BitVectorDomain32): Int interpretation "(_ bv2int 32)"
  
  function bv32_and(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvand"
  
  function bv32_or(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvor"
  
  function bv32_xor(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvxor"
  
  function bv32_add(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvadd"
  
  function bv32_sub(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvsub"
  
  function bv32_mul(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvmul"
  
  function bv32_udiv(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvudiv"
  
  function bv32_shl(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvshl"
  
  function bv32_lshr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvlshr"
  
  function bv32_ashr(a: BitVectorDomain32, b: BitVectorDomain32): BitVectorDomain32 interpretation "bvashr"
  
  function bv32_not(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvnot"
  
  function bv32_neg(a: BitVectorDomain32): BitVectorDomain32 interpretation "bvneg"
}

domain BitVectorDomain64 interpretation (SMTLIB: "(_ BitVec 64)", Boogie: "bv64") {
  
  function bv64_from_int(i: Int): BitVectorDomain64 interpretation "(_ int2bv 64)"
  
  function bv64_to_int(i: BitVectorDomain64): Int interpretation "(_ bv2int 64)"
  
  function bv64_and(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvand"
  
  function bv64_or(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvor"
  
  function bv64_xor(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvxor"
  
  function bv64_add(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvadd"
  
  function bv64_sub(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvsub"
  
  function bv64_mul(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvmul"
  
  function bv64_udiv(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvudiv"
  
  function bv64_shl(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvshl"
  
  function bv64_lshr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvlshr"
  
  function bv64_ashr(a: BitVectorDomain64, b: BitVectorDomain64): BitVectorDomain64 interpretation "bvashr"
  
  function bv64_not(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvnot"
  
  function bv64_neg(a: BitVectorDomain64): BitVectorDomain64 interpretation "bvneg"
}

domain BitVectorDomain128 interpretation (SMTLIB: "(_ BitVec 128)", Boogie: "bv128") {
  
  function bv128_from_int(i: Int): BitVectorDomain128 interpretation "(_ int2bv 128)"
  
  function bv128_to_int(i: BitVectorDomain128): Int interpretation "(_ bv2int 128)"
  
  function bv128_and(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvand"
  
  function bv128_or(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvor"
  
  function bv128_xor(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvxor"
  
  function bv128_add(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvadd"
  
  function bv128_sub(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvsub"
  
  function bv128_mul(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvmul"
  
  function bv128_udiv(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvudiv"
  
  function bv128_shl(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvshl"
  
  function bv128_lshr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvlshr"
  
  function bv128_ashr(a: BitVectorDomain128, b: BitVectorDomain128): BitVectorDomain128 interpretation "bvashr"
  
  function bv128_not(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvnot"
  
  function bv128_neg(a: BitVectorDomain128): BitVectorDomain128 interpretation "bvneg"
}

field discriminant: Int

field enum_More: Ref

field f$0: Ref

field f$elem: Ref

field f$head: Ref

field f$next: Ref

field val_bool: Bool

field val_int: Int

field val_ref: Ref

function builtin$unreach__$TY$__$int$$$int$(): Int
  requires false


function f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(_1: Snap$m_Link$_beg_$_end_): Bool
  requires true
  requires true
  ensures true
  ensures [result ==
    mirror_simple$f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(_1),
    true]
{
  discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(_1) ==
  0
}

function f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(_1: Snap$m_Link$_beg_$_end_): Int
  requires true
  requires true
  ensures (!f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(_1) ==>
    result > 0) &&
    result >= 0
  ensures 0 <= result
  ensures [result ==
    mirror_simple$f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(_1),
    true]
{
  (discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(_1) ==
  0 ?
    0 :
    1 +
    f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(Snap$struct$m_Node$0$field$f$next__$TY$__Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_1))))
}

function f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(_1: Snap$m_Link$_beg_$_end_,
  _2: Int): Int
  requires true
  requires 0 <= _2 &&
    _2 < f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(_1)
  requires 0 <= _2
  ensures true
  ensures [result ==
    mirror_simple$f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(_1,
    _2),
    true]
{
  (discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(_1) ==
  0 ?
    builtin$unreach__$TY$__$int$$$int$() :
    (_2 != 0 ?
      f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(Snap$struct$m_Node$0$field$f$next__$TY$__Snap$struct$m_Node$Snap$m_Link$_beg_$_end_(Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_1)),
      _2 - 1) :
      Snap$struct$m_Node$0$field$f$elem__$TY$__Snap$struct$m_Node$$int$(Snap$m_Link$_beg_$_end_$1$field$f$0__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node(_1))))
}

function m_Link$_beg_$_end_$$discriminant$$__$TY$__m_Link$_beg_$_end_$$int$(self: Ref): Int
  requires acc(m_Link$_beg_$_end_(self), read$())
  ensures 0 <= result && result <= 1
  ensures discriminant$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(self)) ==
    result
{
  (unfolding acc(m_Link$_beg_$_end_(self), read$()) in self.discriminant)
}

function snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(self: Ref): Snap$m_Link$_beg_$_end_
  requires acc(m_Link$_beg_$_end_(self), read$())
{
  ((unfolding acc(m_Link$_beg_$_end_(self), read$()) in self.discriminant) ==
  1 ?
    cons$1$__$TY$__Snap$m_Link$_beg_$_end_$Snap$struct$m_Node$Snap$m_Link$_beg_$_end_((unfolding acc(m_Link$_beg_$_end_(self), read$()) in
      (unfolding acc(m_Link$_beg_$_end_More(self.enum_More), read$()) in
        (unfolding acc(struct$m_std$$boxed$$Box$struct$m_Node$struct$m_std$$alloc$$Global(self.enum_More.f$0), read$()) in
          snap$__$TY$__Snap$struct$m_Node$struct$m_Node$Snap$struct$m_Node(self.enum_More.f$0.val_ref))))) :
    cons$0$__$TY$__Snap$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_())
}

function snap$__$TY$__Snap$struct$m_Node$struct$m_Node$Snap$struct$m_Node(self: Ref): Snap$struct$m_Node
  requires acc(struct$m_Node(self), read$())
{
  cons$0$__$TY$__Snap$struct$m_Node$$int$$Snap$m_Link$_beg_$_end_$Snap$struct$m_Node((unfolding acc(struct$m_Node(self), read$()) in
    (unfolding acc(i32(self.f$elem), read$()) in self.f$elem.val_int)), (unfolding acc(struct$m_Node(self), read$()) in
    snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(self.f$next)))
}

function read$(): Perm
  ensures none < result
  ensures result < write


predicate DeadBorrowToken$(borrow: Int) 

predicate bool(self: Ref) {
  acc(self.val_bool, write)
}

predicate i32(self: Ref) {
  acc(self.val_int, write)
}

predicate m_Link$_beg_$_end_(self: Ref) {
  acc(self.discriminant, write) &&
  (0 <= self.discriminant && self.discriminant <= 1 &&
  (acc(self.enum_More, write) &&
  acc(m_Link$_beg_$_end_More(self.enum_More), write)))
}

predicate m_Link$_beg_$_end_More(self: Ref) {
  acc(self.f$0, write) &&
  acc(struct$m_std$$boxed$$Box$struct$m_Node$struct$m_std$$alloc$$Global(self.f$0), write)
}

predicate struct$m_List(self: Ref) {
  acc(self.f$head, write) && acc(m_Link$_beg_$_end_(self.f$head), write)
}

predicate struct$m_Node(self: Ref) {
  acc(self.f$elem, write) &&
  (acc(i32(self.f$elem), write) &&
  (acc(self.f$next, write) && acc(m_Link$_beg_$_end_(self.f$next), write)))
}

predicate struct$m_std$$boxed$$Box$struct$m_Node$struct$m_std$$alloc$$Global(self: Ref) {
  acc(self.val_ref, write) && acc(struct$m_Node(self.val_ref), write)
}

predicate tuple0$(self: Ref) {
  true
}

method m_$openang$List$space$as$space$std$$ops$$Drop$closeang$$$drop()
  returns (_0: Ref)
{
  var __t0: Bool
  var __t1: Bool
  var __t2: Bool
  var __t3: Bool
  var __t4: Bool
  var __t5: Bool
  var __t6: Bool
  var __t7: Bool
  var __t8: Bool
  var __t9: Bool
  var __t10: Bool
  var __t11: Bool
  var __t12: Bool
  var __t13: Bool
  var __t14: Bool
  var __t15: Bool
  var __t16: Bool
  var __t17: Int
  var __t18: Bool
  var _old$pre$0: Ref
  var _1: Ref
  var _2: Ref
  var _3: Ref
  var _4: Ref
  var _5: Ref
  var _6: Ref
  var _8: Ref
  var _9: Int
  var _10: Ref
  var _11: Ref
  var _12: Ref
  var _13: Ref
  var _14: Ref
  
  label start
  // ========== start ==========
  // Def path: "first_final::{impl#3}::drop"
  // Span: tests/verify/pass/larger/first-final.rs:165:5: 177:6 (#0)
  __t0 := false
  __t1 := false
  __t2 := false
  __t3 := false
  __t4 := false
  __t5 := false
  __t6 := false
  __t7 := false
  __t8 := false
  __t9 := false
  __t10 := false
  __t11 := false
  __t12 := false
  __t13 := false
  __t14 := false
  // Preconditions:
  inhale acc(_1.val_ref, write) && acc(struct$m_List(_1.val_ref), write)
  inhale true
  label pre
  // ========== bb0 ==========
  __t0 := true
  // [mir] StorageLive(_2)
  // [mir] StorageLive(_3)
  // [mir] StorageLive(_4)
  // [mir] _4 = &mut ((*_1).0: Link)
  _4 := builtin$havoc_ref()
  inhale acc(_4.val_ref, write)
  unfold acc(struct$m_List(_1.val_ref), write)
  _4.val_ref := _1.val_ref.f$head
  label l0
  // [mir] _3 = &mut (*_4)
  _3 := builtin$havoc_ref()
  inhale acc(_3.val_ref, write)
  _3.val_ref := _4.val_ref
  label l1
  // [mir] StorageLive(_5)
  // [mir] _5 = Link::Empty
  _5 := builtin$havoc_ref()
  inhale acc(m_Link$_beg_$_end_(_5), write)
  inhale m_Link$_beg_$_end_$$discriminant$$__$TY$__m_Link$_beg_$_end_$$int$(_5) ==
    0
  // [mir] _2 = replace(move _3, move _5) -> [return: bb1, unwind: bb19]
  label l2
  assert f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_5))
  assert true
  exhale acc(_3.val_ref, write) &&
    (acc(m_Link$_beg_$_end_(_3.val_ref), write) &&
    acc(m_Link$_beg_$_end_(_5), write))
  _2 := builtin$havoc_ref()
  inhale acc(m_Link$_beg_$_end_(old[l2](_3.val_ref)), write)
  inhale acc(m_Link$_beg_$_end_(_2), write)
  inhale true
  inhale f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(old[l2](_3.val_ref))) &&
    (old[l2](f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_3.val_ref))) ==
    f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_2)) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_2)) ==>
      old[l2](f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_3.val_ref),
      _0_quant_0)) ==
      f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_2),
      _0_quant_0))))
  label l3
  // ========== l4 ==========
  // MIR edge bb0 --> bb1
  // Expire borrows
  // expire_borrows ReborrowingDAG(L8,L1,L0,)

  // ========== bb1 ==========
  __t1 := true
  // [mir] StorageDead(_5)
  // [mir] StorageDead(_3)
  // [mir] FakeRead(ForLet(None), _2)
  // [mir] StorageDead(_4)
  // [mir] StorageLive(_6)
  // [mir] _6 = const true
  _6 := builtin$havoc_ref()
  inhale acc(_6.val_bool, write)
  _6.val_bool := true
  // [mir] FakeRead(ForLet(None), _6)
  // [mir] goto -> bb2
  // ========== loop2_start ==========
  // ========== loop2_group1_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb18]
  // ========== loop2_group1_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] _8 = _6
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _6.val_bool
  label l5
  // [mir] switchInt(move _8) -> [0: bb13, otherwise: bb4]
  __t15 := _8.val_bool
  if (__t15) {
    goto bb0
  }
  goto return
  
  label bb0
  // ========== l7 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_inv_pre ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  // obtain acc(m_Link$_beg_$_end_(_2), write)
  fold acc(bool(_6), write)
  // obtain acc(bool(_6), write)
  assert true
  exhale acc(m_Link$_beg_$_end_(_2), write) && acc(bool(_6), write)
  _10 := builtin$havoc_ref()
  _11 := builtin$havoc_ref()
  _12 := builtin$havoc_ref()
  _13 := builtin$havoc_ref()
  _14 := builtin$havoc_ref()
  _2 := builtin$havoc_ref()
  _8 := builtin$havoc_ref()
  _9 := builtin$havoc_int()
  __t10 := builtin$havoc_bool()
  __t11 := builtin$havoc_bool()
  __t12 := builtin$havoc_bool()
  __t16 := builtin$havoc_bool()
  __t17 := builtin$havoc_int()
  __t18 := builtin$havoc_bool()
  __t2 := builtin$havoc_bool()
  __t3 := builtin$havoc_bool()
  __t4 := builtin$havoc_bool()
  __t5 := builtin$havoc_bool()
  __t6 := builtin$havoc_bool()
  __t7 := builtin$havoc_bool()
  __t8 := builtin$havoc_bool()
  __t9 := builtin$havoc_bool()
  // ========== loop2_inv_post_perm ==========
  // Inhale the loop permissions invariant of block bb2
  inhale acc(m_Link$_beg_$_end_(_2), write) && acc(bool(_6), write)
  inhale true
  // ========== loop2_group2a_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb18]
  // ========== loop2_group2a_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] _8 = _6
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  unfold acc(bool(_6), write)
  _8.val_bool := _6.val_bool
  label l8
  // [mir] switchInt(move _8) -> [0: bb13, otherwise: bb4]
  __t16 := _8.val_bool
  if (__t16) {
    goto bb1
  }
  goto l4
  
  label bb1
  // ========== l10 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_inv_post_fnspc ==========
  // Inhale the loop fnspec invariant of block bb2
  // ========== loop2_group3_bb4 ==========
  __t4 := true
  // [mir] FakeRead(ForMatchedPlace(None), _2)
  // [mir] _9 = discriminant(_2)
  _9 := builtin$havoc_int()
  _9 := m_Link$_beg_$_end_$$discriminant$$__$TY$__m_Link$_beg_$_end_$$int$(_2)
  // [mir] switchInt(move _9) -> [1: bb5, otherwise: bb11]
  __t17 := _9
  if (__t17 == 1) {
    goto loop2_group1_bb2
  }
  goto loop2_start
  
  label l4
  // ========== l9 ==========
  // MIR edge bb3 --> bb13
  goto end_of_method
  
  label l6
  // ========== l21 ==========
  // MIR edge bb3 --> bb13
  // ========== l25 ==========
  // drop Acc(_9.val_int, write) (Acc(_9.val_int, write))
  goto l7
  
  label l7
  // ========== bb13 ==========
  __t13 := true
  // [mir] StorageLive(_16)
  // [mir] _0 = const ()
  // [mir] StorageDead(_16)
  // [mir] StorageDead(_8)
  // [mir] StorageDead(_6)
  // [mir] drop(_2) -> [return: bb15, unwind: bb20]
  // ========== bb15 ==========
  __t14 := true
  // [mir] StorageDead(_2)
  // [mir] return
  // ========== return ==========
  // Target of any 'return' statement.
  // Exhale postcondition
  label l24
  // Fold predicates for &mut args and transfer borrow permissions to old
  fold acc(struct$m_List(_1.val_ref), write)
  // obtain acc(struct$m_List(_1.val_ref), write)
  _old$pre$0 := _1.val_ref
  // Fold the result
  fold acc(tuple0$(_0), write)
  // obtain acc(tuple0$(_0), write)
  // Assert possible strengthening
  // Assert functional specification of postcondition
  // Assert type invariants
  assert true
  // Exhale permissions of postcondition (1/3)
  exhale acc(struct$m_List(_old$pre$0), write)
  // Exhale permissions of postcondition (2/3)
  exhale acc(tuple0$(_0), write)
  // Exhale permissions of postcondition (3/3)
  goto end_of_method
  
  label loop2_group1_bb2
  // ========== l12 ==========
  // MIR edge bb4 --> bb5
  // ========== loop2_group3_bb5 ==========
  __t6 := true
  // [mir] falseEdge -> [real: bb6, imaginary: bb11]
  // ========== loop2_group3_bb6 ==========
  __t7 := true
  // [mir] StorageLive(_10)
  // [mir] _10 = move ((_2 as More).0: std::boxed::Box<Node>)
  unfold acc(m_Link$_beg_$_end_(_2), write)
  unfold acc(m_Link$_beg_$_end_More(_2.enum_More), write)
  _10 := _2.enum_More.f$0
  label l13
  // [mir] StorageLive(_11)
  // [mir] StorageLive(_12)
  // [mir] StorageLive(_13)
  // [mir] _13 = &mut ((*_10).1: Link)
  _13 := builtin$havoc_ref()
  inhale acc(_13.val_ref, write)
  unfold acc(struct$m_std$$boxed$$Box$struct$m_Node$struct$m_std$$alloc$$Global(_10), write)
  unfold acc(struct$m_Node(_10.val_ref), write)
  _13.val_ref := _10.val_ref.f$next
  label l14
  // [mir] _12 = &mut (*_13)
  _12 := builtin$havoc_ref()
  inhale acc(_12.val_ref, write)
  _12.val_ref := _13.val_ref
  label l15
  // [mir] StorageLive(_14)
  // [mir] _14 = Link::Empty
  _14 := builtin$havoc_ref()
  inhale acc(m_Link$_beg_$_end_(_14), write)
  inhale m_Link$_beg_$_end_$$discriminant$$__$TY$__m_Link$_beg_$_end_$$int$(_14) ==
    0
  // [mir] _11 = replace(move _12, move _14) -> [return: bb7, unwind: bb16]
  label l16
  assert f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_14))
  assert true
  exhale acc(_12.val_ref, write) &&
    (acc(m_Link$_beg_$_end_(_12.val_ref), write) &&
    acc(m_Link$_beg_$_end_(_14), write))
  _11 := builtin$havoc_ref()
  inhale acc(m_Link$_beg_$_end_(old[l16](_12.val_ref)), write)
  inhale acc(m_Link$_beg_$_end_(_11), write)
  inhale true
  inhale f_Link$$is_empty__$TY$__Snap$m_Link$_beg_$_end_$$bool$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(old[l16](_12.val_ref))) &&
    (old[l16](f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_12.val_ref))) ==
    f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_11)) &&
    (forall _0_quant_0: Int ::0 <= _0_quant_0 ==>
      !(0 <= _0_quant_0) ||
      (_0_quant_0 <
      f_Link$$len__$TY$__Snap$m_Link$_beg_$_end_$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_11)) ==>
      old[l16](f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_12.val_ref),
      _0_quant_0)) ==
      f_Link$$lookup__$TY$__Snap$m_Link$_beg_$_end_$$int$$$int$(snap$__$TY$__Snap$m_Link$_beg_$_end_$m_Link$_beg_$_end_$Snap$m_Link$_beg_$_end_(_11),
      _0_quant_0))))
  label l17
  // ========== l18 ==========
  // MIR edge bb6 --> bb7
  // Expire borrows
  // expire_borrows ReborrowingDAG(L7,L3,L2,)

  // ========== loop2_group3_bb7 ==========
  __t8 := true
  // [mir] StorageDead(_14)
  // [mir] StorageDead(_12)
  // [mir] drop(_2) -> [return: bb8, unwind: bb9]
  // ========== loop2_group3_bb8 ==========
  __t9 := true
  // [mir] _2 = move _11
  _2 := _11
  label l19
  // [mir] drop(_11) -> [return: bb10, unwind: bb17]
  // ========== loop2_group3_bb10 ==========
  __t10 := true
  // [mir] StorageDead(_11)
  // [mir] StorageDead(_13)
  // [mir] _7 = const ()
  // [mir] drop(_10) -> [return: bb12, unwind: bb18]
  // ========== loop2_group3_bb12 ==========
  __t11 := true
  // [mir] StorageDead(_10)
  // [mir] goto -> bb14
  // ========== l23 ==========
  // drop Acc(_13.val_ref, write) (Acc(_13.val_ref, write))
  // drop Acc(_10.val_ref.f$elem, write) (Acc(_10.val_ref.f$elem, write))
  // drop Acc(_10.val_ref.f$next, write) (Acc(_10.val_ref.f$next, write))
  // drop Pred(_10.val_ref.f$elem, write) (Pred(_10.val_ref.f$elem, write))
  // drop Pred(_10.val_ref.f$next, write) (Pred(_10.val_ref.f$next, write))
  // drop Acc(_10.val_ref, write) (Acc(_10.val_ref, write))
  goto loop2_group1_bb3
  
  label loop2_group1_bb3
  // ========== loop2_group3_bb14 ==========
  __t12 := true
  // [mir] StorageDead(_8)
  // [mir] goto -> bb2
  // ========== loop2_group4_bb2 ==========
  // This is a loop head
  __t2 := true
  // [mir] falseUnwind -> [real: bb3, unwind: bb18]
  // ========== loop2_group4_bb3 ==========
  __t3 := true
  // [mir] StorageLive(_8)
  // [mir] _8 = _6
  _8 := builtin$havoc_ref()
  inhale acc(_8.val_bool, write)
  _8.val_bool := _6.val_bool
  label l20
  // [mir] switchInt(move _8) -> [0: bb13, otherwise: bb4]
  __t18 := _8.val_bool
  if (__t18) {
    goto loop2_inv_pre
  }
  goto l6
  
  label loop2_inv_pre
  // ========== l22 ==========
  // MIR edge bb3 --> bb4
  // ========== loop2_end_body ==========
  // Assert and exhale the loop body invariant (loop head: bb2)
  // obtain acc(m_Link$_beg_$_end_(_2), write)
  fold acc(bool(_6), write)
  // obtain acc(bool(_6), write)
  assert true
  exhale acc(m_Link$_beg_$_end_(_2), write) && acc(bool(_6), write)
  inhale false
  goto end_of_method
  
  label loop2_start
  // ========== l11 ==========
  // MIR edge bb4 --> bb11
  // ========== loop2_group3_bb11 ==========
  __t5 := true
  // [mir] _6 = const false
  _6.val_bool := false
  // [mir] _7 = const ()
  // [mir] goto -> bb14
  goto loop2_group1_bb3
  
  label return
  // ========== l6 ==========
  // MIR edge bb3 --> bb13
  goto l7
  label end_of_method
}

method builtin$havoc_bool() returns (ret: Bool)


method builtin$havoc_int() returns (ret: Int)


method builtin$havoc_ref() returns (ret: Ref)
