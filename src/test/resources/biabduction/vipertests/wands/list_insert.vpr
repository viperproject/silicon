// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/carbon/issue/102/)

/* This example encodes and specifies an iterative implementation of
 * inserting a value into a linked list. A magic wand is used to
 * book-keep permissions.
 *
 * Notes:
 *
 *  - In previous versions of Silicon, the sequence axiomatisation
 *    had a problem that could slow down Z3 significantly. This is
 *    orthogonal to our work on magic wands. Should you experience
 *    verification runs that take much longer than the timing
 *    information included in our paper, please try
 *    list_insert_noseq.vpr, which is a version of this example from
 *    which all sequence-related assertions have been erased (the
 *    wands are still included).
 *
 *  - The additional two asserts are currently necessary because of a
 *    known incompleteness of Silicon (again, see list_insert_noseq.vpr
 *    for a version from which all sequence-related assertions have
 *    been removed).
 */

field val: Int
field next: Ref

/* The usual linked-list predicate. */
predicate List(xs: Ref) {
	acc(xs.val) && acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
}

/* Returns the elements stored in the linked-list xs. */
function elems(xs: Ref): Seq[Int]
  requires acc(List(xs))
{ unfolding List(xs) in Seq(xs.val) ++ (xs.next == null ? Seq[Int]() : elems(xs.next)) }

/* Returns the head value of the linked-list xs. */
function head(xs: Ref): Int
  requires acc(List(xs))
{ unfolding List(xs) in xs.val }

/* Inserts value x at an appropriate position into the ordered linked-list xs, such that
 * the list remains ordered if it was in ascending order before.
 */
method insert(xs: Ref, x:Int) returns (i: Int)
  requires acc(List(xs))
  requires head(xs) < x
  ensures acc(List(xs))
  ensures elems(xs) == old(elems(xs))[0..i+1] ++ Seq(x) ++ old(elems(xs))[i+1..]
{
  var crt: Ref
  var nxt: Ref
  i := 0

  define A acc(List(crt))
  define B acc(List(xs)) && elems(xs) == old(elems(xs))[0..i] ++ old[lhs](elems(crt))

  unfold List(xs)
  crt := xs
  nxt := xs.next

  package A --* B

	/* Find the appropriate position for x in the linked-list. After the loop,
	 * crt points to the first node in the list s.t. crt.next is either null,
	 * or crt.next.val >= x. nxt is always equal to crt.next.
	 */
  while (nxt != null && head(nxt) < x)
    invariant 0 <= i && i < |old(elems(xs))|
    invariant nxt == null ==> i == |old(elems(xs))| - 1
    invariant acc(crt.val) && acc(crt.next)
    invariant nxt == crt.next
    invariant crt.val == old(elems(xs))[i]
    invariant nxt != null ==> (acc(List(nxt)) && elems(nxt) == old(elems(xs))[i+1..])
    invariant A --* B
  {
    assert old(elems(xs))[i+1] == elems(nxt)[0]
    var oi: Int := i

    var prev: Ref := crt

    unfold List(nxt)
    crt := nxt
    nxt := nxt.next
    i := i + 1

   package (A) --* B {
       fold List(prev)
       apply acc(List(prev)) --* acc(List(xs)) && elems(xs) == old(elems(xs))[0..oi] ++ old[lhs](elems(prev))
   }
  }

	/* Create a new node with value x and append the list tail starting at nxt to it. */
  var node: Ref
  node := new(val,next)
  node.val := x
  node.next := nxt

  fold List(node)

  assert elems(node) == Seq(x) ++ old(elems(xs))[i+1..]

	/* Append the new node (and its tail) to the current node. */
  crt.next := node
  fold List(crt)

	/* Give up the sublist starting at crt and get back the original list *with*
	 * the newly inserted value.
	 */
  apply A --* B
}
