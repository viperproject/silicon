// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

field f: Int
field g: Int

predicate Pair(this: Ref) {
  acc(this.f) && acc(this.g)
}

function sum(p: Ref): Int
  requires acc(Pair(p))
{ unfolding acc(Pair(p)) in (p.f) + (p.g) }

method test01(x: Ref)
  //requires acc(x.f)
  //ensures acc(x.f)
{
  var w: Int := x.f
  package acc(x.f) && x.f == w --* acc(x.f) && x.f == old(x.f)

  apply acc(x.f) && x.f == old(x.f) --* acc(x.f) && x.f == w
}

method test05(x: Ref, y: Ref)
  requires acc(Pair(x))
  requires let a == (sum(x)) in acc(Pair(x)) && sum(x) == a --* acc(y.f)
  ensures acc(y.f)
{
  unfold acc(Pair(x))
  fold acc(Pair(x))

  var w: Int := sum(x)
  //apply acc(Pair(x)) && sum(x) == w --* acc(y.f)
}
