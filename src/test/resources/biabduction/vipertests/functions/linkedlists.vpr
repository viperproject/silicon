// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

//:: IgnoreFile(/silicon/issue/104/)

// NOTES (important points are also commented in the code below)
// (1) The definition of list(xs) precludes the case xs==null. But, without unfolding the predicate, this information is not available. This is important for e.g.,
// showing that length increases by 1 when prepending. For now, the explicit non-nullity of the argument has been conjoined everywhere.
// (2) The definition of the function ascending in terms of the function head means that framing head is often necessary. This is true even in cases where the head
// element is "clear", e.g. when a postcondition about elems is also written, since relating the sequence to the head() function is not automatic.
// (3) The relationships between different abstractions is not always automatic. For example, the if-condition tail(xs)==null actually implies that elems(xs) has
// length 1 and also that head(xs) == tail(xs). Both of these facts are needed to prove the postconditions of insert. Resorting to limited functions would allow
// manual assertions to trigger these properties. Without limited-functions-style triggering (i.e. only based on fold/unfold of predicates), these must be assumptions

field next: Ref
field val: Int

predicate list(xs: Ref) {
  acc(xs.next) && acc(xs.val) && (xs.next != null ==> acc(list(xs.next)) && xs.next != null)
}

function length(xs: Ref): Int
  requires acc(list(xs)) && xs != null // (1)
  ensures result > 0
{ unfolding acc(list(xs)) in 1 + (xs.next == null ? 0 : length(xs.next)) } // (1)

function sum(xs: Ref): Int
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.val + (xs.next == null ? 0 : sum(xs.next)) }

function head(xs: Ref): Int
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.val }

function tail(xs: Ref): Ref
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.next }

function last(xs: Ref): Int
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in xs.next == null ? xs.val : last(xs.next) }

function contains(xs: Ref, x: Int): Bool
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in x == xs.val || (xs.next != null && contains(xs.next, x)) }

function elems(xs: Ref): Seq[Int]
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in Seq(xs.val) ++ (xs.next == null ? Seq[Int]() : elems(xs.next)) }

function get(xs: Ref, index: Int): Int
  requires acc(list(xs)) && xs != null
  requires 0 <= index && index < length(xs)
{ unfolding acc(list(xs)) in index == 0 ? xs.val : get(xs.next, index - 1) }

method prepend(xs: Ref, y: Int) returns (ys: Ref)
  requires acc(list(xs)) && xs != null
  ensures acc(list(ys)) && ys != null
  ensures length(ys) == old(length(xs)) + 1 // (1)
  ensures elems(ys) == Seq(y) ++ old(elems(xs))
  ensures head(ys) == y // (2)
  ensures old(y <= head(xs) && ascending(xs)) ==> ascending(ys)
{
  ys := new(val, next)
  ys.val := y
  ys.next := xs
  fold acc(list(ys))
}

method append(xs: Ref, y: Int)
  requires acc(list(xs)) && xs != null
  ensures acc(list(xs)) && xs != null
  ensures length(xs) == old(length(xs)) + 1
  ensures elems(xs) == old(elems(xs)) ++ Seq(y)
  ensures head(xs) == old(head(xs)) // (2)
  ensures old(y >= last(xs) && ascending(xs)) ==> ascending(xs) // (2)
{
  unfold acc(list(xs))

  if (xs.next == null) {
    var ys: Ref
    ys := new(val, next)
    ys.val := y
    ys.next := null
    fold acc(list(ys))
    xs.next := ys
  } else {
    append(xs.next, y)
  }

  fold acc(list(xs))
}

function ascending(xs: Ref): Bool
  requires acc(list(xs)) && xs != null
{ unfolding acc(list(xs)) in (xs.next == null || (xs.val <= head(xs.next) && ascending(xs.next))) }

method insert(xs: Ref, y: Int) returns (ys: Ref, i: Int)
  requires acc(list(xs)) && xs != null
  ensures acc(list(ys)) && ys != null
  ensures 0 <= i && i <= old(length(xs))
  ensures (i > 0 ==> head(ys) == old(head(xs))) && (i == 0 ==> head(ys) == y) // (2)
  ensures length(ys) == old(length(xs)) + 1
  ensures elems(ys) == old(elems(xs))[0..i] ++ Seq(y) ++ old(elems(xs))[i..]
  ensures old(ascending(xs)) ==> ascending(ys) // (2)
{
  if (y <= head(xs)) {
    ys := prepend(xs, y)
    i := 0
  } elseif (tail(xs) == null) {
    assume head(xs) == last(xs) // (3) NOTE: *assumption* is needed without resorting to limited functions
    assume |elems(xs)| == 1 // (3) NOTE: *assumption* is needed without resorting to limited functions
    append(xs, y)
    ys := xs
    i := 1
  } else {
    unfold acc(list(xs))

    if (y <= unfolding acc(list(xs.next)) in xs.next.val) {
      ys := new(val, next)
      ys.val := y
      ys.next := xs.next
      fold acc(list(ys))
      xs.next := ys
      ys := xs
      i := 1
    } else {
      ys, i := insert(xs.next, y)
      xs.next := ys
      ys := xs
      i := i + 1
    }

    fold acc(list(ys))
  }
}

/* Misc */

/* At some point, Silicon had a small bug in the handling of disjunction, as used
 * in the body of ascending(xs). Hence this test.
 */
method test01(xs: Ref)
  requires acc(list(xs)) && xs != null && ascending(xs)
{
  unfold acc(list(xs))
  assume xs.next != null

  assert ascending(xs.next)
}

/* Modelled after a Chalice2Silver test case, uncovered a problem in Silicon */
method test02(xs: Ref, x: Int, ys: Ref)
  requires ys != null
  requires acc(list(ys))
  requires acc(xs.val) && acc(xs.next)
{
  xs.val := x
  xs.next := ys

  fold acc(list(xs))
  assert forall i: Int :: i in [1..length(xs)) ==> get(xs, i) == unfolding acc(list(xs), write) in get(ys, i - 1)
}
