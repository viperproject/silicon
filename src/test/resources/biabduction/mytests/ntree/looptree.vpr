field l: Ref
field r: Ref

predicate tree(a: Ref){
    a != null ==> acc(a.l) && tree(a.l) && acc(a.r) && tree(a.r)
}

method test(this: Ref)
//requires list(this)
//ensures list(this)
{
    var x: Ref := this
    //package list(x) --* list(this)

    while(x != null)
    //invariant list(x)
    //invariant list(x) --* list(this)
    {
        var xo: Ref := x
        //unfold list(x)
        x := x.l
        //package acc(list(x), write) --* acc(list(this), write) {
        //    //fold acc(list(xo), write)
        //    //apply acc(list(xo), write) --* acc(list(this), write)
        //}
    }
}
