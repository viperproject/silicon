field f: Int
field g: Int

method foo(x: Ref, y: Ref, z: Ref, s: Set[Ref])
    requires forall a: Ref :: a in s ==> acc(a.f) && a.f == 3

    requires x in s                 // x is the variable we will quasihavoc

    // locations that should remain the same
    requires acc(y.f) && y.f == 3   // y is separate from the set s
    requires z in s && z != x       // z is known not to be x
    requires acc(x.g) && x.g == 3   // some unrelated field
{
    quasihavoc x.f
    assert y.f == 3
    assert z.f == 3
    assert x.g == 3
    
    assert forall a: Ref :: a in s && a != x ==> a.f == 3
}
