field f: Int

// We have an arbitrary element NOT in s. It remains unchanged
method foo(s: Set[Ref], a: Ref)
    requires forall x: Ref :: x in s ==> acc(x.f)
    requires acc(a.f) && a.f == 3
{
    quasihavocall x: Ref :: x in s ==> x.f
    assert a.f == 3
}
