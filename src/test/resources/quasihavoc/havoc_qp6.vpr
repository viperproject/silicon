// complicated yet injective qp

field f: Int

function dedup(x: Ref, y: Ref): Ref {
    x
}

method foo(s: Set[Ref], y: Ref)
    requires forall x: Ref :: x in s ==> acc(dedup(x, x).f) && dedup(x, x).f == 3
    requires y in s
{
    quasihavoc y.f
    assert forall x: Ref :: x in s && x != y ==> x.f == 3
}
