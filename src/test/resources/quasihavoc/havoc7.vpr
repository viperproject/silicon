field f: Int

// quasihavoc a reference that we only have half of a permission to. Despite this, we
// can still assert about it

predicate p(y: Ref) {acc(y.f, 1/2) && y.f == 3}
method foo2(x: Ref)
    requires acc(x.f) && x.f == 3
{
    fold p(x)
    // Half of x.f is available, the other half is wrapped in the predicate

    quasihavoc x.f
    // This quasihavoc destroys the information about our heap chunk. Even though its
    // value is stored in the predicate, we cannot assert about it.
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert x.f == 3
}
