field f: Int

predicate Pred(z: Ref) {
    acc(z.f) && z.f >= 3
}

method foo(x: Ref, s: Set[Ref])
    requires forall a: Ref :: a in s ==> Pred(a)
    requires x in s
    requires unfolding Pred(x) in x.f == 3
{
    quasihavoc Pred(x)
    unfold Pred(x)

    assert x.f >= 3
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert x.f == 3
}
