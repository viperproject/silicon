field next: Ref

predicate list(x: Ref){
    x != null ==> acc(x.next) && list(x.next)
}

method test()
{
    var x: Ref
    var y: Ref
    var z: Ref 

    x := new(*)
    y := new(*)
    z := new(*)

    z.next := null
    y.next := z
    x.next := y

    
    fold list(z.next)
    fold list(z)
    fold list(y)

    package list(y) --* list(x) {
        fold list(x)
    }
        
    reverse(x)
}


method reverse(x: Ref)
requires list(x)
ensures list(x)

